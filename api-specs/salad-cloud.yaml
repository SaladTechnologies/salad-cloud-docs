openapi: 3.1.0
info:
  title: SaladCloud API
  description: 'The SaladCloud REST API. Please refer to the [SaladCloud API Documentation](https://docs.salad.com/api-reference) for more details.'
  termsOfService: 'https://salad.com/terms'
  contact:
    name: SaladCloud Support
    url: 'https://salad.com'
    email: cloud@salad.com
  license:
    name: MIT License
    identifier: MIT
  version: 0.9.0-alpha.12
servers:
  - url: 'https://api.salad.com/api/public'
paths:
  '/organizations/{organization_name}/projects/{project_name}/containers':
    summary: Container Groups
    description: Operations for container groups
    parameters:
      - $ref: '#/components/parameters/organization_name'
      - $ref: '#/components/parameters/project_name'
    get:
      operationId: list_container_groups
      summary: List Container Groups
      description: Gets the list of container groups
      responses:
        '200':
          $ref: '#/components/responses/ListContainerGroups'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - container_groups
    post:
      operationId: create_container_group
      summary: Create Container Group
      description: Creates a new container group
      requestBody:
        $ref: '#/components/requestBodies/CreateContainerGroup'
      responses:
        '201':
          $ref: '#/components/responses/CreateContainerGroup'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - container_groups
  '/organizations/{organization_name}/projects/{project_name}/containers/{container_group_name}':
    summary: Container Group
    description: Operations for a container group
    parameters:
      - $ref: '#/components/parameters/organization_name'
      - $ref: '#/components/parameters/project_name'
      - $ref: '#/components/parameters/container_group_name'
    get:
      operationId: get_container_group
      summary: Get Container Group
      description: Gets a container group
      responses:
        '200':
          $ref: '#/components/responses/GetContainerGroup'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - container_groups
    patch:
      operationId: update_container_group
      summary: Update Container Group
      description: Updates a container group
      requestBody:
        $ref: '#/components/requestBodies/UpdateContainerGroup'
      responses:
        '200':
          $ref: '#/components/responses/UpdateContainerGroup'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - container_groups
    delete:
      operationId: delete_container_group
      summary: Delete Container Group
      description: Deletes a container group
      responses:
        '202':
          $ref: '#/components/responses/DeleteContainerGroup'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - container_groups
  '/organizations/{organization_name}/projects/{project_name}/containers/{container_group_name}/errors':
    summary: Workload Errors
    description: Operations for workload errors
    parameters:
      - $ref: '#/components/parameters/organization_name'
      - $ref: '#/components/parameters/project_name'
      - $ref: '#/components/parameters/container_group_name'
    get:
      operationId: get_workload_errors
      summary: Get Workload Errors
      description: Gets the workload errors. This has been deprecated and will be replaced by the new System Logs endpoint. See `/system-logs`.
      responses:
        '200':
          $ref: '#/components/responses/ListWorkloadErrors'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      deprecated: true
      tags:
        - workload_errors
  '/organizations/{organization_name}/projects/{project_name}/containers/{container_group_name}/system-logs':
    summary: System Logs
    description: Operations for System Logs
    parameters:
      - $ref: '#/components/parameters/organization_name'
      - $ref: '#/components/parameters/project_name'
      - $ref: '#/components/parameters/container_group_name'
    get:
      operationId: get_system_logs
      summary: Get System Logs
      description: Gets the System Logs
      responses:
        '200':
          $ref: '#/components/responses/ListSystemLogs'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - system_logs
  '/organizations/{organization_name}/projects/{project_name}/containers/{container_group_name}/start':
    summary: Container Group
    description: Operations for a container group
    parameters:
      - $ref: '#/components/parameters/organization_name'
      - $ref: '#/components/parameters/project_name'
      - $ref: '#/components/parameters/container_group_name'
    post:
      operationId: start_container_group
      summary: Start Container Group
      description: Starts a container group
      responses:
        '202':
          $ref: '#/components/responses/StartContainerGroup'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - container_groups
  '/organizations/{organization_name}/projects/{project_name}/containers/{container_group_name}/stop':
    summary: Container Group
    description: Operations for a container group
    parameters:
      - $ref: '#/components/parameters/organization_name'
      - $ref: '#/components/parameters/project_name'
      - $ref: '#/components/parameters/container_group_name'
    post:
      operationId: stop_container_group
      summary: Stop Container Group
      description: Stops a container group
      responses:
        '202':
          $ref: '#/components/responses/StopContainerGroup'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - container_groups
  '/organizations/{organization_name}/projects/{project_name}/containers/{container_group_name}/instances':
    summary: Container Group Instances
    description: Operations for container group instances
    parameters:
      - $ref: '#/components/parameters/organization_name'
      - $ref: '#/components/parameters/project_name'
      - $ref: '#/components/parameters/container_group_name'
    get:
      operationId: list_container_group_instances
      summary: List Container Group Instances
      description: Gets the list of container group instances
      responses:
        '200':
          $ref: '#/components/responses/ListContainerGroupInstances'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - container_groups
  '/organizations/{organization_name}/projects/{project_name}/containers/{container_group_name}/instances/{container_group_instance_id}':
    summary: Container Group Instance
    description: Operations for a container group instance
    parameters:
      - $ref: '#/components/parameters/organization_name'
      - $ref: '#/components/parameters/project_name'
      - $ref: '#/components/parameters/container_group_name'
      - $ref: '#/components/parameters/container_group_instance_id'
    get:
      operationId: get_container_group_instance
      summary: Get Container Group Instance
      description: Gets a container group instance
      responses:
        '202':
          $ref: '#/components/responses/GetContainerGroupInstance'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - container_groups
    patch:
      operationId: update_container_group_instance
      summary: Update Container Group Instance
      description: Updates a container group instance
      requestBody:
        $ref: '#/components/requestBodies/UpdateContainerGroupInstance'
      responses:
        '200':
          $ref: '#/components/responses/UpdateContainerGroupInstance'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - container_groups
  '/organizations/{organization_name}/projects/{project_name}/containers/{container_group_name}/instances/{container_group_instance_id}/reallocate':
    summary: Container Group Instance
    description: Operations for a container group instance
    parameters:
      - $ref: '#/components/parameters/organization_name'
      - $ref: '#/components/parameters/project_name'
      - $ref: '#/components/parameters/container_group_name'
      - $ref: '#/components/parameters/container_group_instance_id'
    post:
      operationId: reallocate_container_group_instance
      summary: Reallocate Container Group Instance
      description: Reallocates a container group instance to run on a different Salad Node
      responses:
        '202':
          $ref: '#/components/responses/ReallocateContainerGroupInstance'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - container_groups
  '/organizations/{organization_name}/projects/{project_name}/containers/{container_group_name}/instances/{container_group_instance_id}/recreate':
    summary: Container Group Instance
    description: Operations for a container group instance
    parameters:
      - $ref: '#/components/parameters/organization_name'
      - $ref: '#/components/parameters/project_name'
      - $ref: '#/components/parameters/container_group_name'
      - $ref: '#/components/parameters/container_group_instance_id'
    post:
      operationId: recreate_container_group_instance
      summary: Recreate Container Group Instance
      description: 'Stops a container, destroys it, and starts a new one without requiring the image to be downloaded again on a new Salad Node'
      responses:
        '202':
          $ref: '#/components/responses/RecreateContainerGroupInstance'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - container_groups
  '/organizations/{organization_name}/projects/{project_name}/containers/{container_group_name}/instances/{container_group_instance_id}/restart':
    summary: Container Group Instance
    description: Operations for a container group instance
    parameters:
      - $ref: '#/components/parameters/organization_name'
      - $ref: '#/components/parameters/project_name'
      - $ref: '#/components/parameters/container_group_name'
      - $ref: '#/components/parameters/container_group_instance_id'
    post:
      operationId: restart_container_group_instance
      summary: Restart container Group Instance
      description: Stops a container and restarts it on the same Salad Node
      responses:
        '202':
          $ref: '#/components/responses/RestartContainerGroupInstance'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - container_groups
  '/organizations/{organization_name}/projects/{project_name}/queues':
    summary: Queues
    description: Operations for queues
    parameters:
      - $ref: '#/components/parameters/organization_name'
      - $ref: '#/components/parameters/project_name'
    get:
      operationId: list_queues
      summary: List Queues
      description: Gets the list of queues in the given project.
      responses:
        '200':
          $ref: '#/components/responses/ListQueues'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - queues
    post:
      operationId: create_queue
      summary: Create Queue
      description: Creates a new queue in the given project.
      requestBody:
        $ref: '#/components/requestBodies/CreateQueue'
      responses:
        '201':
          $ref: '#/components/responses/CreateQueue'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - queues
  '/organizations/{organization_name}/projects/{project_name}/queues/{queue_name}':
    summary: Queue
    description: Operations for a queue
    parameters:
      - $ref: '#/components/parameters/organization_name'
      - $ref: '#/components/parameters/project_name'
      - $ref: '#/components/parameters/queue_name'
    get:
      operationId: get_queue
      summary: Get Queue
      description: Gets an existing queue in the given project.
      responses:
        '200':
          $ref: '#/components/responses/GetQueue'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - queues
    patch:
      operationId: update_queue
      summary: Update Queue
      description: Updates an existing queue in the given project.
      requestBody:
        $ref: '#/components/requestBodies/UpdateQueue'
      responses:
        '200':
          $ref: '#/components/responses/UpdateQueue'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - queues
    delete:
      operationId: delete_queue
      summary: Delete Queue
      description: Deletes an existing queue in the given project.
      responses:
        '202':
          $ref: '#/components/responses/DeleteQueue'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - queues
  '/organizations/{organization_name}/projects/{project_name}/queues/{queue_name}/jobs':
    summary: Jobs in a Queue
    description: Operations for jobs in a queue
    parameters:
      - $ref: '#/components/parameters/organization_name'
      - $ref: '#/components/parameters/project_name'
      - $ref: '#/components/parameters/queue_name'
    get:
      operationId: list_queue_jobs
      summary: List Jobs
      description: Gets the list of jobs in a queue
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          $ref: '#/components/responses/ListQueueJobs'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - queues
    post:
      operationId: create_queue_job
      summary: Create Job
      description: Creates a new job
      requestBody:
        $ref: '#/components/requestBodies/CreateQueueJob'
      responses:
        '201':
          $ref: '#/components/responses/CreateQueueJob'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - queues
  '/organizations/{organization_name}/projects/{project_name}/queues/{queue_name}/jobs/{queue_job_id}':
    summary: Jobs in a Queue
    description: Operations for jobs in a queue
    parameters:
      - $ref: '#/components/parameters/organization_name'
      - $ref: '#/components/parameters/project_name'
      - $ref: '#/components/parameters/queue_name'
      - $ref: '#/components/parameters/queue_job_id'
    get:
      operationId: get_queue_job
      summary: Get Job
      description: Gets a job in a queue
      responses:
        '200':
          $ref: '#/components/responses/GetQueueJob'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - queues
    delete:
      operationId: delete_queue_job
      summary: Delete Job
      description: Cancels a job in a queue
      responses:
        '202':
          $ref: '#/components/responses/DeleteQueueJob'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - queues
  '/organizations/{organization_name}/quotas':
    summary: Quotas
    description: Operations for quotas
    parameters:
      - $ref: '#/components/parameters/organization_name'
    get:
      operationId: get_quotas
      summary: Get Quotas
      description: Gets the organization quotas
      responses:
        '200':
          $ref: '#/components/responses/GetQuotas'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - quotas
  '/organizations/{organization_name}/inference-endpoints':
    summary: Inference Endpoints
    description: Operations for inference endpoints
    parameters:
      - $ref: '#/components/parameters/organization_name'
    get:
      operationId: list_inference_endpoints
      summary: List Inference Endpoints
      description: Lists inference endpoints.
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          $ref: '#/components/responses/ListInferenceEndpoints'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - inference_endpoints
  '/organizations/{organization_name}/inference-endpoints/{inference_endpoint_name}':
    summary: Inference Endpoints
    description: Operations for an inference endpoint
    parameters:
      - $ref: '#/components/parameters/organization_name'
      - $ref: '#/components/parameters/inference_endpoint_name'
    get:
      operationId: get_inference_endpoint
      summary: Get an Inference Endpoint
      description: Gets an inference endpoint.
      responses:
        '200':
          $ref: '#/components/responses/GetInferenceEndpoint'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - inference_endpoints
  '/organizations/{organization_name}/inference-endpoints/{inference_endpoint_name}/jobs':
    summary: Jobs in an inference endpoint
    description: Operations for jobs in an inference endpoint
    parameters:
      - $ref: '#/components/parameters/organization_name'
      - $ref: '#/components/parameters/inference_endpoint_name'
    get:
      operationId: list_inference_endpoint_jobs
      summary: List Inference Endpoint Jobs
      description: Lists inference endpoint jobs.
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          $ref: '#/components/responses/ListInferenceEndpointJobs'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - inference_endpoints
    post:
      operationId: create_inference_endpoint_job
      summary: Create a New Inference Endpoint Job
      description: Creates a new inference endpoint job.
      requestBody:
        $ref: '#/components/requestBodies/CreateInferenceEndpointJob'
      responses:
        '201':
          $ref: '#/components/responses/CreateInferenceEndpointJob'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - inference_endpoints
  '/organizations/{organization_name}/inference-endpoints/{inference_endpoint_name}/jobs/{inference_endpoint_job_id}':
    summary: Jobs in an inference endpoint
    description: Operations for jobs in an inference endpoint
    parameters:
      - $ref: '#/components/parameters/organization_name'
      - $ref: '#/components/parameters/inference_endpoint_name'
      - $ref: '#/components/parameters/inference_endpoint_job_id'
    get:
      operationId: get_inference_endpoint_job
      summary: Get an Inference Endpoint Job
      description: Gets an inference endpoint job.
      responses:
        '200':
          $ref: '#/components/responses/GetInferenceEndpointJob'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - inference_endpoints
    delete:
      operationId: delete_inference_endpoint_job
      summary: Cancel an Inference Endpoint Job
      description: Cancels an inference endpoint job.
      responses:
        '202':
          $ref: '#/components/responses/202'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - inference_endpoints
  '/organizations/{organization_name}/gpu-classes':
    summary: GPU Classes
    description: Allows reading the GPU Classes collection available for the organization
    parameters:
      - $ref: '#/components/parameters/organization_name'
    get:
      operationId: list_gpu_classes
      summary: List the GPU Classes
      description: List the GPU Classes
      responses:
        '200':
          $ref: '#/components/responses/ListGpuClasses'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - organization_data
  '/organizations/{organization_name}/webhook-secret-key':
    parameters:
      - $ref: '#/components/parameters/organization_name'
    get:
      operationId: get_webhook_secret_key
      summary: Gets the webhook secret key
      description: Gets the webhook secret key
      responses:
        '200':
          $ref: '#/components/responses/WebhookSecretKey'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - webhook_secret_key
    post:
      operationId: update_webhook_secret_key
      summary: Updates the webhook secret key
      description: Updates the webhook secret key
      responses:
        '200':
          $ref: '#/components/responses/WebhookSecretKey'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        default:
          $ref: '#/components/responses/UnknownError'
      tags:
        - webhook_secret_key
components:
  parameters:
    Page:
      in: query
      name: page
      description: The page number.
      schema:
        $ref: '#/components/schemas/Page'
    PageSize:
      in: query
      name: page_size
      description: The maximum number of items per page.
      schema:
        $ref: '#/components/schemas/PageSize'
    container_group_instance_id:
      in: path
      name: container_group_instance_id
      description: The unique container group instance identifier
      required: true
      schema:
        $ref: '#/components/schemas/ContainerGroupInstanceId'
    container_group_name:
      in: path
      name: container_group_name
      description: The unique container group name
      required: true
      schema:
        $ref: '#/components/schemas/ContainerGroupName'
    inference_endpoint_job_id:
      name: inference_endpoint_job_id
      description: The inference endpoint job identifier.
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/InferenceEndpointJobId'
    inference_endpoint_name:
      name: inference_endpoint_name
      in: path
      description: The inference endpoint name.
      required: true
      schema:
        $ref: '#/components/schemas/InferenceEndpointName'
    organization_name:
      name: organization_name
      in: path
      description: 'Your organization name. This identifies the billing context for the API operation and represents a security boundary for SaladCloud resources. The organization must be created before using the API, and you must be a member of the organization.'
      required: true
      schema:
        $ref: '#/components/schemas/OrganizationName'
    project_name:
      name: project_name
      in: path
      description: Your project name. This represents a collection of related SaladCloud resources. The project must be created before using the API.
      required: true
      schema:
        $ref: '#/components/schemas/ProjectName'
    queue_job_id:
      in: path
      name: queue_job_id
      required: true
      schema:
        type: string
        format: uuid
        examples:
          - 7dcd6922-50e9-4d56-89b5-91cde26f0211
      description: The job identifier. This is automatically generated and assigned when the job is created.
    queue_name:
      in: path
      name: queue_name
      required: true
      schema:
        type: string
        examples:
          - fifo-queue
        maxLength: 63
        minLength: 2
        pattern: '^[a-z][a-z0-9-]{0,61}[a-z0-9]$'
      description: The queue name.
  schemas:
    Container:
      description: Represents a container with its configuration and resource requirements.
      type: object
      properties:
        command:
          description: List of commands to run inside the container. Each command is a string representing a command-line instruction.
          type:
            - 'null'
            - array
          items:
            type: string
            pattern: ^.*$
            minLength: 1
            maxLength: 2048
          maxItems: 100
          minItems: 0
        environment_variables:
          description: Environment variables to set in the container.
          type: object
          additionalProperties:
            type: string
            description: Key-value pairs of environment variables to set in the container.
            pattern: ^.*$
            minLength: 0
            maxLength: 2048
        hash:
          description: SHA-256 hash (64-character hexadecimal string)
          type: string
          maxLength: 135
          minLength: 47
          pattern: '^sha\d{1,3}:[a-fA-F0-9]{40,135}$'
        image:
          $ref: '#/components/schemas/ContainerImage'
        image_caching:
          $ref: '#/components/schemas/ContainerImageCaching'
        logging:
          $ref: '#/components/schemas/ContainerLogging'
        resources:
          $ref: '#/components/schemas/ContainerResourceRequirements'
        size:
          description: Size of the container in bytes.
          type: integer
          format: int64
          maximum: 9223372036854776000
          minimum: 0
      required:
        - command
        - image
        - resources
    ContainerGroup:
      description: A container group definition that represents a scalable set of identical containers running as a distributed service
      type: object
      properties:
        autostart_policy:
          description: Defines whether containers in this group should automatically start when deployed (true) or require manual starting (false)
          type: boolean
        container:
          $ref: '#/components/schemas/Container'
        country_codes:
          description: 'List of country codes where container instances are permitted to run. When not specified or empty, containers may run in any available region.'
          type: array
          items:
            $ref: '#/components/schemas/CountryCode'
          maxItems: 500
          minItems: 0
        create_time:
          description: ISO 8601 timestamp when this container group was initially created
          type: string
          format: date-time
        current_state:
          $ref: '#/components/schemas/ContainerGroupState'
        display_name:
          $ref: '#/components/schemas/DisplayName'
        id:
          $ref: '#/components/schemas/ContainerGroupId'
        liveness_probe:
          $ref: '#/components/schemas/ContainerGroupLivenessProbe'
        name:
          $ref: '#/components/schemas/ContainerGroupName'
        networking:
          $ref: '#/components/schemas/ContainerGroupNetworking'
        organization_name:
          $ref: '#/components/schemas/OrganizationName'
        pending_change:
          description: Indicates whether a configuration change has been requested but not yet applied to all containers in the group
          type: boolean
        priority:
          $ref: '#/components/schemas/ContainerGroupPriority'
        project_name:
          $ref: '#/components/schemas/ProjectName'
        queue_autoscaler:
          $ref: '#/components/schemas/ContainerGroupQueueAutoscaler'
        queue_connection:
          $ref: '#/components/schemas/ContainerGroupQueueConnection'
        readiness_probe:
          $ref: '#/components/schemas/ContainerGroupReadinessProbe'
        replicas:
          $ref: '#/components/schemas/ContainerGroupReplicas'
        restart_policy:
          $ref: '#/components/schemas/ContainerRestartPolicy'
        startup_probe:
          $ref: '#/components/schemas/ContainerGroupStartupProbe'
        update_time:
          description: ISO 8601 timestamp when this container group was last updated
          type: string
          format: date-time
        version:
          description: Incremental version number that increases with each configuration change to the container group
          type: integer
          format: int32
          maximum: 2147483647
          minimum: 1
      required:
        - autostart_policy
        - container
        - country_codes
        - create_time
        - current_state
        - display_name
        - id
        - name
        - organization_name
        - pending_change
        - priority
        - project_name
        - replicas
        - restart_policy
        - update_time
        - version
      title: Container Group
    ContainerGroupCollection:
      description: A paginated collection of container groups that provides a structured way to access multiple container group resources in a single response.
      type: object
      properties:
        items:
          description: 'An array containing container group objects. Each object represents a discrete container group with its own properties, configuration, and status.'
          type: array
          items:
            $ref: '#/components/schemas/ContainerGroup'
          maxItems: 100
          minItems: 0
      required:
        - items
      title: Container Group Collection
    ContainerGroupId:
      description: The container group identifier.
      type: string
      format: uuid
      examples:
        - ab3a4591-efc3-46c0-b06a-3d820c0ec100
      title: Container Group ID
    ContainerGroupInstance:
      description: 'A Container Group Instance represents a running instance of a container group on a specific machine. It provides information about the execution state, readiness, and version of the deployed container group.'
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ContainerGroupInstanceId'
        machine_id:
          $ref: '#/components/schemas/ContainerGroupMachineId'
        state:
          $ref: '#/components/schemas/ContainerGroupInstanceState'
        update_time:
          description: The UTC timestamp when the container group instance last changed its state. This helps track the lifecycle and state transitions of the instance.
          type: string
          format: date-time
        version:
          description: The version of the container group definition currently running on this instance. Used to track deployment and update progress across the container group fleet.
          type: integer
          format: int32
          maximum: 2147483647
          minimum: 1
        ready:
          description: 'Indicates whether the container group instance is currently passing its readiness checks and is able to receive traffic or perform its intended function. If no readiness probe is defined, this will be true once the instance is fully started.'
          type: boolean
        started:
          description: Indicates whether the container group instance has successfully completed its startup sequence and passed any configured startup probes. This will always be true when no startup probe is defined for the container group.
          type: boolean
        deletion_cost:
          description: The cost of deleting the container group instance
          type: integer
          default: 0
          maximum: 100000
          minimum: 0
      required:
        - id
        - machine_id
        - state
        - update_time
        - version
    ContainerGroupInstanceCollection:
      description: A collection of container group instances returned as part of a paginated response or batch operation result.
      type: object
      properties:
        instances:
          description: 'An array of container group instances, each representing a deployed container group with its current state and configuration information.'
          type: array
          items:
            $ref: '#/components/schemas/ContainerGroupInstance'
          maxItems: 1000
          minItems: 0
      required:
        - instances
      title: Container Group Instance Collection
    ContainerGroupInstanceId:
      description: The container group instance identifier.
      type: string
      format: uuid
      examples:
        - db3a4591-efc3-46c0-b06a-3d820c0ec100
      title: Container Group Instance ID
    ContainerGroupInstancePatch:
      description: Represents a request to update a container group instance
      type: object
      properties:
        deletion_cost:
          description: The cost of deleting the container group instance
          type:
            - integer
            - 'null'
          maximum: 100000
          minimum: 0
      additionalProperties: false
    ContainerGroupInstanceState:
      description: The state of the container group instance
      type: string
      enum:
        - allocating
        - downloading
        - creating
        - running
        - stopping
      title: The Container Group Instance State
    ContainerGroupInstanceStatusCount:
      description: A summary of container group instances categorized by their current lifecycle status
      type: object
      properties:
        allocating_count:
          description: The number of container instances that are currently being allocated resources
          type: integer
          format: int32
          maximum: 2147483647
          minimum: 0
        creating_count:
          description: The number of container instances that are in the process of being created
          type: integer
          format: int32
          maximum: 2147483647
          minimum: 0
        running_count:
          description: The number of container instances that are currently running and operational
          type: integer
          format: int32
          maximum: 2147483647
          minimum: 0
        stopping_count:
          description: The number of container instances that are in the process of stopping
          type: integer
          format: int32
          maximum: 2147483647
          minimum: 0
      required:
        - allocating_count
        - creating_count
        - running_count
        - stopping_count
    ContainerGroupLivenessProbe:
      description: Defines a liveness probe for container groups that determines when to restart a container if it becomes unhealthy
      type:
        - object
        - 'null'
      properties:
        exec:
          $ref: '#/components/schemas/ContainerGroupProbeExec'
        failure_threshold:
          description: Number of consecutive failures required to consider the probe as failed
          type: integer
          format: int32
          default: 3
          maximum: 20
          minimum: 1
        grpc:
          $ref: '#/components/schemas/ContainerGroupProbeGrpc'
        http:
          $ref: '#/components/schemas/ContainerGroupProbeHttp'
        initial_delay_seconds:
          description: Number of seconds to wait after container start before initiating liveness probes
          type: integer
          format: int32
          default: 0
          maximum: 1200
          minimum: 0
        period_seconds:
          description: Frequency in seconds at which the probe should be executed
          type: integer
          format: int32
          default: 10
          maximum: 120
          minimum: 1
        success_threshold:
          description: Number of consecutive successes required to consider the probe successful
          type: integer
          format: int32
          default: 1
          maximum: 10
          minimum: 1
        tcp:
          $ref: '#/components/schemas/ContainerGroupProbeTcp'
        timeout_seconds:
          description: Number of seconds after which the probe times out if no response is received
          type: integer
          format: int32
          default: 30
          maximum: 60
          minimum: 1
      required:
        - failure_threshold
        - initial_delay_seconds
        - period_seconds
        - success_threshold
        - timeout_seconds
    ContainerGroupMachineId:
      description: The container group machine identifier.
      type: string
      format: uuid
      examples:
        - eb3a4591-efc3-46c0-b06a-3d820c0ec100
      title: Container Group Machine ID
    ContainerGroupName:
      description: The container group name.
      type: string
      examples:
        - mandlebrot
      maxLength: 63
      minLength: 2
      pattern: '^[a-z][a-z0-9-]{0,61}[a-z0-9]$'
      title: Container Group Name
    ContainerGroupNetworking:
      description: 'Network configuration for container groups that defines connectivity, routing, and access control settings'
      type: object
      properties:
        auth:
          description: Whether authentication is required for network access to the container group
          type: boolean
        client_request_timeout:
          $ref: '#/components/schemas/ContainerGroupNetworkingClientRequestTimeout'
        dns:
          description: Domain name or URL endpoint for the container group's network interface
          type: string
          format: url
          maxLength: 253
          minLength: 1
          pattern: '^([a-z][a-z0-9-]{0,61}[a-z0-9]\.)*[a-z][a-z0-9-]{0,61}[a-z0-9]$'
        load_balancer:
          $ref: '#/components/schemas/ContainerGroupNetworkingLoadBalancer'
        port:
          $ref: '#/components/schemas/ContainerGroupNetworkingPort'
        protocol:
          $ref: '#/components/schemas/ContainerNetworkingProtocol'
        server_response_timeout:
          $ref: '#/components/schemas/ContainerGroupNetworkingServerResponseTimeout'
        single_connection_limit:
          $ref: '#/components/schemas/ContainerGroupNetworkingSingleConnectionLimit'
      required:
        - auth
        - dns
        - load_balancer
        - port
        - protocol
      title: Container Group Networking Configuration
    ContainerGroupNetworkingClientRequestTimeout:
      description: The container group networking client request timeout.
      type: integer
      format: int32
      default: 100000
      examples:
        - 100000
      maximum: 100000
      minimum: 1
      title: Container Group Networking Client Request Timeout
    ContainerGroupNetworkingLoadBalancer:
      description: The container group networking load balancer.
      type: string
      default: round_robin
      enum:
        - round_robin
        - least_number_of_connections
      title: The Container Group Networking Load Balancer
    ContainerGroupNetworkingPort:
      description: The container group networking port.
      type: integer
      format: int32
      examples:
        - 60000
      maximum: 65535
      minimum: 1
      title: Container Group Networking Port
    ContainerGroupNetworkingServerResponseTimeout:
      description: The container group networking server response timeout.
      type: integer
      format: int32
      default: 100000
      examples:
        - 100000
      maximum: 100000
      minimum: 1
      title: Container Group Networking Server Response Timeout
    ContainerGroupNetworkingSingleConnectionLimit:
      description: The container group networking single connection limit flag.
      type: boolean
      default: false
      examples:
        - false
      title: Container Group Networking Single Connection Limit
    ContainerGroupPatch:
      description: Represents a request to update a container group
      type: object
      properties:
        display_name:
          description: 'The display name for the container group. If null is provided, the display name will be set to the container group name.'
          type:
            - string
            - 'null'
          maxLength: 63
          minLength: 2
          pattern: '^[ ,-.0-9A-Za-z]+$'
        container:
          $ref: '#/components/schemas/UpdateContainer'
        replicas:
          description: The desired number of instances for your container group deployment.
          type:
            - integer
            - 'null'
          maximum: 500
          minimum: 0
        country_codes:
          description: List of countries nodes must be located in. Remove this field to permit nodes from any country.
          type:
            - array
            - 'null'
          items:
            $ref: '#/components/schemas/CountryCode'
          maxItems: 500
          minItems: 1
        networking:
          $ref: '#/components/schemas/UpdateContainerGroupNetworking'
        liveness_probe:
          $ref: '#/components/schemas/ContainerGroupLivenessProbe'
        readiness_probe:
          $ref: '#/components/schemas/ContainerGroupReadinessProbe'
        startup_probe:
          $ref: '#/components/schemas/ContainerGroupStartupProbe'
        queue_autoscaler:
          $ref: '#/components/schemas/ContainerGroupQueueAutoscaler'
    ContainerGroupPriority:
      description: 'Specifies the priority level for container group execution, which determines resource allocation and scheduling precedence.'
      type:
        - string
        - 'null'
      enum:
        - high
        - medium
        - low
        - batch
      title: Container Group Priority
    ContainerGroupProbeExec:
      description: Defines the exec action for a probe in a container group. This is used to execute a command inside a container for health checks.
      type: object
      properties:
        command:
          description: 'The command to execute inside the container. Exit status of 0 is considered successful, any other exit status is considered failure.'
          type: array
          items:
            type: string
            description: Individual component of the command to be run.
            pattern: ^.*$
            minLength: 1
            maxLength: 2048
          maxItems: 100
          minItems: 1
      required:
        - command
      title: Container Group Probe Exec
    ContainerGroupProbeGrpc:
      description: 'Configuration for gRPC-based health probes in container groups, used to determine container health status.'
      type: object
      properties:
        port:
          description: The port number on which the gRPC health check service is exposed.
          type: integer
          format: int32
          maximum: 65536
          minimum: 0
        service:
          description: The name of the gRPC service that implements the health check protocol.
          type: string
          maxLength: 1024
          minLength: 0
          pattern: ^.*$
      required:
        - port
        - service
      title: Container Group gRPC Probe
    ContainerGroupProbeHttp:
      description: Defines HTTP probe configuration for container health checks within a container group.
      type: object
      properties:
        headers:
          $ref: '#/components/schemas/ContainerGroupProbeHttpHeaders'
        path:
          description: The HTTP path that will be probed to check container health.
          type: string
          maxLength: 2048
          minLength: 1
          pattern: ^.*$
        port:
          description: The TCP port number to which the HTTP request will be sent.
          type: integer
          format: int32
          maximum: 65536
          minimum: 0
        scheme:
          $ref: '#/components/schemas/ContainerProbeHttpScheme'
      required:
        - headers
        - path
        - port
        - scheme
      title: Container Group HTTP Probe Configuration
    ContainerGroupProbeHttpHeader:
      type: object
      properties:
        name:
          description: The name of the HTTP header
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^.*$
        value:
          description: The value associated with the HTTP header
          type: string
          maxLength: 1024
          minLength: 1
          pattern: ^.*$
      required:
        - name
        - value
    ContainerGroupProbeHttpHeaders:
      description: A collection of HTTP header name-value pairs used for configuring requests and responses in container group endpoints. Each header consists of a name and its corresponding value.
      type: array
      items:
        $ref: '#/components/schemas/ContainerGroupProbeHttpHeader'
      maxItems: 50
      minItems: 1
      title: HTTP Headers
    ContainerGroupProbeTcp:
      description: Configuration for a TCP probe used to check container health via network connectivity.
      type: object
      properties:
        port:
          description: The TCP port number that the probe should connect to. Must be a valid port number between 0 and 65535.
          type: integer
          format: int32
          maximum: 65535
          minimum: 0
      required:
        - port
      title: Container Group TCP Probe
    ContainerGroupPrototype:
      description: 'Represents a request to create a container group, which manages a collection of container instances with shared configuration and scaling policies'
      type: object
      properties:
        autostart_policy:
          description: Determines whether the container group should start automatically when created (true) or remain stopped until manually started (false)
          type: boolean
        container:
          $ref: '#/components/schemas/CreateContainer'
        country_codes:
          description: List of countries nodes must be located in. Remove this field to permit nodes from any country.
          type: array
          items:
            $ref: '#/components/schemas/CountryCode'
          maxItems: 500
          minItems: 1
        display_name:
          description: 'Human-readable name for the container group that can include spaces and special characters, used for display purposes'
          type: string
          maxLength: 63
          minLength: 2
          pattern: '^[ ,-.0-9A-Za-z]+$'
        liveness_probe:
          $ref: '#/components/schemas/ContainerGroupLivenessProbe'
        name:
          description: Unique identifier for the container group that must follow DNS naming conventions (lowercase alphanumeric with hyphens)
          type: string
          maxLength: 63
          minLength: 2
          pattern: '^[a-z][a-z0-9-]{0,61}[a-z0-9]$'
        networking:
          $ref: '#/components/schemas/CreateContainerGroupNetworking'
        queue_autoscaler:
          $ref: '#/components/schemas/ContainerGroupQueueAutoscaler'
        queue_connection:
          $ref: '#/components/schemas/ContainerGroupQueueConnection'
        readiness_probe:
          $ref: '#/components/schemas/ContainerGroupReadinessProbe'
        replicas:
          description: Number of container instances to deploy and maintain for this container group
          type: integer
          format: int32
          maximum: 500
          minimum: 0
        restart_policy:
          $ref: '#/components/schemas/ContainerRestartPolicy'
        startup_probe:
          $ref: '#/components/schemas/ContainerGroupStartupProbe'
      required:
        - autostart_policy
        - container
        - name
        - replicas
        - restart_policy
      title: Container Group Creation Request
    ContainerGroupQueueAutoscaler:
      description: Defines configuration for automatically scaling container instances based on queue length. The autoscaler monitors a queue and adjusts the number of running replicas to maintain the desired queue length.
      type: object
      properties:
        desired_queue_length:
          description: The target number of items in the queue that the autoscaler attempts to maintain by scaling the containers up or down
          type: integer
          format: int32
          maximum: 100
          minimum: 1
        max_replicas:
          description: The maximum number of instances the container can scale up to
          type: integer
          format: int32
          maximum: 500
          minimum: 1
        max_downscale_per_minute:
          description: The maximum number of instances that can be removed per minute to prevent rapid downscaling
          type: integer
          format: int32
          maximum: 100
          minimum: 1
        max_upscale_per_minute:
          description: The maximum number of instances that can be added per minute to prevent rapid upscaling
          type: integer
          format: int32
          maximum: 100
          minimum: 1
        min_replicas:
          description: 'The minimum number of instances the container can scale down to, ensuring baseline availability'
          type: integer
          format: int32
          maximum: 100
          minimum: 0
        polling_period:
          description: The period (in seconds) in which the autoscaler checks the queue length and applies the scaling formula
          type: integer
          format: int32
          maximum: 1800
          minimum: 15
      required:
        - desired_queue_length
        - max_replicas
        - min_replicas
      title: Queue-based Autoscaler Configuration
    ContainerGroupQueueConnection:
      description: 'Configuration for connecting a container group to a message queue system, enabling asynchronous communication between services.'
      type: object
      properties:
        path:
          description: 'The endpoint path for accessing the queue service, relative to the base URL of the queue server.'
          type: string
          maxLength: 1024
          minLength: 1
          pattern: ^.*$
        port:
          description: The network port number used to connect to the queue service. Must be a valid TCP/IP port between 1 and 65535.
          type: integer
          format: int32
          maximum: 65535
          minimum: 1
        queue_name:
          description: 'Unique identifier for the queue. Must start with a lowercase letter, can contain lowercase letters, numbers, and hyphens, and must end with a letter or number.'
          type: string
          maxLength: 63
          minLength: 2
          pattern: '^[a-z][a-z0-9-]{0,61}[a-z0-9]$'
      required:
        - path
        - port
        - queue_name
    ContainerGroupReadinessProbe:
      description: 'Defines how to check if a container is ready to serve traffic. The readiness probe determines whether the container''s application is ready to accept traffic. If the readiness probe fails, the container is considered not ready and traffic will not be sent to it.'
      type:
        - object
        - 'null'
      properties:
        exec:
          $ref: '#/components/schemas/ContainerGroupProbeExec'
        failure_threshold:
          description: 'The number of consecutive failures required to consider the probe failed. After this many consecutive failures, the container is marked as not ready.'
          type: integer
          format: int32
          default: 3
          maximum: 20
          minimum: 1
        grpc:
          $ref: '#/components/schemas/ContainerGroupProbeGrpc'
        http:
          $ref: '#/components/schemas/ContainerGroupProbeHttp'
        initial_delay_seconds:
          description: The time in seconds to wait after the container starts before initiating the first probe. This allows time for the application to initialize before being tested.
          type: integer
          format: int32
          default: 0
          maximum: 1200
          minimum: 0
        period_seconds:
          description: How frequently (in seconds) the probe should be executed during the container's lifetime. Specifies the interval between consecutive probe executions.
          type: integer
          format: int32
          default: 1
          maximum: 120
          minimum: 1
        success_threshold:
          description: The minimum consecutive successes required to consider the probe successful after it has failed. Defines how many successful probe results are needed to transition from failure to success.
          type: integer
          format: int32
          default: 1
          maximum: 10
          minimum: 1
        tcp:
          $ref: '#/components/schemas/ContainerGroupProbeTcp'
        timeout_seconds:
          description: 'The maximum time in seconds that the probe has to complete. If the probe doesn''t return a result before the timeout, it''s considered failed.'
          type: integer
          format: int32
          default: 1
          maximum: 60
          minimum: 1
      required:
        - failure_threshold
        - initial_delay_seconds
        - period_seconds
        - success_threshold
        - timeout_seconds
    ContainerGroupReplicas:
      description: The container group replicas.
      type: integer
      format: int32
      examples:
        - 50
      maximum: 500
      minimum: 0
      title: Container Group Replicas
    ContainerGroupStartupProbe:
      description: 'Defines a probe that checks if a container application has started successfully. Startup probes help prevent applications from being prematurely marked as unhealthy during initialization. The probe can use HTTP requests, TCP connections, gRPC calls, or shell commands to determine startup status.'
      type:
        - object
        - 'null'
      properties:
        exec:
          $ref: '#/components/schemas/ContainerGroupProbeExec'
        failure_threshold:
          description: Number of times the probe must fail before considering the container not started
          type: integer
          format: int32
          default: 15
          maximum: 20
          minimum: 1
        grpc:
          $ref: '#/components/schemas/ContainerGroupProbeGrpc'
        http:
          $ref: '#/components/schemas/ContainerGroupProbeHttp'
        initial_delay_seconds:
          description: Number of seconds to wait after container startup before the first probe is executed
          type: integer
          format: int32
          default: 0
          maximum: 1200
          minimum: 0
        tcp:
          $ref: '#/components/schemas/ContainerGroupProbeTcp'
        period_seconds:
          description: How frequently (in seconds) to perform the probe
          type: integer
          format: int32
          default: 3
          maximum: 120
          minimum: 1
        success_threshold:
          description: Minimum consecutive successes required for the probe to be considered successful
          type: integer
          format: int32
          default: 2
          maximum: 10
          minimum: 1
        timeout_seconds:
          description: Maximum time (in seconds) to wait for a probe response before considering it failed
          type: integer
          format: int32
          default: 10
          maximum: 60
          minimum: 1
      required:
        - failure_threshold
        - initial_delay_seconds
        - period_seconds
        - success_threshold
        - timeout_seconds
      title: Container Group Startup Probe
    ContainerGroupState:
      description: 'Represents the operational state of a container group during its lifecycle, including timing information, status, and instance distribution metrics. This state captures the current execution status, start and finish times, and provides visibility into the operational health across instances.'
      type: object
      properties:
        description:
          description: Optional textual description or notes about the current state of the container group
          type:
            - string
            - 'null'
          maxLength: 1000
          minLength: 0
          pattern: ^.*$
        finish_time:
          description: Timestamp when the container group execution finished or is expected to finish
          type: string
          format: date-time
        instance_status_counts:
          $ref: '#/components/schemas/ContainerGroupInstanceStatusCount'
        start_time:
          description: Timestamp when the container group execution started
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/ContainerGroupStatus'
      required:
        - finish_time
        - instance_status_counts
        - start_time
        - status
      title: Container Group State
    ContainerGroupStatus:
      description: Represents the current operational state of a container group within the Salad platform.
      type: string
      enum:
        - pending
        - running
        - stopped
        - succeeded
        - failed
        - deploying
      title: ContainerGroupStatus
    ContainerGroupsQuotas:
      description: Represents the organization quotas for container groups
      type: object
      properties:
        container_replicas_quota:
          description: The maximum number of replicas that can be created for a container group
          type: integer
          format: int32
          examples:
            - 500
          maximum: 2147483647
          minimum: 0
        container_replicas_used:
          description: The number of replicas that are currently in use
          type: integer
          format: int32
          examples:
            - 10
          maximum: 2147483647
          minimum: 0
        max_container_group_reallocations_per_minute:
          description: The maximum number of container group reallocations per minute
          type: integer
          format: int32
          examples:
            - 10
          maximum: 2147483647
          minimum: 0
        max_container_group_recreates_per_minute:
          description: The maximum number of container group recreates per minute
          type: integer
          format: int32
          examples:
            - 10
          maximum: 2147483647
          minimum: 0
        max_container_group_restarts_per_minute:
          description: The maximum number of container group restarts per minute
          type: integer
          format: int32
          examples:
            - 10
          maximum: 2147483647
          minimum: 0
      required:
        - container_replicas_quota
        - container_replicas_used
    ContainerImage:
      description: The container image.
      type: string
      examples:
        - 'acme/:latest'
      maxLength: 2048
      minLength: 1
      pattern: ^.*$
      title: Container Image
    ContainerImageCaching:
      description: The container image caching.
      type: boolean
      examples:
        - true
      title: Container Image Caching
    ContainerLogging:
      description: 'Configuration options for directing container logs to a logging provider. This schema enables you to specify a single logging destination for container output, supporting monitoring, debugging, and analytics use cases. Each provider has its own configuration parameters defined in the referenced schemas. Only one logging provider can be selected at a time.'
      type: object
      properties:
        axiom:
          $ref: '#/components/schemas/ContainerLoggingAxiom'
        datadog:
          $ref: '#/components/schemas/ContainerLoggingDatadog'
        http:
          $ref: '#/components/schemas/ContainerLoggingHttp'
        new_relic:
          $ref: '#/components/schemas/ContainerLoggingNewRelic'
        splunk:
          $ref: '#/components/schemas/ContainerLoggingSplunk'
        tcp:
          $ref: '#/components/schemas/ContainerLoggingTcp'
      title: Container Logging Configuration
    ContainerLoggingAxiom:
      description: 'Configuration settings for integrating container logs with the Axiom logging service. When specified, container logs will be forwarded to the Axiom instance defined by these parameters.'
      type: object
      properties:
        host:
          description: The Axiom host URL where logs will be sent (e.g. logs.axiom.co)
          type: string
          maxLength: 1000
          minLength: 1
          pattern: ^.*$
        api_token:
          description: Authentication token for the Axiom API with appropriate write permissions
          type: string
          maxLength: 1000
          minLength: 1
          pattern: ^.*$
        dataset:
          description: Name of the Axiom dataset where the container logs will be stored and indexed
          type: string
          maxLength: 1000
          minLength: 1
          pattern: ^.*$
      required:
        - host
        - api_token
        - dataset
      title: Axiom Logging Configuration
    ContainerLoggingDatadog:
      description: Configuration for forwarding container logs to Datadog monitoring service.
      type: object
      properties:
        host:
          description: The Datadog intake server host URL where logs will be sent.
          type: string
          maxLength: 1000
          minLength: 1
          pattern: ^.*$
        api_key:
          description: The Datadog API key used for authentication when sending logs.
          type: string
          maxLength: 1000
          minLength: 1
          pattern: ^.*$
        tags:
          description: Optional metadata tags to attach to logs for filtering and categorization in Datadog.
          type:
            - array
            - 'null'
          items:
            $ref: '#/components/schemas/ContainerLoggingDatadogTag'
          maxItems: 1000
          minItems: 0
      required:
        - host
        - api_key
        - tags
      title: Datadog Logging Configuration
    ContainerLoggingDatadogTag:
      description: Represents a Datadog tag used for container logging metadata.
      type: object
      properties:
        name:
          description: The name of the metadata tag.
          type: string
          maxLength: 1000
          minLength: 1
          pattern: ^.*$
        value:
          description: The value of the metadata tag.
          type: string
          maxLength: 1000
          minLength: 1
          pattern: ^.*$
      required:
        - name
        - value
      title: Datadog Tag for Container Logging
    ContainerLoggingHttp:
      description: 'Configuration for sending container logs to an HTTP endpoint. Defines how logs are formatted, compressed, and transmitted.'
      type: object
      properties:
        host:
          description: The hostname or IP address of the HTTP logging endpoint
          type: string
          maxLength: 1000
          minLength: 1
          pattern: ^.*$
        port:
          description: The port number of the HTTP logging endpoint (1-65535)
          type: integer
          format: int32
          maximum: 65535
          minimum: 1
        user:
          description: Optional username for HTTP authentication
          type:
            - string
            - 'null'
          maxLength: 1000
          minLength: 1
          pattern: ^.*$
        password:
          description: Optional password for HTTP authentication
          type:
            - string
            - 'null'
          maxLength: 1000
          minLength: 1
          pattern: ^.*$
        path:
          description: Optional URL path for the HTTP endpoint
          type:
            - string
            - 'null'
          maxLength: 1000
          minLength: 1
          pattern: ^.*$
        format:
          $ref: '#/components/schemas/ContainerLoggingHttpFormat'
        headers:
          description: Optional HTTP headers to include in log transmission requests
          type:
            - array
            - 'null'
          items:
            $ref: '#/components/schemas/ContainerLoggingHttpHeader'
          maxItems: 1000
          minItems: 0
        compression:
          $ref: '#/components/schemas/ContainerLoggingHttpCompression'
      required:
        - headers
        - host
        - port
        - format
        - compression
      title: Container HTTP Logging Configuration
    ContainerLoggingHttpCompression:
      description: The compression algorithm to apply to logs before transmission
      type: string
      enum:
        - none
        - gzip
    ContainerLoggingHttpFormat:
      description: The format in which logs will be delivered
      type: string
      enum:
        - json
        - json_lines
    ContainerLoggingHttpHeader:
      description: Represents an HTTP header used for container logging configuration.
      type: object
      properties:
        name:
          description: The name of the HTTP header
          type: string
          maxLength: 1000
          minLength: 1
          pattern: ^.*$
        value:
          description: The value of the HTTP header
          type: string
          maxLength: 1000
          minLength: 1
          pattern: ^.*$
      required:
        - name
        - value
      title: Container Logging Http Header
    ContainerLoggingNewRelic:
      description: Configuration for sending container logs to New Relic's log management platform.
      type: object
      properties:
        host:
          description: 'The New Relic endpoint host for log ingestion (e.g., log-api.newrelic.com).'
          type: string
          maxLength: 1000
          minLength: 1
          pattern: ^.*$
        ingestion_key:
          description: The New Relic license or ingestion key used for authentication and data routing.
          type: string
          maxLength: 1000
          minLength: 1
          pattern: ^.*$
      required:
        - host
        - ingestion_key
      title: New Relic Logging Configuration
    ContainerLoggingSplunk:
      description: Configuration settings for forwarding container logs to a Splunk instance.
      type: object
      properties:
        host:
          description: The URL of the Splunk HTTP Event Collector (HEC) endpoint.
          type: string
          maxLength: 1000
          minLength: 1
          pattern: ^.*$
        token:
          description: The authentication token required to send data to the Splunk HEC endpoint.
          type: string
          maxLength: 1000
          minLength: 1
          pattern: ^.*$
      required:
        - host
        - token
      title: Container Logging Splunk Configuration
    ContainerLoggingTcp:
      description: Configuration for forwarding container logs to a remote TCP endpoint
      type: object
      properties:
        host:
          description: The hostname or IP address of the remote TCP logging endpoint
          type: string
          maxLength: 1000
          minLength: 1
          pattern: ^.*$
        port:
          description: The port number on which the TCP logging endpoint is listening
          type: integer
          format: int32
          maximum: 65535
          minimum: 1
      required:
        - host
        - port
      title: TCP Logging Configuration
    ContainerNetworkingProtocol:
      description: Defines the communication protocol used for network traffic between containers or external systems. Currently supports HTTP protocol for web-based communication.
      type: string
      enum:
        - http
      title: Container Networking Protocol
    ContainerProbeHttpScheme:
      description: The protocol scheme used for HTTP probe requests in container health checks.
      type:
        - string
        - 'null'
      enum:
        - http
        - https
      title: HTTP Scheme
    ContainerRegistryAuthentication:
      description: 'Authentication configuration for various container registry types, including AWS ECR, Docker Hub, GCP GAR, GCP GCR, and basic authentication.'
      type: object
      properties:
        aws_ecr:
          $ref: '#/components/schemas/ContainerRegistryAuthenticationAwsEcr'
        basic:
          $ref: '#/components/schemas/ContainerRegistryAuthenticationBasic'
        docker_hub:
          $ref: '#/components/schemas/ContainerRegistryAuthenticationDockerHub'
        gcp_gar:
          $ref: '#/components/schemas/ContainerRegistryAuthenticationGcpGar'
        gcp_gcr:
          $ref: '#/components/schemas/ContainerRegistryAuthenticationGcpGcr'
      title: Container Registry Authentication
    ContainerRegistryAuthenticationAwsEcr:
      description: Authentication details for AWS Elastic Container Registry (ECR)
      type:
        - object
        - 'null'
      properties:
        access_key_id:
          description: AWS access key ID used for ECR authentication
          type: string
          maxLength: 10000
          minLength: 1
          pattern: ^.*$
        secret_access_key:
          description: AWS secret access key used for ECR authentication
          type: string
          maxLength: 10000
          minLength: 1
          pattern: ^.*$
      required:
        - access_key_id
        - secret_access_key
    ContainerRegistryAuthenticationBasic:
      description: Basic username and password authentication for generic container registries
      type: object
      properties:
        username:
          description: Username for registry authentication
          type: string
          maxLength: 10000
          minLength: 1
          pattern: ^.*$
        password:
          description: Password for registry authentication
          type: string
          maxLength: 10000
          minLength: 1
          pattern: ^.*$
      required:
        - username
        - password
    ContainerRegistryAuthenticationDockerHub:
      description: Authentication details for Docker Hub registry
      type: object
      properties:
        username:
          description: Docker Hub username
          type: string
          maxLength: 10000
          minLength: 1
          pattern: ^.*$
        personal_access_token:
          description: Docker Hub personal access token (PAT)
          type: string
          maxLength: 10000
          minLength: 1
          pattern: ^.*$
      required:
        - username
        - personal_access_token
    ContainerRegistryAuthenticationGcpGar:
      description: Authentication details for Google Artifact Registry (GAR)
      type: object
      properties:
        service_key:
          description: GCP service account key in JSON format for GAR authentication
          type: string
          maxLength: 10000
          minLength: 1
      required:
        - service_key
    ContainerRegistryAuthenticationGcpGcr:
      description: Authentication details for Google Container Registry (GCR)
      type: object
      properties:
        service_key:
          description: GCP service account key in JSON format for GCR authentication
          type: string
          maxLength: 10000
          minLength: 1
      required:
        - service_key
    ContainerResourceRequirements:
      description: Specifies the resource requirements for a container.
      type: object
      properties:
        cpu:
          description: The number of CPU cores required by the container. Must be between 1 and 16.
          type: integer
          format: int32
          maximum: 16
          minimum: 1
        memory:
          description: The amount of memory (in MB) required by the container. Must be between 1024 MB and 61440 MB.
          type: integer
          format: int32
          maximum: 61440
          minimum: 1024
        gpu_classes:
          description: A list of GPU class UUIDs required by the container. Can be null if no GPU is required.
          type: array
          items:
            type: string
            format: uuid
          maxItems: 100
          minItems: 0
        storage_amount:
          description: The amount of storage (in bytes) required by the container. Must be between 1 GB (1073741824 bytes) and 50 GB (53687091200 bytes).
          type: integer
          format: int64
          maximum: 53687091200
          minimum: 1073741824
      required:
        - cpu
        - memory
        - gpu_classes
    ContainerRestartPolicy:
      description: Specifies the policy for restarting containers when they exit or fail.
      type: string
      enum:
        - always
        - on_failure
        - never
      title: Container Restart Policy
    CountryCode:
      description: ISO 3166-1 alpha-2 country codes
      type: string
      enum:
        - af
        - al
        - dz
        - as
        - ad
        - ao
        - ai
        - aq
        - ag
        - ar
        - am
        - aw
        - au
        - at
        - az
        - bs
        - bh
        - bd
        - bb
        - by
        - be
        - bz
        - bj
        - bm
        - bt
        - bo
        - bq
        - ba
        - bw
        - bv
        - br
        - io
        - bn
        - bg
        - bf
        - bi
        - cv
        - kh
        - cm
        - ca
        - ky
        - cf
        - td
        - cl
        - cn
        - cx
        - cc
        - co
        - km
        - cd
        - cg
        - ck
        - cr
        - hr
        - cu
        - cw
        - cy
        - cz
        - ci
        - dk
        - dj
        - dm
        - do
        - ec
        - eg
        - sv
        - gq
        - er
        - ee
        - sz
        - et
        - fk
        - fo
        - fj
        - fi
        - fr
        - gf
        - pf
        - tf
        - ga
        - gm
        - ge
        - de
        - gh
        - gi
        - gr
        - gl
        - gd
        - gp
        - gu
        - gt
        - gg
        - gn
        - gw
        - gy
        - ht
        - hm
        - va
        - hn
        - hk
        - hu
        - is
        - in
        - id
        - ir
        - iq
        - ie
        - im
        - il
        - it
        - jm
        - jp
        - je
        - jo
        - kz
        - ke
        - ki
        - kp
        - kr
        - kw
        - kg
        - la
        - lv
        - lb
        - ls
        - lr
        - ly
        - li
        - lt
        - lu
        - mo
        - mg
        - mw
        - my
        - mv
        - ml
        - mt
        - mh
        - mq
        - mr
        - mu
        - yt
        - mx
        - fm
        - md
        - mc
        - mn
        - me
        - ms
        - ma
        - mz
        - mm
        - na
        - nr
        - np
        - nl
        - nc
        - nz
        - ni
        - ne
        - ng
        - nu
        - nf
        - mp
        - 'no'
        - om
        - pk
        - pw
        - ps
        - pa
        - pg
        - py
        - pe
        - ph
        - pn
        - pl
        - pt
        - pr
        - qa
        - mk
        - ro
        - ru
        - rw
        - re
        - bl
        - sh
        - kn
        - lc
        - mf
        - pm
        - vc
        - ws
        - sm
        - st
        - sa
        - sn
        - rs
        - sc
        - sl
        - sg
        - sx
        - sk
        - si
        - sb
        - so
        - za
        - gs
        - ss
        - es
        - lk
        - sd
        - sr
        - sj
        - se
        - ch
        - sy
        - tw
        - tj
        - tz
        - th
        - tl
        - tg
        - tk
        - to
        - tt
        - tn
        - tr
        - tm
        - tc
        - tv
        - ug
        - ua
        - ae
        - gb
        - um
        - us
        - uy
        - uz
        - vu
        - ve
        - vn
        - vg
        - vi
        - wf
        - eh
        - ye
        - zm
        - zw
        - ax
      title: Country Code
    CreateContainer:
      description: 'Configuration for creating a container within a container group. Defines the container image, resource requirements, environment variables, and other settings needed to deploy and run the container.'
      type: object
      properties:
        command:
          description: Pass a command (and optional arguments) to override the ENTRYPOINT and CMD of a container image. Each element in the array represents a command segment or argument.
          type:
            - array
            - 'null'
          items:
            type: string
            minLength: 1
            maxLength: 1000
            pattern: ^.*$
          maxItems: 100
          minItems: 0
        environment_variables:
          description: Key-value pairs of environment variables to set within the container. These variables will be available to processes running inside the container.
          type: object
          additionalProperties:
            type: string
            minLength: 1
            maxLength: 1000
            pattern: ^.*$
        image:
          $ref: '#/components/schemas/ContainerImage'
        image_caching:
          $ref: '#/components/schemas/ContainerImageCaching'
        logging:
          $ref: '#/components/schemas/CreateContainerLogging'
        priority:
          $ref: '#/components/schemas/ContainerGroupPriority'
        registry_authentication:
          $ref: '#/components/schemas/ContainerRegistryAuthentication'
        resources:
          $ref: '#/components/schemas/CreateContainerResourceRequirements'
      required:
        - image
        - resources
      title: Container Configuration
    CreateContainerGroupNetworking:
      description: 'Network configuration for container groups specifying connectivity parameters, including authentication, protocol, and timeout settings'
      type: object
      properties:
        auth:
          description: Determines whether authentication is required for network connections to the container group
          type: boolean
        client_request_timeout:
          $ref: '#/components/schemas/ContainerGroupNetworkingClientRequestTimeout'
        load_balancer:
          $ref: '#/components/schemas/ContainerGroupNetworkingLoadBalancer'
        port:
          $ref: '#/components/schemas/ContainerGroupNetworkingPort'
        protocol:
          $ref: '#/components/schemas/ContainerNetworkingProtocol'
        server_response_timeout:
          $ref: '#/components/schemas/ContainerGroupNetworkingServerResponseTimeout'
        single_connection_limit:
          $ref: '#/components/schemas/ContainerGroupNetworkingSingleConnectionLimit'
      required:
        - auth
        - port
        - protocol
    CreateContainerLogging:
      description: 'Configuration options for directing container logs to a logging provider. This schema enables you to specify a single logging destination for container output, supporting monitoring, debugging, and analytics use cases. Each provider has its own configuration parameters defined in the referenced schemas. Only one logging provider can be selected at a time.'
      type: object
      properties:
        axiom:
          $ref: '#/components/schemas/ContainerLoggingAxiom'
        datadog:
          $ref: '#/components/schemas/ContainerLoggingDatadog'
        http:
          $ref: '#/components/schemas/CreateContainerLoggingHttp'
        new_relic:
          $ref: '#/components/schemas/ContainerLoggingNewRelic'
        splunk:
          $ref: '#/components/schemas/ContainerLoggingSplunk'
        tcp:
          $ref: '#/components/schemas/ContainerLoggingTcp'
      title: Container Logging Configuration
    CreateContainerLoggingHttp:
      description: 'Configuration for sending container logs to an HTTP endpoint. Defines how logs are formatted, compressed, and transmitted.'
      type: object
      properties:
        host:
          description: The hostname or IP address of the HTTP logging endpoint
          type: string
          maxLength: 1000
          minLength: 1
          pattern: ^.*$
        port:
          description: The port number of the HTTP logging endpoint (1-65535)
          type: integer
          format: int32
          maximum: 65535
          minimum: 1
        user:
          description: Optional username for HTTP authentication
          type:
            - string
            - 'null'
          maxLength: 1000
          minLength: 1
          pattern: ^.*$
        password:
          description: Optional password for HTTP authentication
          type:
            - string
            - 'null'
          maxLength: 1000
          minLength: 1
          pattern: ^.*$
        path:
          description: Optional URL path for the HTTP endpoint
          type:
            - string
            - 'null'
          maxLength: 1000
          minLength: 1
          pattern: ^.*$
        format:
          $ref: '#/components/schemas/ContainerLoggingHttpFormat'
        headers:
          description: Optional HTTP headers to include in log transmission requests
          type: array
          items:
            $ref: '#/components/schemas/ContainerLoggingHttpHeader'
          maxItems: 1000
          minItems: 0
        compression:
          $ref: '#/components/schemas/ContainerLoggingHttpCompression'
      required:
        - host
        - port
        - format
        - compression
      title: Container HTTP Logging Configuration
    CreateContainerResourceRequirements:
      description: Specifies the resource requirements for creating a container.
      type: object
      properties:
        cpu:
          description: The number of CPU cores required by the container. Must be between 1 and 16.
          type: integer
          format: int32
          maximum: 16
          minimum: 1
        memory:
          description: The amount of memory (in MB) required by the container. Must be between 1024 MB and 61440 MB.
          type: integer
          format: int32
          maximum: 61440
          minimum: 1024
        gpu_classes:
          description: A list of GPU class UUIDs required by the container. Can be null if no GPU is required.
          type: array
          items:
            type: string
            format: uuid
          maxItems: 100
          minItems: 0
        storage_amount:
          description: The amount of storage (in bytes) required by the container. Must be between 1 GB (1073741824 bytes) and 50 GB (53687091200 bytes).
          type: integer
          format: int64
          maximum: 53687091200
          minimum: 1073741824
      required:
        - cpu
        - memory
    Description:
      description: The detailed description of the resource.
      type: string
      examples:
        - ''
      maxLength: 1000
      minLength: 0
      pattern: ^.*$
    DisplayName:
      description: The display-friendly name of the resource.
      type: string
      examples:
        - Name
      maxLength: 63
      minLength: 2
      pattern: '^[ ,-.0-9A-Za-z]+$'
    GpuClass:
      description: Represents a GPU Class
      type: object
      properties:
        id:
          description: The unique identifier
          type: string
          format: uuid
        name:
          description: The GPU class name
          type: string
          maxLength: 63
          minLength: 2
          pattern: '^[ -~]{2,63}$'
        prices:
          description: The list of prices for each container group priority
          type: array
          items:
            $ref: '#/components/schemas/GpuClassPrice'
          maxItems: 100
          minItems: 1
        is_high_demand:
          description: Whether the GPU class is in high demand
          type: boolean
      required:
        - id
        - name
        - prices
    GpuClassPrice:
      description: Represents the price of a GPU class for a given container group priority
      type: object
      properties:
        priority:
          $ref: '#/components/schemas/ContainerGroupPriority'
        price:
          description: The price
          type: string
          maxLength: 20
          minLength: 1
          pattern: ^.*$
      required:
        - priority
        - price
    GpuClassesList:
      description: Represents a list of GPU classes
      type: object
      properties:
        items:
          description: The list of GPU classes
          type: array
          items:
            $ref: '#/components/schemas/GpuClass'
          maxItems: 100
          minItems: 0
      required:
        - items
    InferenceEndpoint:
      description: Represents an inference endpoint
      type: object
      properties:
        id:
          $ref: '#/components/schemas/InferenceEndpointId'
        name:
          $ref: '#/components/schemas/InferenceEndpointName'
        organization_name:
          $ref: '#/components/schemas/OrganizationName'
        display_name:
          $ref: '#/components/schemas/DisplayName'
        description:
          $ref: '#/components/schemas/Description'
        readme:
          description: A markdown file containing a detailed description of the inference endpoint
          type: string
          maxLength: 100000
          minLength: 1
          pattern: ^.*$
        price_description:
          description: A description of the price
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^.*$
        icon_url:
          description: The URL of the icon image
          type: string
          format: url
          maxLength: 2048
          minLength: 1
          pattern: ^.*$
        input_schema:
          description: The input schema
          type: string
          maxLength: 100000
          minLength: 1
          pattern: ^.*$
        output_schema:
          description: The output schema
          type: string
          maxLength: 100000
          minLength: 1
          pattern: ^.*$
      required:
        - description
        - display_name
        - icon_url
        - id
        - input_schema
        - name
        - organization_name
        - output_schema
        - price_description
        - readme
    InferenceEndpointCollection:
      description: Represents a page from the collection of inference endpoints.
      type: object
      properties:
        items:
          description: The list of inference endpoints.
          type: array
          items:
            $ref: '#/components/schemas/InferenceEndpoint'
          maxItems: 100
          minItems: 0
        page:
          $ref: '#/components/schemas/Page'
        page_size:
          $ref: '#/components/schemas/PageSize'
        total_size:
          $ref: '#/components/schemas/TotalSize'
      required:
        - items
        - page
        - page_size
        - total_size
    InferenceEndpointId:
      description: The inference endpoint identifier.
      type: string
      format: uuid
      examples:
        - cb3a4591-efc3-46c0-b06a-3d820c0ec100
      title: Inference Endpoint ID
    InferenceEndpointJob:
      description: Represents a inference endpoint job
      type: object
      properties:
        id:
          $ref: '#/components/schemas/InferenceEndpointJobId'
        inference_endpoint_name:
          $ref: '#/components/schemas/InferenceEndpointName'
        organization_name:
          $ref: '#/components/schemas/OrganizationName'
        input:
          $ref: '#/components/schemas/InferenceEndpointJobInput'
        metadata:
          $ref: '#/components/schemas/InferenceEndpointJobMetadata'
        webhook:
          description: The webhook URL called when the job completes.
          type: string
          format: url
          deprecated: true
          maxLength: 2048
          minLength: 1
          title: Webhook
        webhook_url:
          description: The webhook URL called when the job completes.
          type: string
          format: url
          maxLength: 2048
          minLength: 1
          title: Webhook
        status:
          $ref: '#/components/schemas/InferenceEndpointJobStatus'
        events:
          description: The list of events.
          type: array
          items:
            $ref: '#/components/schemas/InferenceEndpointJobEvent'
          maxItems: 1000
          minItems: 0
          title: Events
        output:
          $ref: '#/components/schemas/InferenceEndpointJobOutput'
        create_time:
          description: The time the job was created.
          type: string
          format: date-time
          title: Create Time
        update_time:
          description: The time the job was last updated.
          type: string
          format: date-time
          title: Update Time
      required:
        - create_time
        - events
        - id
        - inference_endpoint_name
        - input
        - organization_name
        - status
        - update_time
    InferenceEndpointJobCollection:
      description: Represents a collection of inference endpoint jobs
      type: object
      properties:
        items:
          description: The list of inference endpoint jobs.
          type: array
          items:
            $ref: '#/components/schemas/InferenceEndpointJob'
          maxItems: 100
          minItems: 0
        page:
          $ref: '#/components/schemas/Page'
        page_size:
          $ref: '#/components/schemas/PageSize'
        total_size:
          $ref: '#/components/schemas/TotalSize'
      required:
        - items
        - page
        - page_size
        - total_size
    InferenceEndpointJobEvent:
      description: Represents an event for inference endpoint job
      type: object
      properties:
        action:
          $ref: '#/components/schemas/InferenceEndpointJobEventAction'
        time:
          description: The time the event occurred.
          type: string
          format: date-time
      required:
        - action
        - time
    InferenceEndpointJobEventAction:
      description: The action that was taken on the inference endpoint job.
      type: string
      enum:
        - created
        - started
        - succeeded
        - cancelled
        - failed
    InferenceEndpointJobId:
      description: The inference endpoint job identifier.
      type: string
      format: uuid
      examples:
        - 2fc459a1-1c09-4a34-ade7-54d03fc51d6a
      title: Inference Endpoint Job ID
    InferenceEndpointJobInput:
      description: The job input. May be any valid JSON.
      title: Input
    InferenceEndpointJobMetadata:
      description: The job metadata. May be any valid JSON.
      type: object
      maxProperties: 20
      title: Metadata
    InferenceEndpointJobOutput:
      description: The job output. May be any valid JSON.
      title: Output
    InferenceEndpointJobPrototype:
      description: Represents a request to create a inference endpoint job
      type: object
      properties:
        input:
          $ref: '#/components/schemas/InferenceEndpointJobInput'
        metadata:
          $ref: '#/components/schemas/InferenceEndpointJobMetadata'
        webhook:
          description: The webhook URL to which the job results will be POSTed.
          type: string
          format: url
          deprecated: true
          maxLength: 2048
          minLength: 1
        webhook_url:
          description: The webhook URL to which the job results will be POSTed.
          type: string
          format: url
          examples:
            - 'https://webhook.example.com/events'
          maxLength: 2048
          minLength: 1
      required:
        - input
    InferenceEndpointJobStatus:
      description: The current status.
      type: string
      enum:
        - pending
        - running
        - succeeded
        - cancelled
        - failed
      title: Status
    InferenceEndpointName:
      description: The inference endpoint name.
      type: string
      examples:
        - transcribe
      maxLength: 63
      minLength: 2
      pattern: '^[a-z][a-z0-9-]{0,61}[a-z0-9]$'
      title: Inference Endpoint Name
    OrganizationName:
      description: The organization name.
      type: string
      examples:
        - acme-corp
      maxLength: 63
      minLength: 2
      pattern: '^[a-z][a-z0-9-]{0,61}[a-z0-9]$'
      title: Organization Name
    Page:
      description: The page number.
      type: integer
      format: int32
      examples:
        - 1
      maximum: 2147483647
      minimum: 1
    PageSize:
      description: The maximum number of items per page.
      type: integer
      format: int32
      examples:
        - 1
      maximum: 100
      minimum: 1
    ProblemDetails:
      description: Represents an API error
      type: object
      properties:
        type:
          description: The URI reference that identifies the error type.
          type: string
          format: url
          default: 'about:blank'
          examples:
            - 'https://example.com/errors/invalid-request'
          maxLength: 2048
          minLength: 1
        title:
          description: 'The short, human-readable summary of the error type.'
          type: string
          examples:
            - Not Found
          maxLength: 2000
          minLength: 1
        status:
          description: The HTTP status code generated by the origin server for this occurrence of the error.
          type: integer
          format: int32
          examples:
            - 404
          maximum: 599
          minimum: 100
        detail:
          description: The human-readable explanation specific to this occurrence of the error.
          type: string
          examples:
            - The container group could not be found.
          maxLength: 2000
          minLength: 1
        instance:
          description: The URI reference that identifies the specific occurrence of the error.
          type: string
          format: url
          examples:
            - 'https://example.com/error-instances/12345'
          maxLength: 2048
          minLength: 1
    ProjectName:
      description: The project name.
      type: string
      examples:
        - dev-env
      maxLength: 63
      minLength: 2
      pattern: '^[a-z][a-z0-9-]{0,61}[a-z0-9]$'
    Queue:
      description: Represents a queue.
      type: object
      properties:
        id:
          description: The queue identifier. This is automatically generated and assigned when the queue is created.
          type: string
          format: uuid
        name:
          description: The queue name. This must be unique within the project.
          type: string
          maxLength: 63
          minLength: 2
          pattern: '^[a-z][a-z0-9-]{0,61}[a-z0-9]$'
        display_name:
          description: The display name. This may be used as a more human-readable name.
          type: string
          maxLength: 63
          minLength: 2
          pattern: '^[ ,-.0-9A-Za-z]+$'
        description:
          description: The description. This may be used as a space for notes or other information about the queue.
          type: string
          maxLength: 500
          minLength: 0
          pattern: ^.*$
        container_groups:
          description: The container groups that are part of this queue. Each container group represents a scalable set of identical containers running as a distributed service.
          type: array
          items:
            $ref: '#/components/schemas/ContainerGroup'
          maxItems: 100
          minItems: 0
        create_time:
          description: The date and time the queue was created.
          type: string
          format: date-time
        update_time:
          description: The date and time the queue was last updated.
          type: string
          format: date-time
      required:
        - id
        - name
        - display_name
        - container_groups
        - create_time
        - update_time
    QueueCollection:
      description: Represents a Queue Collection
      type: object
      properties:
        items:
          description: The list of queues.
          type: array
          items:
            $ref: '#/components/schemas/Queue'
          maxItems: 100
          minItems: 0
      required:
        - items
    QueueJob:
      description: Represents a queue job
      type: object
      properties:
        id:
          description: The job identifier
          type: string
          format: uuid
        input:
          $ref: '#/components/schemas/QueueJobInput'
        metadata:
          $ref: '#/components/schemas/QueueJobMetadata'
        webhook:
          description: The webhook URL to notify when the job completes
          type: string
          format: url
          maxLength: 27
          minLength: 20
          pattern: '^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[+-]\\d{2}:\\d{2})$'
        status:
          description: The job status
          type: string
          enum:
            - pending
            - running
            - succeeded
            - cancelled
            - failed
        events:
          description: The job events
          type: array
          items:
            $ref: '#/components/schemas/QueueJobEvent'
          maxItems: 1000
          minItems: 0
        output:
          $ref: '#/components/schemas/QueueJobOutput'
        create_time:
          description: The job creation time
          type: string
          format: date-time
        update_time:
          description: The job update time
          type: string
          format: date-time
      required:
        - id
        - input
        - status
        - events
        - create_time
        - update_time
    QueueJobCollection:
      description: Represents a Queue Job Collection
      type: object
      properties:
        items:
          description: The list of queue jobs
          type: array
          items:
            $ref: '#/components/schemas/QueueJob'
          maxItems: 100
          minItems: 0
      required:
        - items
    QueueJobEvent:
      description: Represents an event for queue job
      type: object
      properties:
        action:
          description: The action that was taken on the queue job
          type: string
          enum:
            - created
            - started
            - succeeded
            - cancelled
            - failed
        time:
          description: The time the action was taken on the queue job
          type: string
          format: date-time
      required:
        - action
        - time
    QueueJobInput:
      description: The job input. May be any valid JSON.
    QueueJobMetadata:
      description: Additional metadata for the job
      type: object
      maxProperties: 20
    QueueJobOutput:
      description: The job output. May be any valid JSON.
    QueueJobPrototype:
      description: Represents a request to create a queue job
      type: object
      properties:
        input:
          $ref: '#/components/schemas/QueueJobInput'
        metadata:
          $ref: '#/components/schemas/QueueJobMetadata'
        webhook:
          description: The webhook to call when the job completes
          type: string
          format: url
          maxLength: 2048
          minLength: 1
          pattern: ^.*$
      required:
        - input
    QueuePatch:
      description: Represents a request to update an existing queue.
      type: object
      properties:
        display_name:
          description: The display name. This may be used as a more human-readable name.
          type:
            - string
            - 'null'
          maxLength: 63
          minLength: 2
          pattern: '^[ ,-.0-9A-Za-z]+$'
        description:
          description: The description. This may be used as a space for notes or other information about the queue.
          type:
            - string
            - 'null'
          maxLength: 500
          minLength: 0
          pattern: ^.*$
    QueuePrototype:
      description: Represents a request to create a new queue.
      type: object
      properties:
        name:
          description: The queue name. This must be unique within the project.
          type: string
          maxLength: 63
          minLength: 2
          pattern: '^[a-z][a-z0-9-]{0,61}[a-z0-9]$'
        display_name:
          description: The display name. This may be used as a more human-readable name.
          type: string
          maxLength: 63
          minLength: 2
          pattern: '^[ ,-.0-9A-Za-z]+$'
        description:
          description: The description. This may be used as a space for notes or other information about the queue.
          type: string
          maxLength: 500
          minLength: 0
          pattern: ^.*$
      required:
        - name
    Quotas:
      description: Represents the organization quotas
      type: object
      properties:
        container_groups_quotas:
          $ref: '#/components/schemas/ContainerGroupsQuotas'
        create_time:
          description: The time the resource was created
          type: string
          format: date-time
        update_time:
          description: The time the resource was last updated
          type: string
          format: date-time
      required:
        - container_groups_quotas
    SystemLog:
      description: Represents a system log
      type: object
      properties:
        event_name:
          description: The name of the event
          type: string
          maxLength: 255
          minLength: 1
          pattern: ^.*$
        event_time:
          description: The UTC date & time when the log item was created
          type: string
          format: date-time
        instance_id:
          $ref: '#/components/schemas/ContainerGroupInstanceId'
        machine_id:
          $ref: '#/components/schemas/ContainerGroupMachineId'
        resource_cpu:
          description: The number of CPUs
          type:
            - integer
            - 'null'
          maximum: 16
          minimum: 1
        resource_gpu_class:
          description: The GPU class name
          type: string
        resource_memory:
          description: The memory amount in MB
          type:
            - integer
            - 'null'
          maximum: 61440
          minimum: 1024
        resource_storage_amount:
          description: The storage amount in bytes
          type:
            - integer
            - 'null'
          format: int64
          maximum: 53687091200
          minimum: 1073741824
        version:
          description: The version instance ID
          type: string
      required:
        - event_name
        - event_time
        - resource_cpu
        - resource_gpu_class
        - resource_memory
        - resource_storage_amount
        - version
    SystemLogList:
      description: Represents a list of system logs
      type: object
      properties:
        items:
          description: A list of system logs
          type: array
          items:
            $ref: '#/components/schemas/SystemLog'
          maxItems: 50
          minItems: 0
      required:
        - items
    TotalSize:
      description: The total number of items in the collection.
      type: integer
      format: int32
      examples:
        - 100
      maximum: 2147483647
      minimum: 0
    UpdateContainer:
      description: Represents an update container object
      type:
        - object
        - 'null'
      properties:
        command:
          description: Pass a command (and optional arguments) to override the ENTRYPOINT and CMD of a container image.
          type:
            - array
            - 'null'
          items:
            type: string
            pattern: ^.*$
            minLength: 1
            maxLength: 1024
          maxItems: 100
          minItems: 0
        environment_variables:
          description: Environment variables to set in the container.
          type: object
          additionalProperties:
            type: string
            minLength: 1
            maxLength: 1000
            pattern: ^.*$
        image:
          description: The container image to use.
          type:
            - string
            - 'null'
          maxLength: 1024
          minLength: 1
          pattern: ^.*$
        image_caching:
          $ref: '#/components/schemas/ContainerImageCaching'
        logging:
          $ref: '#/components/schemas/UpdateContainerLogging'
        priority:
          $ref: '#/components/schemas/ContainerGroupPriority'
        registry_authentication:
          $ref: '#/components/schemas/ContainerRegistryAuthentication'
        resources:
          $ref: '#/components/schemas/UpdateContainerResources'
    UpdateContainerGroupNetworking:
      description: Represents update container group networking parameters
      type: object
      properties:
        port:
          description: The port number to expose on the container group
          type:
            - integer
            - 'null'
          maximum: 65535
          minimum: 1
    UpdateContainerLogging:
      description: 'Configuration options for directing container logs to a logging provider. This schema enables you to specify a single logging destination for container output, supporting monitoring, debugging, and analytics use cases. Each provider has its own configuration parameters defined in the referenced schemas. Only one logging provider can be selected at a time.'
      type:
        - object
        - 'null'
      properties:
        axiom:
          $ref: '#/components/schemas/ContainerLoggingAxiom'
        datadog:
          $ref: '#/components/schemas/ContainerLoggingDatadog'
        http:
          $ref: '#/components/schemas/ContainerLoggingHttp'
        new_relic:
          $ref: '#/components/schemas/ContainerLoggingNewRelic'
        splunk:
          $ref: '#/components/schemas/ContainerLoggingSplunk'
        tcp:
          $ref: '#/components/schemas/ContainerLoggingTcp'
      title: Container Logging Configuration
    UpdateContainerResources:
      description: 'Defines the resource specifications that can be modified for a container group, including CPU, memory, GPU classes, and storage allocations.'
      type:
        - object
        - 'null'
      properties:
        cpu:
          description: The number of CPU cores to allocate to the container (between 1 and 16 cores).
          type:
            - integer
            - 'null'
          maximum: 16
          minimum: 1
        memory:
          description: The amount of memory to allocate to the container in megabytes (between 1024MB and 61440MB).
          type:
            - integer
            - 'null'
          maximum: 61440
          minimum: 1024
        gpu_classes:
          description: 'List of GPU class identifiers that the container can use, specified as UUIDs.'
          type:
            - array
            - 'null'
          items:
            type: string
            format: uuid
          maxItems: 100
          minItems: 0
        storage_amount:
          description: The amount of storage to allocate to the container in bytes (between 1GB and 50GB).
          type:
            - integer
            - 'null'
          format: int64
          maximum: 53687091200
          minimum: 1073741824
      title: Container Resource Update Schema
    WebhookSecretKey:
      description: Represents a webhook secret key
      type: object
      properties:
        secret_key:
          description: The webhook secret key
          type: string
          maxLength: 172
          minLength: 44
          pattern: '^[+/=0-9A-Za-z]{44,172}$'
      required:
        - secret_key
    WorkloadError:
      description: Represents a workload error
      type: object
      properties:
        allocated_at:
          description: The timestamp when the workload was initially allocated to a machine
          type: string
          format: date-time
        detail:
          description: A detailed error message describing the nature and cause of the workload failure
          type: string
          maxLength: 255
          minLength: 1
          pattern: ^.*$
        failed_at:
          description: The timestamp when the workload failure was detected or reported
          type: string
          format: date-time
        instance_id:
          $ref: '#/components/schemas/ContainerGroupInstanceId'
        machine_id:
          $ref: '#/components/schemas/ContainerGroupMachineId'
        started_at:
          description: 'The timestamp when the workload started execution, or null if it failed before starting'
          type: string
          format: date-time
        version:
          description: 'The schema version number for this error record, used for tracking error format changes'
          type: integer
          format: int32
          maximum: 2147483647
          minimum: 1
      deprecated: true
      required:
        - allocated_at
        - detail
        - failed_at
        - instance_id
        - machine_id
        - version
    WorkloadErrorList:
      description: Represents a list of workload errors
      type: object
      properties:
        items:
          description: A list of workload errors
          type: array
          items:
            $ref: '#/components/schemas/WorkloadError'
          maxItems: 50
          minItems: 0
      deprecated: true
      required:
        - items
  requestBodies:
    CreateContainerGroup:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerGroupPrototype'
    CreateInferenceEndpointJob:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InferenceEndpointJobPrototype'
    CreateQueue:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QueuePrototype'
    CreateQueueJob:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QueueJobPrototype'
    UpdateContainerGroup:
      required: true
      content:
        application/merge-patch+json:
          schema:
            $ref: '#/components/schemas/ContainerGroupPatch'
    UpdateContainerGroupInstance:
      required: true
      content:
        application/merge-patch+json:
          schema:
            $ref: '#/components/schemas/ContainerGroupInstancePatch'
    UpdateQueue:
      required: true
      content:
        application/merge-patch+json:
          schema:
            $ref: '#/components/schemas/QueuePatch'
  responses:
    '202':
      description: Accepted
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    '429':
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    CreateContainerGroup:
      description: Created
      headers:
        Location:
          schema:
            type: string
            examples:
              - /organizations/acme-corp/projects/anvil-drop-simulator/containers/sim1
            maxLength: 2048
            minLength: 1
            pattern: ^.*$
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerGroup'
      links:
        get_container_group_by_name:
          operationId: get_container_group
          parameters:
            container_group_name: $response.body#/name
    CreateInferenceEndpointJob:
      description: Created
      headers:
        Location:
          description: The URL of the new inference endpoint job.
          required: true
          schema:
            type: string
            examples:
              - 'https://api.salad.com/api/public/organizations/acme-corp/inference-endpoints/transcribe/jobs/2fc459a1-1c09-4a34-ade7-54d03fc51d6a'
            maxLength: 2048
            minLength: 1
            pattern: '^(https?:\/\/)[a-zA-Z0-9.-]+(\.[a-zA-Z]{2,})(:[0-9]{1,5})?(\/[^\s]*)?$'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InferenceEndpointJob'
    CreateQueue:
      description: Created
      headers:
        Location:
          schema:
            type: string
            examples:
              - /organizations/acme-corp/projects/anvil-drop-simulator/queues/queue-1
            maxLength: 255
            minLength: 1
            pattern: ^.*$
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Queue'
      links:
        get_queue_by_name:
          operationId: get_queue
          parameters:
            queue_name: $response.body#/name
    CreateQueueJob:
      description: Created
      headers:
        Location:
          schema:
            type: string
            examples:
              - /organizations/acme-corp/projects/anvil-drop-simulator/queues/queue-1/jobs/job-1
            maxLength: 255
            minLength: 1
            pattern: ^.*$
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QueueJob'
      links:
        get_queue_job_by_name:
          operationId: get_queue_job
          parameters:
            queue_job_id: $response.body#/id
    DeleteContainerGroup:
      description: Accepted
    DeleteQueue:
      description: Accepted
    DeleteQueueJob:
      description: Accepted
    GetContainerGroup:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerGroup'
    GetContainerGroupInstance:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerGroupInstance'
    GetInferenceEndpoint:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InferenceEndpoint'
    GetInferenceEndpointJob:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InferenceEndpointJob'
    GetQueue:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Queue'
    GetQueueJob:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QueueJob'
    GetQuotas:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Quotas'
    ListContainerGroupInstances:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerGroupInstanceCollection'
    ListContainerGroups:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerGroupCollection'
    ListGpuClasses:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GpuClassesList'
    ListInferenceEndpointJobs:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InferenceEndpointJobCollection'
    ListInferenceEndpoints:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InferenceEndpointCollection'
    ListQueueJobs:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QueueJobCollection'
    ListQueues:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QueueCollection'
    ListSystemLogs:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SystemLogList'
    ListWorkloadErrors:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WorkloadErrorList'
    ReallocateContainerGroupInstance:
      description: Accepted
    RecreateContainerGroupInstance:
      description: Accepted
    RestartContainerGroupInstance:
      description: Accepted
    StartContainerGroup:
      description: Accepted
    StopContainerGroup:
      description: Accepted
    UnknownError:
      description: Unknown Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    UpdateContainerGroup:
      description: OK
      content:
        application/merge-patch+json:
          schema:
            $ref: '#/components/schemas/ContainerGroup'
    UpdateContainerGroupInstance:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContainerGroupInstance'
    UpdateQueue:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Queue'
    WebhookSecretKey:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookSecretKey'
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Salad-Api-Key
tags:
  - name: container_groups
    description: Container Groups
  - name: inference_endpoints
    description: Inference Endpoints
  - name: organization_data
    description: Auxiliary organization data and info
  - name: queues
    description: Job Queues
  - name: quotas
    description: quotas
  - name: workload_errors
    description: Workload Errors
  - name: system_logs
    description: System Logs
  - name: webhook_secret_key
    description: Webhook Secret Key
security:
  - ApiKeyAuth: []
