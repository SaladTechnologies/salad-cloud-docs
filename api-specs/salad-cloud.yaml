openapi: 3.1.0
info:
  title: SaladCloud API
  description: The SaladCloud REST API. Please refer to the [SaladCloud API
    Documentation](https://docs.salad.com/api-reference) for more details.
  termsOfService: https://salad.com/terms
  contact:
    name: SaladCloud Support
    url: https://salad.com
    email: cloud@salad.com
  license:
    name: MIT License
    identifier: MIT
  version: 0.9.0-alpha.6
servers:
  - url: https://api.salad.com/api/public
paths:
  /organizations/{organization_name}/projects/{project_name}/containers:
    summary: Container Groups
    description: Operations for container groups
    parameters:
      - $ref: "#/components/parameters/organization_name"
      - $ref: "#/components/parameters/project_name"
    get:
      operationId: list_container_groups
      summary: List Container Groups
      description: Gets the list of container groups
      responses:
        "200":
          $ref: "#/components/responses/ListContainerGroups"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - container_groups
      x-codeSamples:
        - source: >-
            using Salad.Cloud.SDK;

            using Salad.Cloud.SDK.Config;

            using Environment = Salad.Cloud.SDK.Http.Environment;


            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };


            var client = new SaladCloudSdkClient(config);


            var response = await
            client.ContainerGroups.ListContainerGroupsAsync("acme-corp",
            "dev-env");


            Console.WriteLine(response);
          lang: C#
        - source: >-
            import { SaladCloudSdk } from
            '@saladtechnologies-oss/salad-cloud-sdk';


            (async () => {
              const saladCloudSdk = new SaladCloudSdk({
                apiKey: 'YOUR_API_KEY',
              });

              const { data } = await saladCloudSdk.containerGroups.listContainerGroups('acme-corp', 'dev-env');

              console.log(data);
            })();
          lang: TypeScript
        - source: |-
            from salad_cloud_sdk import SaladCloudSdk

            sdk = SaladCloudSdk(
                api_key="YOUR_API_KEY",
                api_key_header="YOUR_API_KEY_HEADER",
                timeout=10000
            )

            result = sdk.container_groups.list_container_groups(
                organization_name="acme-corp",
                project_name="dev-env"
            )

            print(result)
          lang: Python
        - source: >-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
            )


            config := saladcloudsdkconfig.NewConfig()

            client := saladcloudsdk.NewSaladCloudSdk(config)


            response, err :=
            client.ContainerGroups.ListContainerGroups(context.Background(),
            "organizationName", "projectName")

            if err != nil {
              panic(err)
            }


            fmt.Println(response)
          lang: Go
        - source: >-
            import com.salad.cloud.sdk.SaladCloudSdk;

            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;

            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;

            import com.salad.cloud.sdk.models.ContainerGroupList;


            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                ContainerGroupList response = saladCloudSdk.containerGroups.listContainerGroups("acme-corp", "dev-env");

                System.out.println(response);
              }
            }
          lang: Java
    post:
      operationId: create_container_group
      summary: Create Container Group
      description: Creates a new container group
      requestBody:
        $ref: "#/components/requestBodies/CreateContainerGroup"
      responses:
        "201":
          $ref: "#/components/responses/CreateContainerGroup"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - container_groups
      x-liblab-resource: ContainerGroup#Create
      x-codeSamples:
        - source: >-
            using Salad.Cloud.SDK;

            using Salad.Cloud.SDK.Config;

            using Salad.Cloud.SDK.Models;

            using Environment = Salad.Cloud.SDK.Http.Environment;


            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };


            var client = new SaladCloudSdkClient(config);


            var gpuClasses = new List<string>() { "gpu_classes" };

            var resources = new ContainerResourceRequirements(13, 8139,
            gpuClasses, 43769579402);

            var command = new List<string>() { "command" };

            var axiom = new LoggingAxiom2("host", "api_token", "dataset");

            var tagsItem = new DatadogTags2("name", "value");

            var tags = new List<DatadogTags2>() { tagsItem };

            var datadog = new LoggingDatadog2("host", "api_key", tags);

            var newRelic = new LoggingNewRelic2("host", "ingestion_key");

            var splunk = new LoggingSplunk2("host", "token");

            var tcp = new LoggingTcp2("host", 24951);

            var headersItem = new HttpHeaders3("name", "value");

            var headers = new List<HttpHeaders3>() { headersItem };

            var http = new LoggingHttp2("host", 36565, HttpFormat2.Json,
            HttpCompression2.None, "user", "password", "path", headers);

            var logging = new CreateContainerLogging(axiom, datadog, newRelic,
            splunk, tcp, http);

            var basic = new RegistryAuthenticationBasic1("username",
            "password");

            var gcpGcr = new RegistryAuthenticationGcpGcr1("service_key");

            var awsEcr = new RegistryAuthenticationAwsEcr1("access_key_id",
            "secret_access_key");

            var dockerHub = new RegistryAuthenticationDockerHub1("username",
            "personal_access_token");

            var gcpGar = new RegistryAuthenticationGcpGar1("service_key");

            var registryAuthentication = new
            CreateContainerRegistryAuthentication(basic, gcpGcr, awsEcr,
            dockerHub, gcpGar);

            var container = new CreateContainer("image", resources, command,
            ContainerGroupPriority.High, new object(), logging,
            registryAuthentication);

            var countryCodes = new List<CountryCode>() { CountryCode.Af };

            var networking = new
            CreateContainerGroupNetworking(ContainerNetworkingProtocol.Http,
            22764, false, CreateContainerGroupNetworkingLoadBalancer.RoundRobin,
            false, 100000, 100000);

            var tcp = new ContainerGroupProbeTcp(22350);

            var headersItem = new ContainerGroupProbeHttpHeaders2("name",
            "value");

            var headers = new List<ContainerGroupProbeHttpHeaders2>() {
            headersItem };

            var http = new ContainerGroupProbeHttp("path", 56884,
            ContainerProbeHttpScheme.Http, headers);

            var grpc = new ContainerGroupProbeGrpc("service", 47172);

            var command = new List<string>() { "command" };

            var exec = new ContainerGroupProbeExec(command);

            var livenessProbe = new ContainerGroupLivenessProbe(0, 10, 30, 1, 3,
            tcp, http, grpc, exec);

            var tcp = new ContainerGroupProbeTcp(22350);

            var headersItem = new ContainerGroupProbeHttpHeaders2("name",
            "value");

            var headers = new List<ContainerGroupProbeHttpHeaders2>() {
            headersItem };

            var http = new ContainerGroupProbeHttp("path", 56884,
            ContainerProbeHttpScheme.Http, headers);

            var grpc = new ContainerGroupProbeGrpc("service", 47172);

            var command = new List<string>() { "command" };

            var exec = new ContainerGroupProbeExec(command);

            var readinessProbe = new ContainerGroupReadinessProbe(0, 1, 1, 1, 3,
            tcp, http, grpc, exec);

            var tcp = new ContainerGroupProbeTcp(22350);

            var headersItem = new ContainerGroupProbeHttpHeaders2("name",
            "value");

            var headers = new List<ContainerGroupProbeHttpHeaders2>() {
            headersItem };

            var http = new ContainerGroupProbeHttp("path", 56884,
            ContainerProbeHttpScheme.Http, headers);

            var grpc = new ContainerGroupProbeGrpc("service", 47172);

            var command = new List<string>() { "command" };

            var exec = new ContainerGroupProbeExec(command);

            var startupProbe = new ContainerGroupStartupProbe(9, 3, 10, 2, 1200,
            tcp, http, grpc, exec);

            var queueConnection = new ContainerGroupQueueConnection("path",
            34605, "gv8rketqh");

            var queueAutoscaler = new QueueAutoscaler(26, 28, 42, 442, 3, 69);

            var input = new CreateContainerGroup("name", container, false,
            ContainerRestartPolicy.Always, 231, "VSVi1YCcw", countryCodes,
            networking, livenessProbe, readinessProbe, startupProbe,
            queueConnection, queueAutoscaler);


            var response = await
            client.ContainerGroups.CreateContainerGroupAsync(input, "acme-corp",
            "dev-env");


            Console.WriteLine(response);
          lang: C#
        - source: >-
            import {
              ContainerGroupLivenessProbe,
              ContainerGroupQueueConnection,
              ContainerGroupReadinessProbe,
              ContainerGroupStartupProbe,
              ContainerRestartPolicy,
              CountryCode,
              CreateContainer,
              CreateContainerGroup,
              CreateContainerGroupNetworking,
              QueueAutoscaler,
              SaladCloudSdk,
            } from '@saladtechnologies-oss/salad-cloud-sdk';


            (async () => {
              const saladCloudSdk = new SaladCloudSdk({
                apiKey: 'YOUR_API_KEY',
              });

              const containerResourceRequirements: ContainerResourceRequirements = {
                cpu: 3,
                memory: 16094,
                gpuClasses: ['gpu_classes'],
                storageAmount: 50473301867,
              };

              const containerGroupPriority = ContainerGroupPriority.HIGH;

              const loggingAxiom2: LoggingAxiom2 = {
                host: 'host',
                apiToken: 'api_token',
                dataset: 'dataset',
              };

              const datadogTags2: DatadogTags2 = {
                name: 'name',
                value: 'value',
              };

              const loggingDatadog2: LoggingDatadog2 = {
                host: 'host',
                apiKey: 'api_key',
                tags: [datadogTags2],
              };

              const loggingNewRelic2: LoggingNewRelic2 = {
                host: 'host',
                ingestionKey: 'ingestion_key',
              };

              const loggingSplunk2: LoggingSplunk2 = {
                host: 'host',
                token: 'token',
              };

              const loggingTcp2: LoggingTcp2 = {
                host: 'host',
                port: 52754,
              };

              const httpFormat2 = HttpFormat2.JSON;

              const httpHeaders3: HttpHeaders3 = {
                name: 'name',
                value: 'value',
              };

              const httpCompression2 = HttpCompression2.NONE;

              const loggingHttp2: LoggingHttp2 = {
                host: 'host',
                port: 58619,
                user: 'user',
                password: 'password',
                path: 'path',
                format: httpFormat2,
                headers: [httpHeaders3],
                compression: httpCompression2,
              };

              const createContainerLogging: CreateContainerLogging = {
                axiom: loggingAxiom2,
                datadog: loggingDatadog2,
                newRelic: loggingNewRelic2,
                splunk: loggingSplunk2,
                tcp: loggingTcp2,
                http: loggingHttp2,
              };

              const registryAuthenticationBasic1: RegistryAuthenticationBasic1 = {
                username: 'username',
                password: 'password',
              };

              const registryAuthenticationGcpGcr1: RegistryAuthenticationGcpGcr1 = {
                serviceKey: 'service_key',
              };

              const registryAuthenticationAwsEcr1: RegistryAuthenticationAwsEcr1 = {
                accessKeyId: 'access_key_id',
                secretAccessKey: 'secret_access_key',
              };

              const registryAuthenticationDockerHub1: RegistryAuthenticationDockerHub1 = {
                username: 'username',
                personalAccessToken: 'personal_access_token',
              };

              const registryAuthenticationGcpGar1: RegistryAuthenticationGcpGar1 = {
                serviceKey: 'service_key',
              };

              const createContainerRegistryAuthentication: CreateContainerRegistryAuthentication = {
                basic: registryAuthenticationBasic1,
                gcpGcr: registryAuthenticationGcpGcr1,
                awsEcr: registryAuthenticationAwsEcr1,
                dockerHub: registryAuthenticationDockerHub1,
                gcpGar: registryAuthenticationGcpGar1,
              };

              const createContainer: CreateContainer = {
                image: 'image',
                resources: containerResourceRequirements,
                command: ['command'],
                priority: containerGroupPriority,
                environmentVariables: [],
                logging: createContainerLogging,
                registryAuthentication: createContainerRegistryAuthentication,
              };

              const containerRestartPolicy = ContainerRestartPolicy.ALWAYS;

              const countryCode = CountryCode.AF;

              const containerNetworkingProtocol = ContainerNetworkingProtocol.HTTP;

              const createContainerGroupNetworkingLoadBalancer = CreateContainerGroupNetworkingLoadBalancer.ROUND_ROBIN;

              const createContainerGroupNetworking: CreateContainerGroupNetworking = {
                protocol: containerNetworkingProtocol,
                port: 64929,
                auth: true,
                loadBalancer: createContainerGroupNetworkingLoadBalancer,
                singleConnectionLimit: true,
                clientRequestTimeout: 100000,
                serverResponseTimeout: 100000,
              };

              const containerGroupProbeTcp: ContainerGroupProbeTcp = {
                port: 9366,
              };

              const containerProbeHttpScheme = ContainerProbeHttpScheme.HTTP;

              const containerGroupProbeHttpHeaders2: ContainerGroupProbeHttpHeaders2 = {
                name: 'name',
                value: 'value',
              };

              const containerGroupProbeHttp: ContainerGroupProbeHttp = {
                path: 'path',
                port: 398,
                scheme: containerProbeHttpScheme,
                headers: [containerGroupProbeHttpHeaders2],
              };

              const containerGroupProbeGrpc: ContainerGroupProbeGrpc = {
                service: 'service',
                port: 23866,
              };

              const containerGroupProbeExec: ContainerGroupProbeExec = {
                command: ['command'],
              };

              const containerGroupLivenessProbe: ContainerGroupLivenessProbe = {
                tcp: containerGroupProbeTcp,
                http: containerGroupProbeHttp,
                grpc: containerGroupProbeGrpc,
                exec: containerGroupProbeExec,
                initialDelaySeconds: 1,
                periodSeconds: 10,
                timeoutSeconds: 30,
                successThreshold: 1,
                failureThreshold: 3,
              };

              const containerGroupReadinessProbe: ContainerGroupReadinessProbe = {
                tcp: containerGroupProbeTcp,
                http: containerGroupProbeHttp,
                grpc: containerGroupProbeGrpc,
                exec: containerGroupProbeExec,
                initialDelaySeconds: 8,
                periodSeconds: 1,
                timeoutSeconds: 1,
                successThreshold: 1,
                failureThreshold: 3,
              };

              const containerGroupStartupProbe: ContainerGroupStartupProbe = {
                tcp: containerGroupProbeTcp,
                http: containerGroupProbeHttp,
                grpc: containerGroupProbeGrpc,
                exec: containerGroupProbeExec,
                initialDelaySeconds: 2,
                periodSeconds: 3,
                timeoutSeconds: 10,
                successThreshold: 2,
                failureThreshold: 1200,
              };

              const containerGroupQueueConnection: ContainerGroupQueueConnection = {
                path: 'path',
                port: 34806,
                queueName: 'r3qna2yfhck403bsaqbf6nweyawtm7q4ohr',
              };

              const queueAutoscaler: QueueAutoscaler = {
                minReplicas: 88,
                maxReplicas: 197,
                desiredQueueLength: 57,
                pollingPeriod: 1449,
                maxUpscalePerMinute: 85,
                maxDownscalePerMinute: 33,
              };

              const createContainerGroup: CreateContainerGroup = {
                name: 'name',
                displayName: 'ny',
                container: createContainer,
                autostartPolicy: true,
                restartPolicy: containerRestartPolicy,
                replicas: 47,
                countryCodes: [countryCode],
                networking: createContainerGroupNetworking,
                livenessProbe: containerGroupLivenessProbe,
                readinessProbe: containerGroupReadinessProbe,
                startupProbe: containerGroupStartupProbe,
                queueConnection: containerGroupQueueConnection,
                queueAutoscaler: queueAutoscaler,
              };

              const { data } = await saladCloudSdk.containerGroups.createContainerGroup(
                'acme-corp',
                'dev-env',
                createContainerGroup,
              );

              console.log(data);
            })();
          lang: TypeScript
        - source: |-
            from salad_cloud_sdk import SaladCloudSdk
            from salad_cloud_sdk.models import CreateContainerGroup

            sdk = SaladCloudSdk(
                api_key="YOUR_API_KEY",
                api_key_header="YOUR_API_KEY_HEADER",
                timeout=10000
            )

            request_body = CreateContainerGroup(
                name="name",
                display_name="VSVi1YCcw",
                container={
                    "image": "image",
                    "resources": {
                        "cpu": 13,
                        "memory": 8139,
                        "gpu_classes": [
                            "gpu_classes"
                        ],
                        "storage_amount": 43769579402
                    },
                    "command": [
                        "command"
                    ],
                    "priority": "high",
                    "environment_variables": {},
                    "logging": {
                        "axiom": {
                            "host": "host",
                            "api_token": "api_token",
                            "dataset": "dataset"
                        },
                        "datadog": {
                            "host": "host",
                            "api_key": "api_key",
                            "tags": [
                                {
                                    "name": "name",
                                    "value": "value"
                                }
                            ]
                        },
                        "new_relic": {
                            "host": "host",
                            "ingestion_key": "ingestion_key"
                        },
                        "splunk": {
                            "host": "host",
                            "token": "token"
                        },
                        "tcp": {
                            "host": "host",
                            "port": 24951
                        },
                        "http": {
                            "host": "host",
                            "port": 36565,
                            "user": "user",
                            "password": "password",
                            "path": "path",
                            "format": "json",
                            "headers": [
                                {
                                    "name": "name",
                                    "value": "value"
                                }
                            ],
                            "compression": "none"
                        }
                    },
                    "registry_authentication": {
                        "basic": {
                            "username": "username",
                            "password": "password"
                        },
                        "gcp_gcr": {
                            "service_key": "service_key"
                        },
                        "aws_ecr": {
                            "access_key_id": "access_key_id",
                            "secret_access_key": "secret_access_key"
                        },
                        "docker_hub": {
                            "username": "username",
                            "personal_access_token": "personal_access_token"
                        },
                        "gcp_gar": {
                            "service_key": "service_key"
                        }
                    }
                },
                autostart_policy=False,
                restart_policy="always",
                replicas=231,
                country_codes=[
                    "af"
                ],
                networking={
                    "protocol": "http",
                    "port": 22764,
                    "auth": False,
                    "load_balancer": "round_robin",
                    "single_connection_limit": False,
                    "client_request_timeout": 100000,
                    "server_response_timeout": 100000
                },
                liveness_probe={
                    "tcp": {
                        "port": 22350
                    },
                    "http": {
                        "path": "path",
                        "port": 56884,
                        "scheme": "http",
                        "headers": [
                            {
                                "name": "name",
                                "value": "value"
                            }
                        ]
                    },
                    "grpc": {
                        "service": "service",
                        "port": 47172
                    },
                    "exec_": {
                        "command": [
                            "command"
                        ]
                    },
                    "initial_delay_seconds": 0,
                    "period_seconds": 10,
                    "timeout_seconds": 30,
                    "success_threshold": 1,
                    "failure_threshold": 3
                },
                readiness_probe={
                    "tcp": {
                        "port": 22350
                    },
                    "http": {
                        "path": "path",
                        "port": 56884,
                        "scheme": "http",
                        "headers": [
                            {
                                "name": "name",
                                "value": "value"
                            }
                        ]
                    },
                    "grpc": {
                        "service": "service",
                        "port": 47172
                    },
                    "exec_": {
                        "command": [
                            "command"
                        ]
                    },
                    "initial_delay_seconds": 0,
                    "period_seconds": 1,
                    "timeout_seconds": 1,
                    "success_threshold": 1,
                    "failure_threshold": 3
                },
                startup_probe={
                    "tcp": {
                        "port": 22350
                    },
                    "http": {
                        "path": "path",
                        "port": 56884,
                        "scheme": "http",
                        "headers": [
                            {
                                "name": "name",
                                "value": "value"
                            }
                        ]
                    },
                    "grpc": {
                        "service": "service",
                        "port": 47172
                    },
                    "exec_": {
                        "command": [
                            "command"
                        ]
                    },
                    "initial_delay_seconds": 9,
                    "period_seconds": 3,
                    "timeout_seconds": 10,
                    "success_threshold": 2,
                    "failure_threshold": 1200
                },
                queue_connection={
                    "path": "path",
                    "port": 34605,
                    "queue_name": "gv8rketqh"
                },
                queue_autoscaler={
                    "min_replicas": 26,
                    "max_replicas": 28,
                    "desired_queue_length": 42,
                    "polling_period": 442,
                    "max_upscale_per_minute": 3,
                    "max_downscale_per_minute": 69
                }
            )

            result = sdk.container_groups.create_container_group(
                request_body=request_body,
                organization_name="acme-corp",
                project_name="dev-env"
            )

            print(result)
          lang: Python
        - source: |-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/containergroups"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/shared"
            )

            config := saladcloudsdkconfig.NewConfig()
            client := saladcloudsdk.NewSaladCloudSdk(config)


            containerResourceRequirements := shared.ContainerResourceRequirements{}
            containerResourceRequirements.SetCpu(int64(123))
            containerResourceRequirements.SetMemory(int64(123))
            containerResourceRequirements.SetGpuClasses([]string{})
            containerResourceRequirements.SetStorageAmount(int64(123))

            containerGroupPriority := shared.CONTAINER_GROUP_PRIORITY_HIGH


            loggingAxiom2 := containergroups.LoggingAxiom2{}
            loggingAxiom2.SetHost("Host")
            loggingAxiom2.SetApiToken("ApiToken")
            loggingAxiom2.SetDataset("Dataset")


            datadogTags2 := containergroups.DatadogTags2{}
            datadogTags2.SetName("Name")
            datadogTags2.SetValue("Value")

            loggingDatadog2 := containergroups.LoggingDatadog2{}
            loggingDatadog2.SetHost("Host")
            loggingDatadog2.SetApiKey("ApiKey")
            loggingDatadog2.SetTags([]containergroups.DatadogTags2{datadogTags2})


            loggingNewRelic2 := containergroups.LoggingNewRelic2{}
            loggingNewRelic2.SetHost("Host")
            loggingNewRelic2.SetIngestionKey("IngestionKey")


            loggingSplunk2 := containergroups.LoggingSplunk2{}
            loggingSplunk2.SetHost("Host")
            loggingSplunk2.SetToken("Token")


            loggingTcp2 := containergroups.LoggingTcp2{}
            loggingTcp2.SetHost("Host")
            loggingTcp2.SetPort(int64(123))

            httpFormat2 := containergroups.HTTP_FORMAT2_JSON


            httpHeaders3 := containergroups.HttpHeaders3{}
            httpHeaders3.SetName("Name")
            httpHeaders3.SetValue("Value")

            httpCompression2 := containergroups.HTTP_COMPRESSION2_NONE

            loggingHttp2 := containergroups.LoggingHttp2{}
            loggingHttp2.SetHost("Host")
            loggingHttp2.SetPort(int64(123))
            loggingHttp2.SetUser("User")
            loggingHttp2.SetPassword("Password")
            loggingHttp2.SetPath("Path")
            loggingHttp2.SetFormat(httpFormat2)
            loggingHttp2.SetHeaders([]containergroups.HttpHeaders3{httpHeaders3})
            loggingHttp2.SetCompression(httpCompression2)

            createContainerLogging := containergroups.CreateContainerLogging{}
            createContainerLogging.SetAxiom(loggingAxiom2)
            createContainerLogging.SetDatadog(loggingDatadog2)
            createContainerLogging.SetNewRelic(loggingNewRelic2)
            createContainerLogging.SetSplunk(loggingSplunk2)
            createContainerLogging.SetTcp(loggingTcp2)
            createContainerLogging.SetHttp(loggingHttp2)


            registryAuthenticationBasic1 := containergroups.RegistryAuthenticationBasic1{}
            registryAuthenticationBasic1.SetUsername("Username")
            registryAuthenticationBasic1.SetPassword("Password")


            registryAuthenticationGcpGcr1 := containergroups.RegistryAuthenticationGcpGcr1{}
            registryAuthenticationGcpGcr1.SetServiceKey("ServiceKey")


            registryAuthenticationAwsEcr1 := containergroups.RegistryAuthenticationAwsEcr1{}
            registryAuthenticationAwsEcr1.SetAccessKeyId("AccessKeyId")
            registryAuthenticationAwsEcr1.SetSecretAccessKey("SecretAccessKey")


            registryAuthenticationDockerHub1 := containergroups.RegistryAuthenticationDockerHub1{}
            registryAuthenticationDockerHub1.SetUsername("Username")
            registryAuthenticationDockerHub1.SetPersonalAccessToken("PersonalAccessToken")


            registryAuthenticationGcpGar1 := containergroups.RegistryAuthenticationGcpGar1{}
            registryAuthenticationGcpGar1.SetServiceKey("ServiceKey")

            createContainerRegistryAuthentication := containergroups.CreateContainerRegistryAuthentication{}
            createContainerRegistryAuthentication.SetBasic(registryAuthenticationBasic1)
            createContainerRegistryAuthentication.SetGcpGcr(registryAuthenticationGcpGcr1)
            createContainerRegistryAuthentication.SetAwsEcr(registryAuthenticationAwsEcr1)
            createContainerRegistryAuthentication.SetDockerHub(registryAuthenticationDockerHub1)
            createContainerRegistryAuthentication.SetGcpGar(registryAuthenticationGcpGar1)

            createContainer := containergroups.CreateContainer{}
            createContainer.SetImage("Image")
            createContainer.SetResources(containerResourceRequirements)
            createContainer.SetCommand([]string{})
            createContainer.SetPriority(containerGroupPriority)
            createContainer.SetEnvironmentVariables(map[string]string{})
            createContainer.SetLogging(createContainerLogging)
            createContainer.SetRegistryAuthentication(createContainerRegistryAuthentication)

            containerRestartPolicy := shared.CONTAINER_RESTART_POLICY_ALWAYS

            countryCode := shared.COUNTRY_CODE_AF

            containerNetworkingProtocol := shared.CONTAINER_NETWORKING_PROTOCOL_HTTP

            createContainerGroupNetworkingLoadBalancer := containergroups.CREATE_CONTAINER_GROUP_NETWORKING_LOAD_BALANCER_ROUND_ROBIN

            createContainerGroupNetworking := containergroups.CreateContainerGroupNetworking{}
            createContainerGroupNetworking.SetProtocol(containerNetworkingProtocol)
            createContainerGroupNetworking.SetPort(int64(123))
            createContainerGroupNetworking.SetAuth(true)
            createContainerGroupNetworking.SetLoadBalancer(createContainerGroupNetworkingLoadBalancer)
            createContainerGroupNetworking.SetSingleConnectionLimit(true)
            createContainerGroupNetworking.SetClientRequestTimeout(int64(123))
            createContainerGroupNetworking.SetServerResponseTimeout(int64(123))


            containerGroupProbeTcp := shared.ContainerGroupProbeTcp{}
            containerGroupProbeTcp.SetPort(int64(123))

            containerProbeHttpScheme := shared.CONTAINER_PROBE_HTTP_SCHEME_HTTP


            containerGroupProbeHttpHeaders2 := shared.ContainerGroupProbeHttpHeaders2{}
            containerGroupProbeHttpHeaders2.SetName("Name")
            containerGroupProbeHttpHeaders2.SetValue("Value")

            containerGroupProbeHttp := shared.ContainerGroupProbeHttp{}
            containerGroupProbeHttp.SetPath("Path")
            containerGroupProbeHttp.SetPort(int64(123))
            containerGroupProbeHttp.SetScheme(containerProbeHttpScheme)
            containerGroupProbeHttp.SetHeaders([]shared.ContainerGroupProbeHttpHeaders2{containerGroupProbeHttpHeaders2})


            containerGroupProbeGrpc := shared.ContainerGroupProbeGrpc{}
            containerGroupProbeGrpc.SetService("Service")
            containerGroupProbeGrpc.SetPort(int64(123))


            containerGroupProbeExec := shared.ContainerGroupProbeExec{}
            containerGroupProbeExec.SetCommand([]string{})

            containerGroupLivenessProbe := shared.ContainerGroupLivenessProbe{}
            containerGroupLivenessProbe.SetTcp(containerGroupProbeTcp)
            containerGroupLivenessProbe.SetHttp(containerGroupProbeHttp)
            containerGroupLivenessProbe.SetGrpc(containerGroupProbeGrpc)
            containerGroupLivenessProbe.SetExec(containerGroupProbeExec)
            containerGroupLivenessProbe.SetInitialDelaySeconds(int64(123))
            containerGroupLivenessProbe.SetPeriodSeconds(int64(123))
            containerGroupLivenessProbe.SetTimeoutSeconds(int64(123))
            containerGroupLivenessProbe.SetSuccessThreshold(int64(123))
            containerGroupLivenessProbe.SetFailureThreshold(int64(123))


            containerGroupProbeTcp := shared.ContainerGroupProbeTcp{}
            containerGroupProbeTcp.SetPort(int64(123))

            containerProbeHttpScheme := shared.CONTAINER_PROBE_HTTP_SCHEME_HTTP


            containerGroupProbeHttpHeaders2 := shared.ContainerGroupProbeHttpHeaders2{}
            containerGroupProbeHttpHeaders2.SetName("Name")
            containerGroupProbeHttpHeaders2.SetValue("Value")

            containerGroupProbeHttp := shared.ContainerGroupProbeHttp{}
            containerGroupProbeHttp.SetPath("Path")
            containerGroupProbeHttp.SetPort(int64(123))
            containerGroupProbeHttp.SetScheme(containerProbeHttpScheme)
            containerGroupProbeHttp.SetHeaders([]shared.ContainerGroupProbeHttpHeaders2{containerGroupProbeHttpHeaders2})


            containerGroupProbeGrpc := shared.ContainerGroupProbeGrpc{}
            containerGroupProbeGrpc.SetService("Service")
            containerGroupProbeGrpc.SetPort(int64(123))


            containerGroupProbeExec := shared.ContainerGroupProbeExec{}
            containerGroupProbeExec.SetCommand([]string{})

            containerGroupReadinessProbe := shared.ContainerGroupReadinessProbe{}
            containerGroupReadinessProbe.SetTcp(containerGroupProbeTcp)
            containerGroupReadinessProbe.SetHttp(containerGroupProbeHttp)
            containerGroupReadinessProbe.SetGrpc(containerGroupProbeGrpc)
            containerGroupReadinessProbe.SetExec(containerGroupProbeExec)
            containerGroupReadinessProbe.SetInitialDelaySeconds(int64(123))
            containerGroupReadinessProbe.SetPeriodSeconds(int64(123))
            containerGroupReadinessProbe.SetTimeoutSeconds(int64(123))
            containerGroupReadinessProbe.SetSuccessThreshold(int64(123))
            containerGroupReadinessProbe.SetFailureThreshold(int64(123))


            containerGroupProbeTcp := shared.ContainerGroupProbeTcp{}
            containerGroupProbeTcp.SetPort(int64(123))

            containerProbeHttpScheme := shared.CONTAINER_PROBE_HTTP_SCHEME_HTTP


            containerGroupProbeHttpHeaders2 := shared.ContainerGroupProbeHttpHeaders2{}
            containerGroupProbeHttpHeaders2.SetName("Name")
            containerGroupProbeHttpHeaders2.SetValue("Value")

            containerGroupProbeHttp := shared.ContainerGroupProbeHttp{}
            containerGroupProbeHttp.SetPath("Path")
            containerGroupProbeHttp.SetPort(int64(123))
            containerGroupProbeHttp.SetScheme(containerProbeHttpScheme)
            containerGroupProbeHttp.SetHeaders([]shared.ContainerGroupProbeHttpHeaders2{containerGroupProbeHttpHeaders2})


            containerGroupProbeGrpc := shared.ContainerGroupProbeGrpc{}
            containerGroupProbeGrpc.SetService("Service")
            containerGroupProbeGrpc.SetPort(int64(123))


            containerGroupProbeExec := shared.ContainerGroupProbeExec{}
            containerGroupProbeExec.SetCommand([]string{})

            containerGroupStartupProbe := shared.ContainerGroupStartupProbe{}
            containerGroupStartupProbe.SetTcp(containerGroupProbeTcp)
            containerGroupStartupProbe.SetHttp(containerGroupProbeHttp)
            containerGroupStartupProbe.SetGrpc(containerGroupProbeGrpc)
            containerGroupStartupProbe.SetExec(containerGroupProbeExec)
            containerGroupStartupProbe.SetInitialDelaySeconds(int64(123))
            containerGroupStartupProbe.SetPeriodSeconds(int64(123))
            containerGroupStartupProbe.SetTimeoutSeconds(int64(123))
            containerGroupStartupProbe.SetSuccessThreshold(int64(123))
            containerGroupStartupProbe.SetFailureThreshold(int64(123))


            containerGroupQueueConnection := shared.ContainerGroupQueueConnection{}
            containerGroupQueueConnection.SetPath("Path")
            containerGroupQueueConnection.SetPort(int64(123))
            containerGroupQueueConnection.SetQueueName("QueueName")


            queueAutoscaler := shared.QueueAutoscaler{}
            queueAutoscaler.SetMinReplicas(int64(123))
            queueAutoscaler.SetMaxReplicas(int64(123))
            queueAutoscaler.SetDesiredQueueLength(int64(123))
            queueAutoscaler.SetPollingPeriod(int64(123))
            queueAutoscaler.SetMaxUpscalePerMinute(int64(123))
            queueAutoscaler.SetMaxDownscalePerMinute(int64(123))

            request := containergroups.CreateContainerGroup{}
            request.SetName("Name")
            request.SetDisplayName("DisplayName")
            request.SetContainer(createContainer)
            request.SetAutostartPolicy(true)
            request.SetRestartPolicy(containerRestartPolicy)
            request.SetReplicas(int64(123))
            request.SetCountryCodes([]shared.CountryCode{countryCode})
            request.SetNetworking(createContainerGroupNetworking)
            request.SetLivenessProbe(containerGroupLivenessProbe)
            request.SetReadinessProbe(containerGroupReadinessProbe)
            request.SetStartupProbe(containerGroupStartupProbe)
            request.SetQueueConnection(containerGroupQueueConnection)
            request.SetQueueAutoscaler(queueAutoscaler)

            response, err := client.ContainerGroups.CreateContainerGroup(context.Background(), "organizationName", "projectName", request)
            if err != nil {
              panic(err)
            }

            fmt.Println(response)
          lang: Go
        - source: |-
            import com.salad.cloud.sdk.SaladCloudSdk;
            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;
            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;
            import com.salad.cloud.sdk.models.ContainerGroup;
            import com.salad.cloud.sdk.models.ContainerGroupLivenessProbe;
            import com.salad.cloud.sdk.models.ContainerGroupPriority;
            import com.salad.cloud.sdk.models.ContainerGroupProbeExec;
            import com.salad.cloud.sdk.models.ContainerGroupProbeGrpc;
            import com.salad.cloud.sdk.models.ContainerGroupProbeHttp;
            import com.salad.cloud.sdk.models.ContainerGroupProbeHttpHeaders2;
            import com.salad.cloud.sdk.models.ContainerGroupProbeTcp;
            import com.salad.cloud.sdk.models.ContainerGroupQueueConnection;
            import com.salad.cloud.sdk.models.ContainerGroupReadinessProbe;
            import com.salad.cloud.sdk.models.ContainerGroupStartupProbe;
            import com.salad.cloud.sdk.models.ContainerNetworkingProtocol;
            import com.salad.cloud.sdk.models.ContainerProbeHttpScheme;
            import com.salad.cloud.sdk.models.ContainerResourceRequirements;
            import com.salad.cloud.sdk.models.ContainerRestartPolicy;
            import com.salad.cloud.sdk.models.CountryCode;
            import com.salad.cloud.sdk.models.CreateContainer;
            import com.salad.cloud.sdk.models.CreateContainerGroup;
            import com.salad.cloud.sdk.models.CreateContainerGroupNetworking;
            import com.salad.cloud.sdk.models.CreateContainerGroupNetworkingLoadBalancer;
            import com.salad.cloud.sdk.models.CreateContainerLogging;
            import com.salad.cloud.sdk.models.CreateContainerRegistryAuthentication;
            import com.salad.cloud.sdk.models.DatadogTags2;
            import com.salad.cloud.sdk.models.HttpCompression2;
            import com.salad.cloud.sdk.models.HttpFormat2;
            import com.salad.cloud.sdk.models.HttpHeaders3;
            import com.salad.cloud.sdk.models.LoggingAxiom2;
            import com.salad.cloud.sdk.models.LoggingDatadog2;
            import com.salad.cloud.sdk.models.LoggingHttp2;
            import com.salad.cloud.sdk.models.LoggingNewRelic2;
            import com.salad.cloud.sdk.models.LoggingSplunk2;
            import com.salad.cloud.sdk.models.LoggingTcp2;
            import com.salad.cloud.sdk.models.QueueAutoscaler;
            import com.salad.cloud.sdk.models.RegistryAuthenticationAwsEcr1;
            import com.salad.cloud.sdk.models.RegistryAuthenticationBasic1;
            import com.salad.cloud.sdk.models.RegistryAuthenticationDockerHub1;
            import com.salad.cloud.sdk.models.RegistryAuthenticationGcpGar1;
            import com.salad.cloud.sdk.models.RegistryAuthenticationGcpGcr1;
            import java.util.Arrays;
            import java.util.HashMap;
            import java.util.List;

            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                List<String> gpuClasses = Arrays.asList("gpu_classes");

                ContainerResourceRequirements containerResourceRequirements = ContainerResourceRequirements
                  .builder()
                  .cpu(13L)
                  .memory(8139L)
                  .gpuClasses(gpuClasses)
                  .storageAmount(43769579402L)
                  .build();

                List<String> command = Arrays.asList("command");

                LoggingAxiom2 loggingAxiom2 = LoggingAxiom2.builder().host("host").apiToken("api_token").dataset("dataset").build();

                DatadogTags2 datadogTags2 = DatadogTags2.builder().name("name").value("value").build();

                List<DatadogTags2> tags = Arrays.asList(datadogTags2);

                LoggingDatadog2 loggingDatadog2 = LoggingDatadog2.builder().host("host").apiKey("api_key").tags(tags).build();

                LoggingNewRelic2 loggingNewRelic2 = LoggingNewRelic2.builder().host("host").ingestionKey("ingestion_key").build();

                LoggingSplunk2 loggingSplunk2 = LoggingSplunk2.builder().host("host").token("token").build();

                LoggingTcp2 loggingTcp2 = LoggingTcp2.builder().host("host").port(24951L).build();

                HttpHeaders3 httpHeaders3 = HttpHeaders3.builder().name("name").value("value").build();

                List<HttpHeaders3> headers = Arrays.asList(httpHeaders3);

                LoggingHttp2 loggingHttp2 = LoggingHttp2
                  .builder()
                  .host("host")
                  .port(36565L)
                  .user("user")
                  .password("password")
                  .path("path")
                  .format(HttpFormat2.JSON)
                  .headers(headers)
                  .compression(HttpCompression2.NONE)
                  .build();

                CreateContainerLogging createContainerLogging = CreateContainerLogging
                  .builder()
                  .axiom(loggingAxiom2)
                  .datadog(loggingDatadog2)
                  .newRelic(loggingNewRelic2)
                  .splunk(loggingSplunk2)
                  .tcp(loggingTcp2)
                  .http(loggingHttp2)
                  .build();

                RegistryAuthenticationBasic1 registryAuthenticationBasic1 = RegistryAuthenticationBasic1
                  .builder()
                  .username("username")
                  .password("password")
                  .build();

                RegistryAuthenticationGcpGcr1 registryAuthenticationGcpGcr1 = RegistryAuthenticationGcpGcr1
                  .builder()
                  .serviceKey("service_key")
                  .build();

                RegistryAuthenticationAwsEcr1 registryAuthenticationAwsEcr1 = RegistryAuthenticationAwsEcr1
                  .builder()
                  .accessKeyId("access_key_id")
                  .secretAccessKey("secret_access_key")
                  .build();

                RegistryAuthenticationDockerHub1 registryAuthenticationDockerHub1 = RegistryAuthenticationDockerHub1
                  .builder()
                  .username("username")
                  .personalAccessToken("personal_access_token")
                  .build();

                RegistryAuthenticationGcpGar1 registryAuthenticationGcpGar1 = RegistryAuthenticationGcpGar1
                  .builder()
                  .serviceKey("service_key")
                  .build();

                CreateContainerRegistryAuthentication createContainerRegistryAuthentication = CreateContainerRegistryAuthentication
                  .builder()
                  .basic(registryAuthenticationBasic1)
                  .gcpGcr(registryAuthenticationGcpGcr1)
                  .awsEcr(registryAuthenticationAwsEcr1)
                  .dockerHub(registryAuthenticationDockerHub1)
                  .gcpGar(registryAuthenticationGcpGar1)
                  .build();

                CreateContainer createContainer = CreateContainer
                  .builder()
                  .image("image")
                  .resources(containerResourceRequirements)
                  .command(command)
                  .priority(ContainerGroupPriority.HIGH)
                  .environmentVariables(new HashMap())
                  .logging(createContainerLogging)
                  .registryAuthentication(createContainerRegistryAuthentication)
                  .build();

                List<CountryCode> countryCodes = Arrays.asList(CountryCode.AF);

                CreateContainerGroupNetworking createContainerGroupNetworking = CreateContainerGroupNetworking
                  .builder()
                  .protocol(ContainerNetworkingProtocol.HTTP)
                  .port(22764L)
                  .auth(false)
                  .loadBalancer(CreateContainerGroupNetworkingLoadBalancer.ROUND_ROBIN)
                  .singleConnectionLimit(false)
                  .clientRequestTimeout(100000L)
                  .serverResponseTimeout(100000L)
                  .build();

                ContainerGroupProbeTcp containerGroupProbeTcp = ContainerGroupProbeTcp.builder().port(22350L).build();

                ContainerGroupProbeHttpHeaders2 containerGroupProbeHttpHeaders2 = ContainerGroupProbeHttpHeaders2
                  .builder()
                  .name("name")
                  .value("value")
                  .build();

                List<ContainerGroupProbeHttpHeaders2> headers = Arrays.asList(containerGroupProbeHttpHeaders2);

                ContainerGroupProbeHttp containerGroupProbeHttp = ContainerGroupProbeHttp
                  .builder()
                  .path("path")
                  .port(56884L)
                  .scheme(ContainerProbeHttpScheme.HTTP)
                  .headers(headers)
                  .build();

                ContainerGroupProbeGrpc containerGroupProbeGrpc = ContainerGroupProbeGrpc
                  .builder()
                  .service("service")
                  .port(47172L)
                  .build();

                List<String> command = Arrays.asList("command");

                ContainerGroupProbeExec containerGroupProbeExec = ContainerGroupProbeExec.builder().command(command).build();

                ContainerGroupLivenessProbe containerGroupLivenessProbe = ContainerGroupLivenessProbe
                  .builder()
                  .tcp(containerGroupProbeTcp)
                  .http(containerGroupProbeHttp)
                  .grpc(containerGroupProbeGrpc)
                  .exec(containerGroupProbeExec)
                  .initialDelaySeconds(0L)
                  .periodSeconds(10L)
                  .timeoutSeconds(30L)
                  .successThreshold(1L)
                  .failureThreshold(3L)
                  .build();

                ContainerGroupReadinessProbe containerGroupReadinessProbe = ContainerGroupReadinessProbe
                  .builder()
                  .tcp(containerGroupProbeTcp)
                  .http(containerGroupProbeHttp)
                  .grpc(containerGroupProbeGrpc)
                  .exec(containerGroupProbeExec)
                  .initialDelaySeconds(0L)
                  .periodSeconds(1L)
                  .timeoutSeconds(1L)
                  .successThreshold(1L)
                  .failureThreshold(3L)
                  .build();

                ContainerGroupStartupProbe containerGroupStartupProbe = ContainerGroupStartupProbe
                  .builder()
                  .tcp(containerGroupProbeTcp)
                  .http(containerGroupProbeHttp)
                  .grpc(containerGroupProbeGrpc)
                  .exec(containerGroupProbeExec)
                  .initialDelaySeconds(9L)
                  .periodSeconds(3L)
                  .timeoutSeconds(10L)
                  .successThreshold(2L)
                  .failureThreshold(1200L)
                  .build();

                ContainerGroupQueueConnection containerGroupQueueConnection = ContainerGroupQueueConnection
                  .builder()
                  .path("path")
                  .port(34605L)
                  .queueName("gv8rketqh")
                  .build();

                QueueAutoscaler queueAutoscaler = QueueAutoscaler
                  .builder()
                  .minReplicas(26L)
                  .maxReplicas(28L)
                  .desiredQueueLength(42L)
                  .pollingPeriod(442L)
                  .maxUpscalePerMinute(3L)
                  .maxDownscalePerMinute(69L)
                  .build();

                CreateContainerGroup createContainerGroup = CreateContainerGroup
                  .builder()
                  .name("name")
                  .displayName("VSVi1YCcw")
                  .container(createContainer)
                  .autostartPolicy(false)
                  .restartPolicy(ContainerRestartPolicy.ALWAYS)
                  .replicas(231L)
                  .countryCodes(countryCodes)
                  .networking(createContainerGroupNetworking)
                  .livenessProbe(containerGroupLivenessProbe)
                  .readinessProbe(containerGroupReadinessProbe)
                  .startupProbe(containerGroupStartupProbe)
                  .queueConnection(containerGroupQueueConnection)
                  .queueAutoscaler(queueAutoscaler)
                  .build();

                ContainerGroup response = saladCloudSdk.containerGroups.createContainerGroup(
                  "acme-corp",
                  "dev-env",
                  createContainerGroup
                );

                System.out.println(response);
              }
            }
          lang: Java
  /organizations/{organization_name}/projects/{project_name}/containers/{container_group_name}:
    summary: Container Group
    description: Operations for a container group
    parameters:
      - $ref: "#/components/parameters/organization_name"
      - $ref: "#/components/parameters/project_name"
      - $ref: "#/components/parameters/container_group_name"
    get:
      operationId: get_container_group
      summary: Get Container Group
      description: Gets a container group
      responses:
        "200":
          $ref: "#/components/responses/GetContainerGroup"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - container_groups
      x-liblab-datasource: ContainerGroup#Read
      x-liblab-resource: ContainerGroup#Read
      x-codeSamples:
        - source: >-
            using Salad.Cloud.SDK;

            using Salad.Cloud.SDK.Config;

            using Environment = Salad.Cloud.SDK.Http.Environment;


            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };


            var client = new SaladCloudSdkClient(config);


            var response = await
            client.ContainerGroups.GetContainerGroupAsync("acme-corp",
            "dev-env", "deo5-1hcilmn8m1ouq40vp547cf-9sn3yad");


            Console.WriteLine(response);
          lang: C#
        - source: >-
            import { SaladCloudSdk } from
            '@saladtechnologies-oss/salad-cloud-sdk';


            (async () => {
              const saladCloudSdk = new SaladCloudSdk({
                apiKey: 'YOUR_API_KEY',
              });

              const { data } = await saladCloudSdk.containerGroups.getContainerGroup('acme-corp', 'dev-env', 'n6eqezp9');

              console.log(data);
            })();
          lang: TypeScript
        - source: |-
            from salad_cloud_sdk import SaladCloudSdk

            sdk = SaladCloudSdk(
                api_key="YOUR_API_KEY",
                api_key_header="YOUR_API_KEY_HEADER",
                timeout=10000
            )

            result = sdk.container_groups.get_container_group(
                organization_name="acme-corp",
                project_name="dev-env",
                container_group_name="deo5-1hcilmn8m1ouq40vp547cf-9sn3yad"
            )

            print(result)
          lang: Python
        - source: >-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
            )


            config := saladcloudsdkconfig.NewConfig()

            client := saladcloudsdk.NewSaladCloudSdk(config)


            response, err :=
            client.ContainerGroups.GetContainerGroup(context.Background(),
            "organizationName", "projectName", "containerGroupName")

            if err != nil {
              panic(err)
            }


            fmt.Println(response)
          lang: Go
        - source: >-
            import com.salad.cloud.sdk.SaladCloudSdk;

            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;

            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;

            import com.salad.cloud.sdk.models.ContainerGroup;


            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                ContainerGroup response = saladCloudSdk.containerGroups.getContainerGroup(
                  "acme-corp",
                  "dev-env",
                  "deo5-1hcilmn8m1ouq40vp547cf-9sn3yad"
                );

                System.out.println(response);
              }
            }
          lang: Java
    patch:
      operationId: update_container_group
      summary: Update Container Group
      description: Updates a container group
      requestBody:
        $ref: "#/components/requestBodies/UpdateContainerGroup"
      responses:
        "200":
          $ref: "#/components/responses/UpdateContainerGroup"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - container_groups
      x-liblab-resource: ContainerGroup#Update
      x-codeSamples:
        - source: >-
            using Salad.Cloud.SDK;

            using Salad.Cloud.SDK.Config;

            using Salad.Cloud.SDK.Models;

            using Environment = Salad.Cloud.SDK.Http.Environment;


            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };


            var client = new SaladCloudSdkClient(config);


            var gpuClasses = new List<string>() { "gpu_classes" };

            var resources1 = new Resources(11, 57017, gpuClasses, 34792510764);

            var command = new List<string>() { "command" };

            var axiom = new LoggingAxiom3("host", "api_token", "dataset");

            var tagsItem = new DatadogTags3("name", "value");

            var tags = new List<DatadogTags3>() { tagsItem };

            var datadog = new LoggingDatadog3("host", "api_key", tags);

            var newRelic = new LoggingNewRelic3("host", "ingestion_key");

            var splunk = new LoggingSplunk3("host", "token");

            var tcp = new LoggingTcp3("host", 48471);

            var headersItem = new HttpHeaders4("name", "value");

            var headers = new List<HttpHeaders4>() { headersItem };

            var http = new LoggingHttp3("host", 488, HttpFormat3.Json,
            HttpCompression3.None, "user", "password", "path", headers);

            var logging = new UpdateContainerLogging(axiom, datadog, newRelic,
            splunk, tcp, http);

            var basic = new RegistryAuthenticationBasic2("username",
            "password");

            var gcpGcr = new RegistryAuthenticationGcpGcr2("service_key");

            var awsEcr = new RegistryAuthenticationAwsEcr2("access_key_id",
            "secret_access_key");

            var dockerHub = new RegistryAuthenticationDockerHub2("username",
            "personal_access_token");

            var gcpGar = new RegistryAuthenticationGcpGar2("service_key");

            var registryAuthentication = new
            UpdateContainerRegistryAuthentication(basic, gcpGcr, awsEcr,
            dockerHub, gcpGar);

            var container = new UpdateContainer("image", resources1, command,
            ContainerGroupPriority.High, new object(), logging,
            registryAuthentication);

            var countryCodes = new List<CountryCode>() { CountryCode.Af };

            var networking = new UpdateContainerGroupNetworking(29069);

            var tcp = new ContainerGroupProbeTcp(22350);

            var headersItem = new ContainerGroupProbeHttpHeaders2("name",
            "value");

            var headers = new List<ContainerGroupProbeHttpHeaders2>() {
            headersItem };

            var http = new ContainerGroupProbeHttp("path", 56884,
            ContainerProbeHttpScheme.Http, headers);

            var grpc = new ContainerGroupProbeGrpc("service", 47172);

            var command = new List<string>() { "command" };

            var exec = new ContainerGroupProbeExec(command);

            var livenessProbe = new ContainerGroupLivenessProbe(0, 10, 30, 1, 3,
            tcp, http, grpc, exec);

            var tcp = new ContainerGroupProbeTcp(22350);

            var headersItem = new ContainerGroupProbeHttpHeaders2("name",
            "value");

            var headers = new List<ContainerGroupProbeHttpHeaders2>() {
            headersItem };

            var http = new ContainerGroupProbeHttp("path", 56884,
            ContainerProbeHttpScheme.Http, headers);

            var grpc = new ContainerGroupProbeGrpc("service", 47172);

            var command = new List<string>() { "command" };

            var exec = new ContainerGroupProbeExec(command);

            var readinessProbe = new ContainerGroupReadinessProbe(0, 1, 1, 1, 3,
            tcp, http, grpc, exec);

            var tcp = new ContainerGroupProbeTcp(22350);

            var headersItem = new ContainerGroupProbeHttpHeaders2("name",
            "value");

            var headers = new List<ContainerGroupProbeHttpHeaders2>() {
            headersItem };

            var http = new ContainerGroupProbeHttp("path", 56884,
            ContainerProbeHttpScheme.Http, headers);

            var grpc = new ContainerGroupProbeGrpc("service", 47172);

            var command = new List<string>() { "command" };

            var exec = new ContainerGroupProbeExec(command);

            var startupProbe = new ContainerGroupStartupProbe(9, 3, 10, 2, 1200,
            tcp, http, grpc, exec);

            var queueAutoscaler = new QueueAutoscaler(26, 28, 42, 442, 3, 69);

            var input = new UpdateContainerGroup("AvVDo,", container, 160,
            countryCodes, networking, livenessProbe, readinessProbe,
            startupProbe, queueAutoscaler);


            var response = await
            client.ContainerGroups.UpdateContainerGroupAsync(input, "acme-corp",
            "dev-env", "deo5-1hcilmn8m1ouq40vp547cf-9sn3yad");


            Console.WriteLine(response);
          lang: C#
        - source: >-
            import {
              ContainerGroupLivenessProbe,
              ContainerGroupReadinessProbe,
              ContainerGroupStartupProbe,
              CountryCode,
              QueueAutoscaler,
              SaladCloudSdk,
              UpdateContainer,
              UpdateContainerGroup,
              UpdateContainerGroupNetworking,
            } from '@saladtechnologies-oss/salad-cloud-sdk';


            (async () => {
              const saladCloudSdk = new SaladCloudSdk({
                apiKey: 'YOUR_API_KEY',
              });

              const resources: Resources = {
                cpu: 12,
                memory: 29058,
                gpuClasses: ['gpu_classes'],
                storageAmount: 13215929602,
              };

              const containerGroupPriority = ContainerGroupPriority.HIGH;

              const loggingAxiom3: LoggingAxiom3 = {
                host: 'host',
                apiToken: 'api_token',
                dataset: 'dataset',
              };

              const datadogTags3: DatadogTags3 = {
                name: 'name',
                value: 'value',
              };

              const loggingDatadog3: LoggingDatadog3 = {
                host: 'host',
                apiKey: 'api_key',
                tags: [datadogTags3],
              };

              const loggingNewRelic3: LoggingNewRelic3 = {
                host: 'host',
                ingestionKey: 'ingestion_key',
              };

              const loggingSplunk3: LoggingSplunk3 = {
                host: 'host',
                token: 'token',
              };

              const loggingTcp3: LoggingTcp3 = {
                host: 'host',
                port: 26319,
              };

              const httpFormat3 = HttpFormat3.JSON;

              const httpHeaders4: HttpHeaders4 = {
                name: 'name',
                value: 'value',
              };

              const httpCompression3 = HttpCompression3.NONE;

              const loggingHttp3: LoggingHttp3 = {
                host: 'host',
                port: 16494,
                user: 'user',
                password: 'password',
                path: 'path',
                format: httpFormat3,
                headers: [httpHeaders4],
                compression: httpCompression3,
              };

              const updateContainerLogging: UpdateContainerLogging = {
                axiom: loggingAxiom3,
                datadog: loggingDatadog3,
                newRelic: loggingNewRelic3,
                splunk: loggingSplunk3,
                tcp: loggingTcp3,
                http: loggingHttp3,
              };

              const registryAuthenticationBasic2: RegistryAuthenticationBasic2 = {
                username: 'username',
                password: 'password',
              };

              const registryAuthenticationGcpGcr2: RegistryAuthenticationGcpGcr2 = {
                serviceKey: 'service_key',
              };

              const registryAuthenticationAwsEcr2: RegistryAuthenticationAwsEcr2 = {
                accessKeyId: 'access_key_id',
                secretAccessKey: 'secret_access_key',
              };

              const registryAuthenticationDockerHub2: RegistryAuthenticationDockerHub2 = {
                username: 'username',
                personalAccessToken: 'personal_access_token',
              };

              const registryAuthenticationGcpGar2: RegistryAuthenticationGcpGar2 = {
                serviceKey: 'service_key',
              };

              const updateContainerRegistryAuthentication: UpdateContainerRegistryAuthentication = {
                basic: registryAuthenticationBasic2,
                gcpGcr: registryAuthenticationGcpGcr2,
                awsEcr: registryAuthenticationAwsEcr2,
                dockerHub: registryAuthenticationDockerHub2,
                gcpGar: registryAuthenticationGcpGar2,
              };

              const updateContainer: UpdateContainer = {
                image: 'image',
                resources: resources,
                command: ['command'],
                priority: containerGroupPriority,
                environmentVariables: [],
                logging: updateContainerLogging,
                registryAuthentication: updateContainerRegistryAuthentication,
              };

              const countryCode = CountryCode.AF;

              const updateContainerGroupNetworking: UpdateContainerGroupNetworking = {
                port: 59913,
              };

              const containerGroupProbeTcp: ContainerGroupProbeTcp = {
                port: 9366,
              };

              const containerProbeHttpScheme = ContainerProbeHttpScheme.HTTP;

              const containerGroupProbeHttpHeaders2: ContainerGroupProbeHttpHeaders2 = {
                name: 'name',
                value: 'value',
              };

              const containerGroupProbeHttp: ContainerGroupProbeHttp = {
                path: 'path',
                port: 398,
                scheme: containerProbeHttpScheme,
                headers: [containerGroupProbeHttpHeaders2],
              };

              const containerGroupProbeGrpc: ContainerGroupProbeGrpc = {
                service: 'service',
                port: 23866,
              };

              const containerGroupProbeExec: ContainerGroupProbeExec = {
                command: ['command'],
              };

              const containerGroupLivenessProbe: ContainerGroupLivenessProbe = {
                tcp: containerGroupProbeTcp,
                http: containerGroupProbeHttp,
                grpc: containerGroupProbeGrpc,
                exec: containerGroupProbeExec,
                initialDelaySeconds: 1,
                periodSeconds: 10,
                timeoutSeconds: 30,
                successThreshold: 1,
                failureThreshold: 3,
              };

              const containerGroupReadinessProbe: ContainerGroupReadinessProbe = {
                tcp: containerGroupProbeTcp,
                http: containerGroupProbeHttp,
                grpc: containerGroupProbeGrpc,
                exec: containerGroupProbeExec,
                initialDelaySeconds: 8,
                periodSeconds: 1,
                timeoutSeconds: 1,
                successThreshold: 1,
                failureThreshold: 3,
              };

              const containerGroupStartupProbe: ContainerGroupStartupProbe = {
                tcp: containerGroupProbeTcp,
                http: containerGroupProbeHttp,
                grpc: containerGroupProbeGrpc,
                exec: containerGroupProbeExec,
                initialDelaySeconds: 2,
                periodSeconds: 3,
                timeoutSeconds: 10,
                successThreshold: 2,
                failureThreshold: 1200,
              };

              const queueAutoscaler: QueueAutoscaler = {
                minReplicas: 88,
                maxReplicas: 197,
                desiredQueueLength: 57,
                pollingPeriod: 1449,
                maxUpscalePerMinute: 85,
                maxDownscalePerMinute: 33,
              };

              const updateContainerGroup: UpdateContainerGroup = {
                displayName: 'iMQ',
                container: updateContainer,
                replicas: 97,
                countryCodes: [countryCode],
                networking: updateContainerGroupNetworking,
                livenessProbe: containerGroupLivenessProbe,
                readinessProbe: containerGroupReadinessProbe,
                startupProbe: containerGroupStartupProbe,
                queueAutoscaler: queueAutoscaler,
              };

              const { data } = await saladCloudSdk.containerGroups.updateContainerGroup(
                'acme-corp',
                'dev-env',
                'n6eqezp9',
                updateContainerGroup,
              );

              console.log(data);
            })();
          lang: TypeScript
        - source: |-
            from salad_cloud_sdk import SaladCloudSdk
            from salad_cloud_sdk.models import UpdateContainerGroup

            sdk = SaladCloudSdk(
                api_key="YOUR_API_KEY",
                api_key_header="YOUR_API_KEY_HEADER",
                timeout=10000
            )

            request_body = UpdateContainerGroup(
                display_name="AvVDo,",
                container={
                    "image": "image",
                    "resources": {
                        "cpu": 11,
                        "memory": 57017,
                        "gpu_classes": [
                            "gpu_classes"
                        ],
                        "storage_amount": 34792510764
                    },
                    "command": [
                        "command"
                    ],
                    "priority": "high",
                    "environment_variables": {},
                    "logging": {
                        "axiom": {
                            "host": "host",
                            "api_token": "api_token",
                            "dataset": "dataset"
                        },
                        "datadog": {
                            "host": "host",
                            "api_key": "api_key",
                            "tags": [
                                {
                                    "name": "name",
                                    "value": "value"
                                }
                            ]
                        },
                        "new_relic": {
                            "host": "host",
                            "ingestion_key": "ingestion_key"
                        },
                        "splunk": {
                            "host": "host",
                            "token": "token"
                        },
                        "tcp": {
                            "host": "host",
                            "port": 48471
                        },
                        "http": {
                            "host": "host",
                            "port": 488,
                            "user": "user",
                            "password": "password",
                            "path": "path",
                            "format": "json",
                            "headers": [
                                {
                                    "name": "name",
                                    "value": "value"
                                }
                            ],
                            "compression": "none"
                        }
                    },
                    "registry_authentication": {
                        "basic": {
                            "username": "username",
                            "password": "password"
                        },
                        "gcp_gcr": {
                            "service_key": "service_key"
                        },
                        "aws_ecr": {
                            "access_key_id": "access_key_id",
                            "secret_access_key": "secret_access_key"
                        },
                        "docker_hub": {
                            "username": "username",
                            "personal_access_token": "personal_access_token"
                        },
                        "gcp_gar": {
                            "service_key": "service_key"
                        }
                    }
                },
                replicas=160,
                country_codes=[
                    "af"
                ],
                networking={
                    "port": 29069
                },
                liveness_probe={
                    "tcp": {
                        "port": 22350
                    },
                    "http": {
                        "path": "path",
                        "port": 56884,
                        "scheme": "http",
                        "headers": [
                            {
                                "name": "name",
                                "value": "value"
                            }
                        ]
                    },
                    "grpc": {
                        "service": "service",
                        "port": 47172
                    },
                    "exec_": {
                        "command": [
                            "command"
                        ]
                    },
                    "initial_delay_seconds": 0,
                    "period_seconds": 10,
                    "timeout_seconds": 30,
                    "success_threshold": 1,
                    "failure_threshold": 3
                },
                readiness_probe={
                    "tcp": {
                        "port": 22350
                    },
                    "http": {
                        "path": "path",
                        "port": 56884,
                        "scheme": "http",
                        "headers": [
                            {
                                "name": "name",
                                "value": "value"
                            }
                        ]
                    },
                    "grpc": {
                        "service": "service",
                        "port": 47172
                    },
                    "exec_": {
                        "command": [
                            "command"
                        ]
                    },
                    "initial_delay_seconds": 0,
                    "period_seconds": 1,
                    "timeout_seconds": 1,
                    "success_threshold": 1,
                    "failure_threshold": 3
                },
                startup_probe={
                    "tcp": {
                        "port": 22350
                    },
                    "http": {
                        "path": "path",
                        "port": 56884,
                        "scheme": "http",
                        "headers": [
                            {
                                "name": "name",
                                "value": "value"
                            }
                        ]
                    },
                    "grpc": {
                        "service": "service",
                        "port": 47172
                    },
                    "exec_": {
                        "command": [
                            "command"
                        ]
                    },
                    "initial_delay_seconds": 9,
                    "period_seconds": 3,
                    "timeout_seconds": 10,
                    "success_threshold": 2,
                    "failure_threshold": 1200
                },
                queue_autoscaler={
                    "min_replicas": 26,
                    "max_replicas": 28,
                    "desired_queue_length": 42,
                    "polling_period": 442,
                    "max_upscale_per_minute": 3,
                    "max_downscale_per_minute": 69
                }
            )

            result = sdk.container_groups.update_container_group(
                request_body=request_body,
                organization_name="acme-corp",
                project_name="dev-env",
                container_group_name="deo5-1hcilmn8m1ouq40vp547cf-9sn3yad"
            )

            print(result)
          lang: Python
        - source: |-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/containergroups"
            )

            config := saladcloudsdkconfig.NewConfig()
            client := saladcloudsdk.NewSaladCloudSdk(config)


            resources := containergroups.Resources{}
            resources.SetCpu(int64(123))
            resources.SetMemory(int64(123))
            resources.SetGpuClasses([]string{})
            resources.SetStorageAmount(int64(123))

            containerGroupPriority := shared.CONTAINER_GROUP_PRIORITY_HIGH


            loggingAxiom3 := containergroups.LoggingAxiom3{}
            loggingAxiom3.SetHost("Host")
            loggingAxiom3.SetApiToken("ApiToken")
            loggingAxiom3.SetDataset("Dataset")


            datadogTags3 := containergroups.DatadogTags3{}
            datadogTags3.SetName("Name")
            datadogTags3.SetValue("Value")

            loggingDatadog3 := containergroups.LoggingDatadog3{}
            loggingDatadog3.SetHost("Host")
            loggingDatadog3.SetApiKey("ApiKey")
            loggingDatadog3.SetTags([]containergroups.DatadogTags3{datadogTags3})


            loggingNewRelic3 := containergroups.LoggingNewRelic3{}
            loggingNewRelic3.SetHost("Host")
            loggingNewRelic3.SetIngestionKey("IngestionKey")


            loggingSplunk3 := containergroups.LoggingSplunk3{}
            loggingSplunk3.SetHost("Host")
            loggingSplunk3.SetToken("Token")


            loggingTcp3 := containergroups.LoggingTcp3{}
            loggingTcp3.SetHost("Host")
            loggingTcp3.SetPort(int64(123))

            httpFormat3 := containergroups.HTTP_FORMAT3_JSON


            httpHeaders4 := containergroups.HttpHeaders4{}
            httpHeaders4.SetName("Name")
            httpHeaders4.SetValue("Value")

            httpCompression3 := containergroups.HTTP_COMPRESSION3_NONE

            loggingHttp3 := containergroups.LoggingHttp3{}
            loggingHttp3.SetHost("Host")
            loggingHttp3.SetPort(int64(123))
            loggingHttp3.SetUser("User")
            loggingHttp3.SetPassword("Password")
            loggingHttp3.SetPath("Path")
            loggingHttp3.SetFormat(httpFormat3)
            loggingHttp3.SetHeaders([]containergroups.HttpHeaders4{httpHeaders4})
            loggingHttp3.SetCompression(httpCompression3)

            updateContainerLogging := containergroups.UpdateContainerLogging{}
            updateContainerLogging.SetAxiom(loggingAxiom3)
            updateContainerLogging.SetDatadog(loggingDatadog3)
            updateContainerLogging.SetNewRelic(loggingNewRelic3)
            updateContainerLogging.SetSplunk(loggingSplunk3)
            updateContainerLogging.SetTcp(loggingTcp3)
            updateContainerLogging.SetHttp(loggingHttp3)


            registryAuthenticationBasic2 := containergroups.RegistryAuthenticationBasic2{}
            registryAuthenticationBasic2.SetUsername("Username")
            registryAuthenticationBasic2.SetPassword("Password")


            registryAuthenticationGcpGcr2 := containergroups.RegistryAuthenticationGcpGcr2{}
            registryAuthenticationGcpGcr2.SetServiceKey("ServiceKey")


            registryAuthenticationAwsEcr2 := containergroups.RegistryAuthenticationAwsEcr2{}
            registryAuthenticationAwsEcr2.SetAccessKeyId("AccessKeyId")
            registryAuthenticationAwsEcr2.SetSecretAccessKey("SecretAccessKey")


            registryAuthenticationDockerHub2 := containergroups.RegistryAuthenticationDockerHub2{}
            registryAuthenticationDockerHub2.SetUsername("Username")
            registryAuthenticationDockerHub2.SetPersonalAccessToken("PersonalAccessToken")


            registryAuthenticationGcpGar2 := containergroups.RegistryAuthenticationGcpGar2{}
            registryAuthenticationGcpGar2.SetServiceKey("ServiceKey")

            updateContainerRegistryAuthentication := containergroups.UpdateContainerRegistryAuthentication{}
            updateContainerRegistryAuthentication.SetBasic(registryAuthenticationBasic2)
            updateContainerRegistryAuthentication.SetGcpGcr(registryAuthenticationGcpGcr2)
            updateContainerRegistryAuthentication.SetAwsEcr(registryAuthenticationAwsEcr2)
            updateContainerRegistryAuthentication.SetDockerHub(registryAuthenticationDockerHub2)
            updateContainerRegistryAuthentication.SetGcpGar(registryAuthenticationGcpGar2)

            updateContainer := containergroups.UpdateContainer{}
            updateContainer.SetImage("Image")
            updateContainer.SetResources(resources)
            updateContainer.SetCommand([]string{})
            updateContainer.SetPriority(containerGroupPriority)
            updateContainer.SetEnvironmentVariables(map[string]string{})
            updateContainer.SetLogging(updateContainerLogging)
            updateContainer.SetRegistryAuthentication(updateContainerRegistryAuthentication)

            countryCode := shared.COUNTRY_CODE_AF


            updateContainerGroupNetworking := containergroups.UpdateContainerGroupNetworking{}
            updateContainerGroupNetworking.SetPort(int64(123))


            containerGroupProbeTcp := shared.ContainerGroupProbeTcp{}
            containerGroupProbeTcp.SetPort(int64(123))

            containerProbeHttpScheme := shared.CONTAINER_PROBE_HTTP_SCHEME_HTTP


            containerGroupProbeHttpHeaders2 := shared.ContainerGroupProbeHttpHeaders2{}
            containerGroupProbeHttpHeaders2.SetName("Name")
            containerGroupProbeHttpHeaders2.SetValue("Value")

            containerGroupProbeHttp := shared.ContainerGroupProbeHttp{}
            containerGroupProbeHttp.SetPath("Path")
            containerGroupProbeHttp.SetPort(int64(123))
            containerGroupProbeHttp.SetScheme(containerProbeHttpScheme)
            containerGroupProbeHttp.SetHeaders([]shared.ContainerGroupProbeHttpHeaders2{containerGroupProbeHttpHeaders2})


            containerGroupProbeGrpc := shared.ContainerGroupProbeGrpc{}
            containerGroupProbeGrpc.SetService("Service")
            containerGroupProbeGrpc.SetPort(int64(123))


            containerGroupProbeExec := shared.ContainerGroupProbeExec{}
            containerGroupProbeExec.SetCommand([]string{})

            containerGroupLivenessProbe := shared.ContainerGroupLivenessProbe{}
            containerGroupLivenessProbe.SetTcp(containerGroupProbeTcp)
            containerGroupLivenessProbe.SetHttp(containerGroupProbeHttp)
            containerGroupLivenessProbe.SetGrpc(containerGroupProbeGrpc)
            containerGroupLivenessProbe.SetExec(containerGroupProbeExec)
            containerGroupLivenessProbe.SetInitialDelaySeconds(int64(123))
            containerGroupLivenessProbe.SetPeriodSeconds(int64(123))
            containerGroupLivenessProbe.SetTimeoutSeconds(int64(123))
            containerGroupLivenessProbe.SetSuccessThreshold(int64(123))
            containerGroupLivenessProbe.SetFailureThreshold(int64(123))


            containerGroupProbeTcp := shared.ContainerGroupProbeTcp{}
            containerGroupProbeTcp.SetPort(int64(123))

            containerProbeHttpScheme := shared.CONTAINER_PROBE_HTTP_SCHEME_HTTP


            containerGroupProbeHttpHeaders2 := shared.ContainerGroupProbeHttpHeaders2{}
            containerGroupProbeHttpHeaders2.SetName("Name")
            containerGroupProbeHttpHeaders2.SetValue("Value")

            containerGroupProbeHttp := shared.ContainerGroupProbeHttp{}
            containerGroupProbeHttp.SetPath("Path")
            containerGroupProbeHttp.SetPort(int64(123))
            containerGroupProbeHttp.SetScheme(containerProbeHttpScheme)
            containerGroupProbeHttp.SetHeaders([]shared.ContainerGroupProbeHttpHeaders2{containerGroupProbeHttpHeaders2})


            containerGroupProbeGrpc := shared.ContainerGroupProbeGrpc{}
            containerGroupProbeGrpc.SetService("Service")
            containerGroupProbeGrpc.SetPort(int64(123))


            containerGroupProbeExec := shared.ContainerGroupProbeExec{}
            containerGroupProbeExec.SetCommand([]string{})

            containerGroupReadinessProbe := shared.ContainerGroupReadinessProbe{}
            containerGroupReadinessProbe.SetTcp(containerGroupProbeTcp)
            containerGroupReadinessProbe.SetHttp(containerGroupProbeHttp)
            containerGroupReadinessProbe.SetGrpc(containerGroupProbeGrpc)
            containerGroupReadinessProbe.SetExec(containerGroupProbeExec)
            containerGroupReadinessProbe.SetInitialDelaySeconds(int64(123))
            containerGroupReadinessProbe.SetPeriodSeconds(int64(123))
            containerGroupReadinessProbe.SetTimeoutSeconds(int64(123))
            containerGroupReadinessProbe.SetSuccessThreshold(int64(123))
            containerGroupReadinessProbe.SetFailureThreshold(int64(123))


            containerGroupProbeTcp := shared.ContainerGroupProbeTcp{}
            containerGroupProbeTcp.SetPort(int64(123))

            containerProbeHttpScheme := shared.CONTAINER_PROBE_HTTP_SCHEME_HTTP


            containerGroupProbeHttpHeaders2 := shared.ContainerGroupProbeHttpHeaders2{}
            containerGroupProbeHttpHeaders2.SetName("Name")
            containerGroupProbeHttpHeaders2.SetValue("Value")

            containerGroupProbeHttp := shared.ContainerGroupProbeHttp{}
            containerGroupProbeHttp.SetPath("Path")
            containerGroupProbeHttp.SetPort(int64(123))
            containerGroupProbeHttp.SetScheme(containerProbeHttpScheme)
            containerGroupProbeHttp.SetHeaders([]shared.ContainerGroupProbeHttpHeaders2{containerGroupProbeHttpHeaders2})


            containerGroupProbeGrpc := shared.ContainerGroupProbeGrpc{}
            containerGroupProbeGrpc.SetService("Service")
            containerGroupProbeGrpc.SetPort(int64(123))


            containerGroupProbeExec := shared.ContainerGroupProbeExec{}
            containerGroupProbeExec.SetCommand([]string{})

            containerGroupStartupProbe := shared.ContainerGroupStartupProbe{}
            containerGroupStartupProbe.SetTcp(containerGroupProbeTcp)
            containerGroupStartupProbe.SetHttp(containerGroupProbeHttp)
            containerGroupStartupProbe.SetGrpc(containerGroupProbeGrpc)
            containerGroupStartupProbe.SetExec(containerGroupProbeExec)
            containerGroupStartupProbe.SetInitialDelaySeconds(int64(123))
            containerGroupStartupProbe.SetPeriodSeconds(int64(123))
            containerGroupStartupProbe.SetTimeoutSeconds(int64(123))
            containerGroupStartupProbe.SetSuccessThreshold(int64(123))
            containerGroupStartupProbe.SetFailureThreshold(int64(123))


            queueAutoscaler := shared.QueueAutoscaler{}
            queueAutoscaler.SetMinReplicas(int64(123))
            queueAutoscaler.SetMaxReplicas(int64(123))
            queueAutoscaler.SetDesiredQueueLength(int64(123))
            queueAutoscaler.SetPollingPeriod(int64(123))
            queueAutoscaler.SetMaxUpscalePerMinute(int64(123))
            queueAutoscaler.SetMaxDownscalePerMinute(int64(123))

            request := containergroups.UpdateContainerGroup{}
            request.SetDisplayName("DisplayName")
            request.SetContainer(updateContainer)
            request.SetReplicas(int64(123))
            request.SetCountryCodes([]shared.CountryCode{countryCode})
            request.SetNetworking(updateContainerGroupNetworking)
            request.SetLivenessProbe(containerGroupLivenessProbe)
            request.SetReadinessProbe(containerGroupReadinessProbe)
            request.SetStartupProbe(containerGroupStartupProbe)
            request.SetQueueAutoscaler(queueAutoscaler)

            response, err := client.ContainerGroups.UpdateContainerGroup(context.Background(), "organizationName", "projectName", "containerGroupName", request)
            if err != nil {
              panic(err)
            }

            fmt.Println(response)
          lang: Go
        - source: >-
            import com.salad.cloud.sdk.SaladCloudSdk;

            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;

            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;

            import com.salad.cloud.sdk.models.ContainerGroup;

            import com.salad.cloud.sdk.models.ContainerGroupLivenessProbe;

            import com.salad.cloud.sdk.models.ContainerGroupPriority;

            import com.salad.cloud.sdk.models.ContainerGroupProbeExec;

            import com.salad.cloud.sdk.models.ContainerGroupProbeGrpc;

            import com.salad.cloud.sdk.models.ContainerGroupProbeHttp;

            import com.salad.cloud.sdk.models.ContainerGroupProbeHttpHeaders2;

            import com.salad.cloud.sdk.models.ContainerGroupProbeTcp;

            import com.salad.cloud.sdk.models.ContainerGroupReadinessProbe;

            import com.salad.cloud.sdk.models.ContainerGroupStartupProbe;

            import com.salad.cloud.sdk.models.ContainerProbeHttpScheme;

            import com.salad.cloud.sdk.models.CountryCode;

            import com.salad.cloud.sdk.models.DatadogTags3;

            import com.salad.cloud.sdk.models.HttpCompression3;

            import com.salad.cloud.sdk.models.HttpFormat3;

            import com.salad.cloud.sdk.models.HttpHeaders4;

            import com.salad.cloud.sdk.models.LoggingAxiom3;

            import com.salad.cloud.sdk.models.LoggingDatadog3;

            import com.salad.cloud.sdk.models.LoggingHttp3;

            import com.salad.cloud.sdk.models.LoggingNewRelic3;

            import com.salad.cloud.sdk.models.LoggingSplunk3;

            import com.salad.cloud.sdk.models.LoggingTcp3;

            import com.salad.cloud.sdk.models.QueueAutoscaler;

            import com.salad.cloud.sdk.models.RegistryAuthenticationAwsEcr2;

            import com.salad.cloud.sdk.models.RegistryAuthenticationBasic2;

            import com.salad.cloud.sdk.models.RegistryAuthenticationDockerHub2;

            import com.salad.cloud.sdk.models.RegistryAuthenticationGcpGar2;

            import com.salad.cloud.sdk.models.RegistryAuthenticationGcpGcr2;

            import com.salad.cloud.sdk.models.Resources;

            import com.salad.cloud.sdk.models.UpdateContainer;

            import com.salad.cloud.sdk.models.UpdateContainerGroup;

            import com.salad.cloud.sdk.models.UpdateContainerGroupNetworking;

            import com.salad.cloud.sdk.models.UpdateContainerLogging;

            import
            com.salad.cloud.sdk.models.UpdateContainerRegistryAuthentication;

            import java.util.Arrays;

            import java.util.HashMap;

            import java.util.List;


            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                List<String> gpuClasses = Arrays.asList("gpu_classes");

                Resources resources = Resources
                  .builder()
                  .cpu(11L)
                  .memory(57017L)
                  .gpuClasses(gpuClasses)
                  .storageAmount(34792510764L)
                  .build();

                List<String> command = Arrays.asList("command");

                LoggingAxiom3 loggingAxiom3 = LoggingAxiom3.builder().host("host").apiToken("api_token").dataset("dataset").build();

                DatadogTags3 datadogTags3 = DatadogTags3.builder().name("name").value("value").build();

                List<DatadogTags3> tags = Arrays.asList(datadogTags3);

                LoggingDatadog3 loggingDatadog3 = LoggingDatadog3.builder().host("host").apiKey("api_key").tags(tags).build();

                LoggingNewRelic3 loggingNewRelic3 = LoggingNewRelic3.builder().host("host").ingestionKey("ingestion_key").build();

                LoggingSplunk3 loggingSplunk3 = LoggingSplunk3.builder().host("host").token("token").build();

                LoggingTcp3 loggingTcp3 = LoggingTcp3.builder().host("host").port(48471L).build();

                HttpHeaders4 httpHeaders4 = HttpHeaders4.builder().name("name").value("value").build();

                List<HttpHeaders4> headers = Arrays.asList(httpHeaders4);

                LoggingHttp3 loggingHttp3 = LoggingHttp3
                  .builder()
                  .host("host")
                  .port(488L)
                  .user("user")
                  .password("password")
                  .path("path")
                  .format(HttpFormat3.JSON)
                  .headers(headers)
                  .compression(HttpCompression3.NONE)
                  .build();

                UpdateContainerLogging updateContainerLogging = UpdateContainerLogging
                  .builder()
                  .axiom(loggingAxiom3)
                  .datadog(loggingDatadog3)
                  .newRelic(loggingNewRelic3)
                  .splunk(loggingSplunk3)
                  .tcp(loggingTcp3)
                  .http(loggingHttp3)
                  .build();

                RegistryAuthenticationBasic2 registryAuthenticationBasic2 = RegistryAuthenticationBasic2
                  .builder()
                  .username("username")
                  .password("password")
                  .build();

                RegistryAuthenticationGcpGcr2 registryAuthenticationGcpGcr2 = RegistryAuthenticationGcpGcr2
                  .builder()
                  .serviceKey("service_key")
                  .build();

                RegistryAuthenticationAwsEcr2 registryAuthenticationAwsEcr2 = RegistryAuthenticationAwsEcr2
                  .builder()
                  .accessKeyId("access_key_id")
                  .secretAccessKey("secret_access_key")
                  .build();

                RegistryAuthenticationDockerHub2 registryAuthenticationDockerHub2 = RegistryAuthenticationDockerHub2
                  .builder()
                  .username("username")
                  .personalAccessToken("personal_access_token")
                  .build();

                RegistryAuthenticationGcpGar2 registryAuthenticationGcpGar2 = RegistryAuthenticationGcpGar2
                  .builder()
                  .serviceKey("service_key")
                  .build();

                UpdateContainerRegistryAuthentication updateContainerRegistryAuthentication = UpdateContainerRegistryAuthentication
                  .builder()
                  .basic(registryAuthenticationBasic2)
                  .gcpGcr(registryAuthenticationGcpGcr2)
                  .awsEcr(registryAuthenticationAwsEcr2)
                  .dockerHub(registryAuthenticationDockerHub2)
                  .gcpGar(registryAuthenticationGcpGar2)
                  .build();

                UpdateContainer updateContainer = UpdateContainer
                  .builder()
                  .image("image")
                  .resources(resources)
                  .command(command)
                  .priority(ContainerGroupPriority.HIGH)
                  .environmentVariables(new HashMap())
                  .logging(updateContainerLogging)
                  .registryAuthentication(updateContainerRegistryAuthentication)
                  .build();

                List<CountryCode> countryCodes = Arrays.asList(CountryCode.AF);

                UpdateContainerGroupNetworking updateContainerGroupNetworking = UpdateContainerGroupNetworking
                  .builder()
                  .port(29069L)
                  .build();

                ContainerGroupProbeTcp containerGroupProbeTcp = ContainerGroupProbeTcp.builder().port(22350L).build();

                ContainerGroupProbeHttpHeaders2 containerGroupProbeHttpHeaders2 = ContainerGroupProbeHttpHeaders2
                  .builder()
                  .name("name")
                  .value("value")
                  .build();

                List<ContainerGroupProbeHttpHeaders2> headers = Arrays.asList(containerGroupProbeHttpHeaders2);

                ContainerGroupProbeHttp containerGroupProbeHttp = ContainerGroupProbeHttp
                  .builder()
                  .path("path")
                  .port(56884L)
                  .scheme(ContainerProbeHttpScheme.HTTP)
                  .headers(headers)
                  .build();

                ContainerGroupProbeGrpc containerGroupProbeGrpc = ContainerGroupProbeGrpc
                  .builder()
                  .service("service")
                  .port(47172L)
                  .build();

                List<String> command = Arrays.asList("command");

                ContainerGroupProbeExec containerGroupProbeExec = ContainerGroupProbeExec.builder().command(command).build();

                ContainerGroupLivenessProbe containerGroupLivenessProbe = ContainerGroupLivenessProbe
                  .builder()
                  .tcp(containerGroupProbeTcp)
                  .http(containerGroupProbeHttp)
                  .grpc(containerGroupProbeGrpc)
                  .exec(containerGroupProbeExec)
                  .initialDelaySeconds(0L)
                  .periodSeconds(10L)
                  .timeoutSeconds(30L)
                  .successThreshold(1L)
                  .failureThreshold(3L)
                  .build();

                ContainerGroupReadinessProbe containerGroupReadinessProbe = ContainerGroupReadinessProbe
                  .builder()
                  .tcp(containerGroupProbeTcp)
                  .http(containerGroupProbeHttp)
                  .grpc(containerGroupProbeGrpc)
                  .exec(containerGroupProbeExec)
                  .initialDelaySeconds(0L)
                  .periodSeconds(1L)
                  .timeoutSeconds(1L)
                  .successThreshold(1L)
                  .failureThreshold(3L)
                  .build();

                ContainerGroupStartupProbe containerGroupStartupProbe = ContainerGroupStartupProbe
                  .builder()
                  .tcp(containerGroupProbeTcp)
                  .http(containerGroupProbeHttp)
                  .grpc(containerGroupProbeGrpc)
                  .exec(containerGroupProbeExec)
                  .initialDelaySeconds(9L)
                  .periodSeconds(3L)
                  .timeoutSeconds(10L)
                  .successThreshold(2L)
                  .failureThreshold(1200L)
                  .build();

                QueueAutoscaler queueAutoscaler = QueueAutoscaler
                  .builder()
                  .minReplicas(26L)
                  .maxReplicas(28L)
                  .desiredQueueLength(42L)
                  .pollingPeriod(442L)
                  .maxUpscalePerMinute(3L)
                  .maxDownscalePerMinute(69L)
                  .build();

                UpdateContainerGroup updateContainerGroup = UpdateContainerGroup
                  .builder()
                  .displayName("AvVDo,")
                  .container(updateContainer)
                  .replicas(160L)
                  .countryCodes(countryCodes)
                  .networking(updateContainerGroupNetworking)
                  .livenessProbe(containerGroupLivenessProbe)
                  .readinessProbe(containerGroupReadinessProbe)
                  .startupProbe(containerGroupStartupProbe)
                  .queueAutoscaler(queueAutoscaler)
                  .build();

                ContainerGroup response = saladCloudSdk.containerGroups.updateContainerGroup(
                  "acme-corp",
                  "dev-env",
                  "deo5-1hcilmn8m1ouq40vp547cf-9sn3yad",
                  updateContainerGroup
                );

                System.out.println(response);
              }
            }
          lang: Java
    delete:
      operationId: delete_container_group
      summary: Delete Container Group
      description: Deletes a container group
      responses:
        "202":
          $ref: "#/components/responses/DeleteContainerGroup"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - container_groups
      x-liblab-resource: ContainerGroup#Delete
      x-codeSamples:
        - source: >-
            using Salad.Cloud.SDK;

            using Salad.Cloud.SDK.Config;

            using Environment = Salad.Cloud.SDK.Http.Environment;


            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };


            var client = new SaladCloudSdkClient(config);


            await client.ContainerGroups.DeleteContainerGroupAsync("acme-corp",
            "dev-env", "deo5-1hcilmn8m1ouq40vp547cf-9sn3yad");
          lang: C#
        - source: >-
            import { SaladCloudSdk } from
            '@saladtechnologies-oss/salad-cloud-sdk';


            (async () => {
              const saladCloudSdk = new SaladCloudSdk({
                apiKey: 'YOUR_API_KEY',
              });

              const { data } = await saladCloudSdk.containerGroups.deleteContainerGroup('acme-corp', 'dev-env', 'n6eqezp9');

              console.log(data);
            })();
          lang: TypeScript
        - source: |-
            from salad_cloud_sdk import SaladCloudSdk

            sdk = SaladCloudSdk(
                api_key="YOUR_API_KEY",
                api_key_header="YOUR_API_KEY_HEADER",
                timeout=10000
            )

            result = sdk.container_groups.delete_container_group(
                organization_name="acme-corp",
                project_name="dev-env",
                container_group_name="deo5-1hcilmn8m1ouq40vp547cf-9sn3yad"
            )

            print(result)
          lang: Python
        - source: >-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
            )


            config := saladcloudsdkconfig.NewConfig()

            client := saladcloudsdk.NewSaladCloudSdk(config)


            response, err :=
            client.ContainerGroups.DeleteContainerGroup(context.Background(),
            "organizationName", "projectName", "containerGroupName")

            if err != nil {
              panic(err)
            }


            fmt.Println(response)
          lang: Go
        - source: >-
            import com.salad.cloud.sdk.SaladCloudSdk;

            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;

            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;


            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                saladCloudSdk.containerGroups.deleteContainerGroup("acme-corp", "dev-env", "deo5-1hcilmn8m1ouq40vp547cf-9sn3yad");
              }
            }
          lang: Java
  /organizations/{organization_name}/projects/{project_name}/containers/{container_group_name}/errors:
    summary: Workload Errors
    description: Operations for workload errors
    parameters:
      - $ref: "#/components/parameters/organization_name"
      - $ref: "#/components/parameters/project_name"
      - $ref: "#/components/parameters/container_group_name"
    get:
      operationId: get_workload_errors
      summary: Get Workload Errors
      description: Gets the workload errors. This has been deprecated and will be
        replaced by the new System Logs endpoint. See `/system-logs`.
      responses:
        "200":
          $ref: "#/components/responses/ListWorkloadErrors"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      deprecated: true
      tags:
        - workload_errors
      x-codeSamples:
        - source: >-
            using Salad.Cloud.SDK;

            using Salad.Cloud.SDK.Config;

            using Environment = Salad.Cloud.SDK.Http.Environment;


            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };


            var client = new SaladCloudSdkClient(config);


            var response = await
            client.WorkloadErrors.GetWorkloadErrorsAsync("acme-corp", "dev-env",
            "o6n7tvx-tc09f1h");


            Console.WriteLine(response);
          lang: C#
        - source: >-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
            )


            config := saladcloudsdkconfig.NewConfig()

            client := saladcloudsdk.NewSaladCloudSdk(config)


            response, err :=
            client.WorkloadErrors.GetWorkloadErrors(context.Background(),
            "organizationName", "projectName", "containerGroupName")

            if err != nil {
              panic(err)
            }


            fmt.Println(response)
          lang: Go
        - source: >-
            import com.salad.cloud.sdk.SaladCloudSdk;

            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;

            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;

            import com.salad.cloud.sdk.models.WorkloadErrorList;


            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                WorkloadErrorList response = saladCloudSdk.workloadErrors.getWorkloadErrors(
                  "acme-corp",
                  "dev-env",
                  "o6n7tvx-tc09f1h"
                );

                System.out.println(response);
              }
            }
          lang: Java
  /organizations/{organization_name}/projects/{project_name}/containers/{container_group_name}/system-logs:
    summary: System Logs
    description: Operations for System Logs
    parameters:
      - $ref: "#/components/parameters/organization_name"
      - $ref: "#/components/parameters/project_name"
      - $ref: "#/components/parameters/container_group_name"
    get:
      operationId: get_system_logs
      summary: Get System Logs
      description: Gets the System Logs
      responses:
        "200":
          $ref: "#/components/responses/ListSystemLogs"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - system_logs
  /organizations/{organization_name}/projects/{project_name}/containers/{container_group_name}/start:
    summary: Container Group
    description: Operations for a container group
    parameters:
      - $ref: "#/components/parameters/organization_name"
      - $ref: "#/components/parameters/project_name"
      - $ref: "#/components/parameters/container_group_name"
    post:
      operationId: start_container_group
      summary: Start Container Group
      description: Starts a container group
      responses:
        "202":
          $ref: "#/components/responses/StartContainerGroup"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - container_groups
      x-codeSamples:
        - source: >-
            using Salad.Cloud.SDK;

            using Salad.Cloud.SDK.Config;

            using Environment = Salad.Cloud.SDK.Http.Environment;


            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };


            var client = new SaladCloudSdkClient(config);


            await client.ContainerGroups.StartContainerGroupAsync("acme-corp",
            "dev-env", "ldlzsuvite9");
          lang: C#
        - source: >-
            import { SaladCloudSdk } from
            '@saladtechnologies-oss/salad-cloud-sdk';


            (async () => {
              const saladCloudSdk = new SaladCloudSdk({
                apiKey: 'YOUR_API_KEY',
              });

              const { data } = await saladCloudSdk.containerGroups.startContainerGroup(
                'acme-corp',
                'dev-env',
                'thlsybcgrlw5vvch4r1nbkygjtd6c-o-5jwj2ocq-dvad',
              );

              console.log(data);
            })();
          lang: TypeScript
        - source: |-
            from salad_cloud_sdk import SaladCloudSdk

            sdk = SaladCloudSdk(
                api_key="YOUR_API_KEY",
                api_key_header="YOUR_API_KEY_HEADER",
                timeout=10000
            )

            result = sdk.container_groups.start_container_group(
                organization_name="acme-corp",
                project_name="dev-env",
                container_group_name="ldlzsuvite9"
            )

            print(result)
          lang: Python
        - source: >-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
            )


            config := saladcloudsdkconfig.NewConfig()

            client := saladcloudsdk.NewSaladCloudSdk(config)


            response, err :=
            client.ContainerGroups.StartContainerGroup(context.Background(),
            "organizationName", "projectName", "containerGroupName")

            if err != nil {
              panic(err)
            }


            fmt.Println(response)
          lang: Go
        - source: >-
            import com.salad.cloud.sdk.SaladCloudSdk;

            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;

            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;


            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                saladCloudSdk.containerGroups.startContainerGroup("acme-corp", "dev-env", "ldlzsuvite9");
              }
            }
          lang: Java
  /organizations/{organization_name}/projects/{project_name}/containers/{container_group_name}/stop:
    summary: Container Group
    description: Operations for a container group
    parameters:
      - $ref: "#/components/parameters/organization_name"
      - $ref: "#/components/parameters/project_name"
      - $ref: "#/components/parameters/container_group_name"
    post:
      operationId: stop_container_group
      summary: Stop Container Group
      description: Stops a container group
      responses:
        "202":
          $ref: "#/components/responses/StopContainerGroup"
        "400":
          $ref: "#/components/responses/400"
        "403":
          $ref: "#/components/responses/403"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - container_groups
      x-codeSamples:
        - source: >-
            using Salad.Cloud.SDK;

            using Salad.Cloud.SDK.Config;

            using Environment = Salad.Cloud.SDK.Http.Environment;


            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };


            var client = new SaladCloudSdkClient(config);


            await client.ContainerGroups.StopContainerGroupAsync("acme-corp",
            "dev-env", "x5pfkx3zz5np0cn9u94xdcf5g5w9-1");
          lang: C#
        - source: >-
            import { SaladCloudSdk } from
            '@saladtechnologies-oss/salad-cloud-sdk';


            (async () => {
              const saladCloudSdk = new SaladCloudSdk({
                apiKey: 'YOUR_API_KEY',
              });

              const { data } = await saladCloudSdk.containerGroups.stopContainerGroup(
                'acme-corp',
                'dev-env',
                'ecp1l-tkh9w1nv5mu1-9nad5ncpxu9ccs7p0whu98gpr-228',
              );

              console.log(data);
            })();
          lang: TypeScript
        - source: |-
            from salad_cloud_sdk import SaladCloudSdk

            sdk = SaladCloudSdk(
                api_key="YOUR_API_KEY",
                api_key_header="YOUR_API_KEY_HEADER",
                timeout=10000
            )

            result = sdk.container_groups.stop_container_group(
                organization_name="acme-corp",
                project_name="dev-env",
                container_group_name="x5pfkx3zz5np0cn9u94xdcf5g5w9-1"
            )

            print(result)
          lang: Python
        - source: >-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
            )


            config := saladcloudsdkconfig.NewConfig()

            client := saladcloudsdk.NewSaladCloudSdk(config)


            response, err :=
            client.ContainerGroups.StopContainerGroup(context.Background(),
            "organizationName", "projectName", "containerGroupName")

            if err != nil {
              panic(err)
            }


            fmt.Println(response)
          lang: Go
        - source: >-
            import com.salad.cloud.sdk.SaladCloudSdk;

            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;

            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;


            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                saladCloudSdk.containerGroups.stopContainerGroup("acme-corp", "dev-env", "x5pfkx3zz5np0cn9u94xdcf5g5w9-1");
              }
            }
          lang: Java
  /organizations/{organization_name}/projects/{project_name}/containers/{container_group_name}/instances:
    summary: Container Group Instances
    description: Operations for container group instances
    parameters:
      - $ref: "#/components/parameters/organization_name"
      - $ref: "#/components/parameters/project_name"
      - $ref: "#/components/parameters/container_group_name"
    get:
      operationId: list_container_group_instances
      summary: List Container Group Instances
      description: Gets the list of container group instances
      responses:
        "200":
          $ref: "#/components/responses/ListContainerGroupInstances"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - container_groups
      x-codeSamples:
        - source: >-
            using Salad.Cloud.SDK;

            using Salad.Cloud.SDK.Config;

            using Environment = Salad.Cloud.SDK.Http.Environment;


            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };


            var client = new SaladCloudSdkClient(config);


            var response = await
            client.ContainerGroups.ListContainerGroupInstancesAsync("acme-corp",
            "dev-env", "o-41alirjhsw60");


            Console.WriteLine(response);
          lang: C#
        - source: >-
            import { SaladCloudSdk } from
            '@saladtechnologies-oss/salad-cloud-sdk';


            (async () => {
              const saladCloudSdk = new SaladCloudSdk({
                apiKey: 'YOUR_API_KEY',
              });

              const { data } = await saladCloudSdk.containerGroups.listContainerGroupInstances(
                'acme-corp',
                'dev-env',
                'znynn9io8wrozbled',
              );

              console.log(data);
            })();
          lang: TypeScript
        - source: |-
            from salad_cloud_sdk import SaladCloudSdk

            sdk = SaladCloudSdk(
                api_key="YOUR_API_KEY",
                api_key_header="YOUR_API_KEY_HEADER",
                timeout=10000
            )

            result = sdk.container_groups.list_container_group_instances(
                organization_name="acme-corp",
                project_name="dev-env",
                container_group_name="o-41alirjhsw60"
            )

            print(result)
          lang: Python
        - source: |-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
            )

            config := saladcloudsdkconfig.NewConfig()
            client := saladcloudsdk.NewSaladCloudSdk(config)

            response, err := client.ContainerGroups.ListContainerGroupInstances(context.Background(), "organizationName", "projectName", "containerGroupName")
            if err != nil {
              panic(err)
            }

            fmt.Println(response)
          lang: Go
        - source: >-
            import com.salad.cloud.sdk.SaladCloudSdk;

            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;

            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;

            import com.salad.cloud.sdk.models.ContainerGroupInstances;


            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                ContainerGroupInstances response = saladCloudSdk.containerGroups.listContainerGroupInstances(
                  "acme-corp",
                  "dev-env",
                  "o-41alirjhsw60"
                );

                System.out.println(response);
              }
            }
          lang: Java
  /organizations/{organization_name}/projects/{project_name}/containers/{container_group_name}/instances/{container_group_instance_id}:
    summary: Container Group Instance
    description: Operations for a container group instance
    parameters:
      - $ref: "#/components/parameters/organization_name"
      - $ref: "#/components/parameters/project_name"
      - $ref: "#/components/parameters/container_group_name"
      - $ref: "#/components/parameters/container_group_instance_id"
    get:
      operationId: get_container_group_instance
      summary: Get Container Group Instance
      description: Gets a container group instance
      responses:
        "202":
          $ref: "#/components/responses/GetContainerGroupInstance"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - container_groups
      x-codeSamples:
        - source: >-
            using Salad.Cloud.SDK;

            using Salad.Cloud.SDK.Config;

            using Environment = Salad.Cloud.SDK.Http.Environment;


            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };


            var client = new SaladCloudSdkClient(config);


            var response = await
            client.ContainerGroups.GetContainerGroupInstanceAsync("acme-corp",
            "dev-env", "djh4s8hz0soygun3m687oust14ot1pk0icevxf5izkd-rds",
            "container_group_instance_id");


            Console.WriteLine(response);
          lang: C#
        - source: >-
            import { SaladCloudSdk } from
            '@saladtechnologies-oss/salad-cloud-sdk';


            (async () => {
              const saladCloudSdk = new SaladCloudSdk({
                apiKey: 'YOUR_API_KEY',
              });

              const { data } = await saladCloudSdk.containerGroups.getContainerGroupInstance(
                'acme-corp',
                'dev-env',
                'oxeoh8avj5fo61fav-9q13ml41n',
                'container_group_instance_id',
              );

              console.log(data);
            })();
          lang: TypeScript
        - source: >-
            from salad_cloud_sdk import SaladCloudSdk


            sdk = SaladCloudSdk(
                api_key="YOUR_API_KEY",
                api_key_header="YOUR_API_KEY_HEADER",
                timeout=10000
            )


            result = sdk.container_groups.get_container_group_instance(
                organization_name="acme-corp",
                project_name="dev-env",
                container_group_name="djh4s8hz0soygun3m687oust14ot1pk0icevxf5izkd-rds",
                container_group_instance_id="container_group_instance_id"
            )


            print(result)
          lang: Python
        - source: |-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
            )

            config := saladcloudsdkconfig.NewConfig()
            client := saladcloudsdk.NewSaladCloudSdk(config)

            response, err := client.ContainerGroups.GetContainerGroupInstance(context.Background(), "organizationName", "projectName", "containerGroupName", "containerGroupInstanceId")
            if err != nil {
              panic(err)
            }

            fmt.Println(response)
          lang: Go
        - source: >-
            import com.salad.cloud.sdk.SaladCloudSdk;

            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;

            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;

            import com.salad.cloud.sdk.models.ContainerGroupInstance;


            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                ContainerGroupInstance response = saladCloudSdk.containerGroups.getContainerGroupInstance(
                  "acme-corp",
                  "dev-env",
                  "djh4s8hz0soygun3m687oust14ot1pk0icevxf5izkd-rds",
                  "container_group_instance_id"
                );

                System.out.println(response);
              }
            }
          lang: Java
  /organizations/{organization_name}/projects/{project_name}/containers/{container_group_name}/instances/{container_group_instance_id}/reallocate:
    summary: Container Group Instance
    description: Operations for a container group instance
    parameters:
      - $ref: "#/components/parameters/organization_name"
      - $ref: "#/components/parameters/project_name"
      - $ref: "#/components/parameters/container_group_name"
      - $ref: "#/components/parameters/container_group_instance_id"
    post:
      operationId: reallocate_container_group_instance
      summary: Reallocate Container Group Instance
      description: Reallocates a container group instance to run on a different Salad Node
      responses:
        "202":
          $ref: "#/components/responses/ReallocateContainerGroupInstance"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - container_groups
      x-codeSamples:
        - source: |-
            using Salad.Cloud.SDK;
            using Salad.Cloud.SDK.Config;
            using Environment = Salad.Cloud.SDK.Http.Environment;

            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };

            var client = new SaladCloudSdkClient(config);

            await client.ContainerGroups.ReallocateContainerGroupInstanceAsync("acme-corp", "dev-env", "rlr6585lj2n", "container_group_instance_id");
          lang: C#
        - source: >-
            import { SaladCloudSdk } from
            '@saladtechnologies-oss/salad-cloud-sdk';


            (async () => {
              const saladCloudSdk = new SaladCloudSdk({
                apiKey: 'YOUR_API_KEY',
              });

              const { data } = await saladCloudSdk.containerGroups.reallocateContainerGroupInstance(
                'acme-corp',
                'dev-env',
                'r1iikkkwnv9cb7ost0zds',
                'container_group_instance_id',
              );

              console.log(data);
            })();
          lang: TypeScript
        - source: |-
            from salad_cloud_sdk import SaladCloudSdk

            sdk = SaladCloudSdk(
                api_key="YOUR_API_KEY",
                api_key_header="YOUR_API_KEY_HEADER",
                timeout=10000
            )

            result = sdk.container_groups.reallocate_container_group_instance(
                organization_name="acme-corp",
                project_name="dev-env",
                container_group_name="rlr6585lj2n",
                container_group_instance_id="container_group_instance_id"
            )

            print(result)
          lang: Python
        - source: |-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
            )

            config := saladcloudsdkconfig.NewConfig()
            client := saladcloudsdk.NewSaladCloudSdk(config)

            response, err := client.ContainerGroups.ReallocateContainerGroupInstance(context.Background(), "organizationName", "projectName", "containerGroupName", "containerGroupInstanceId")
            if err != nil {
              panic(err)
            }

            fmt.Println(response)
          lang: Go
        - source: >-
            import com.salad.cloud.sdk.SaladCloudSdk;

            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;

            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;


            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                saladCloudSdk.containerGroups.reallocateContainerGroupInstance(
                  "acme-corp",
                  "dev-env",
                  "rlr6585lj2n",
                  "container_group_instance_id"
                );
              }
            }
          lang: Java
  /organizations/{organization_name}/projects/{project_name}/containers/{container_group_name}/instances/{container_group_instance_id}/recreate:
    summary: Container Group Instance
    description: Operations for a container group instance
    parameters:
      - $ref: "#/components/parameters/organization_name"
      - $ref: "#/components/parameters/project_name"
      - $ref: "#/components/parameters/container_group_name"
      - $ref: "#/components/parameters/container_group_instance_id"
    post:
      operationId: recreate_container_group_instance
      summary: Recreate Container Group Instance
      description: Stops a container, destroys it, and starts a new one without
        requiring the image to be downloaded again on a new Salad Node
      responses:
        "202":
          $ref: "#/components/responses/RecreateContainerGroupInstance"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - container_groups
      x-codeSamples:
        - source: |-
            using Salad.Cloud.SDK;
            using Salad.Cloud.SDK.Config;
            using Environment = Salad.Cloud.SDK.Http.Environment;

            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };

            var client = new SaladCloudSdkClient(config);

            await client.ContainerGroups.RecreateContainerGroupInstanceAsync("acme-corp", "dev-env", "n8-fjfpg-8o880hinx8ob81zddo5rum25m5fl-ocry41fabtao7", "container_group_instance_id");
          lang: C#
        - source: >-
            import { SaladCloudSdk } from
            '@saladtechnologies-oss/salad-cloud-sdk';


            (async () => {
              const saladCloudSdk = new SaladCloudSdk({
                apiKey: 'YOUR_API_KEY',
              });

              const { data } = await saladCloudSdk.containerGroups.recreateContainerGroupInstance(
                'acme-corp',
                'dev-env',
                'ej-k54cvkw1mdc165omi3xku5rq3320mp4-mov2ar3q6lb3-iauy',
                'container_group_instance_id',
              );

              console.log(data);
            })();
          lang: TypeScript
        - source: >-
            from salad_cloud_sdk import SaladCloudSdk


            sdk = SaladCloudSdk(
                api_key="YOUR_API_KEY",
                api_key_header="YOUR_API_KEY_HEADER",
                timeout=10000
            )


            result = sdk.container_groups.recreate_container_group_instance(
                organization_name="acme-corp",
                project_name="dev-env",
                container_group_name="n8-fjfpg-8o880hinx8ob81zddo5rum25m5fl-ocry41fabtao7",
                container_group_instance_id="container_group_instance_id"
            )


            print(result)
          lang: Python
        - source: |-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
            )

            config := saladcloudsdkconfig.NewConfig()
            client := saladcloudsdk.NewSaladCloudSdk(config)

            response, err := client.ContainerGroups.RecreateContainerGroupInstance(context.Background(), "organizationName", "projectName", "containerGroupName", "containerGroupInstanceId")
            if err != nil {
              panic(err)
            }

            fmt.Println(response)
          lang: Go
        - source: >-
            import com.salad.cloud.sdk.SaladCloudSdk;

            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;

            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;


            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                saladCloudSdk.containerGroups.recreateContainerGroupInstance(
                  "acme-corp",
                  "dev-env",
                  "n8-fjfpg-8o880hinx8ob81zddo5rum25m5fl-ocry41fabtao7",
                  "container_group_instance_id"
                );
              }
            }
          lang: Java
  /organizations/{organization_name}/projects/{project_name}/containers/{container_group_name}/instances/{container_group_instance_id}/restart:
    summary: Container Group Instance
    description: Operations for a container group instance
    parameters:
      - $ref: "#/components/parameters/organization_name"
      - $ref: "#/components/parameters/project_name"
      - $ref: "#/components/parameters/container_group_name"
      - $ref: "#/components/parameters/container_group_instance_id"
    post:
      operationId: restart_container_group_instance
      summary: Restart container Group Instance
      description: Stops a container and restarts it on the same Salad Node
      responses:
        "202":
          $ref: "#/components/responses/RestartContainerGroupInstance"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - container_groups
      x-codeSamples:
        - source: |-
            using Salad.Cloud.SDK;
            using Salad.Cloud.SDK.Config;
            using Environment = Salad.Cloud.SDK.Http.Environment;

            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };

            var client = new SaladCloudSdkClient(config);

            await client.ContainerGroups.RestartContainerGroupInstanceAsync("acme-corp", "dev-env", "p1adeb-w3gjttgd7m2r1wt99qo455", "container_group_instance_id");
          lang: C#
        - source: >-
            import { SaladCloudSdk } from
            '@saladtechnologies-oss/salad-cloud-sdk';


            (async () => {
              const saladCloudSdk = new SaladCloudSdk({
                apiKey: 'YOUR_API_KEY',
              });

              const { data } = await saladCloudSdk.containerGroups.restartContainerGroupInstance(
                'acme-corp',
                'dev-env',
                'elwyv8cc9z7auxq8gmm5tqiz3fh3lty-n963c-nzs6rcc8qglueef-fdu',
                'container_group_instance_id',
              );

              console.log(data);
            })();
          lang: TypeScript
        - source: |-
            from salad_cloud_sdk import SaladCloudSdk

            sdk = SaladCloudSdk(
                api_key="YOUR_API_KEY",
                api_key_header="YOUR_API_KEY_HEADER",
                timeout=10000
            )

            result = sdk.container_groups.restart_container_group_instance(
                organization_name="acme-corp",
                project_name="dev-env",
                container_group_name="p1adeb-w3gjttgd7m2r1wt99qo455",
                container_group_instance_id="container_group_instance_id"
            )

            print(result)
          lang: Python
        - source: |-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
            )

            config := saladcloudsdkconfig.NewConfig()
            client := saladcloudsdk.NewSaladCloudSdk(config)

            response, err := client.ContainerGroups.RestartContainerGroupInstance(context.Background(), "organizationName", "projectName", "containerGroupName", "containerGroupInstanceId")
            if err != nil {
              panic(err)
            }

            fmt.Println(response)
          lang: Go
        - source: >-
            import com.salad.cloud.sdk.SaladCloudSdk;

            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;

            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;


            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                saladCloudSdk.containerGroups.restartContainerGroupInstance(
                  "acme-corp",
                  "dev-env",
                  "p1adeb-w3gjttgd7m2r1wt99qo455",
                  "container_group_instance_id"
                );
              }
            }
          lang: Java
  /organizations/{organization_name}/projects/{project_name}/queues:
    summary: Queues
    description: Operations for queues
    parameters:
      - $ref: "#/components/parameters/organization_name"
      - $ref: "#/components/parameters/project_name"
    get:
      operationId: list_queues
      summary: List Queues
      description: Gets the list of queues in the given project.
      responses:
        "200":
          $ref: "#/components/responses/ListQueues"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - queues
      x-codeSamples:
        - source: >-
            using Salad.Cloud.SDK;

            using Salad.Cloud.SDK.Config;

            using Environment = Salad.Cloud.SDK.Http.Environment;


            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };


            var client = new SaladCloudSdkClient(config);


            var response = await client.Queues.ListQueuesAsync("acme-corp",
            "dev-env");


            Console.WriteLine(response);
          lang: C#
        - source: >-
            import { SaladCloudSdk } from
            '@saladtechnologies-oss/salad-cloud-sdk';


            (async () => {
              const saladCloudSdk = new SaladCloudSdk({
                apiKey: 'YOUR_API_KEY',
              });

              const { data } = await saladCloudSdk.queues.listQueues('acme-corp', 'dev-env');

              console.log(data);
            })();
          lang: TypeScript
        - source: |-
            from salad_cloud_sdk import SaladCloudSdk

            sdk = SaladCloudSdk(
                api_key="YOUR_API_KEY",
                api_key_header="YOUR_API_KEY_HEADER",
                timeout=10000
            )

            result = sdk.queues.list_queues(
                organization_name="acme-corp",
                project_name="dev-env"
            )

            print(result)
          lang: Python
        - source: >-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
            )


            config := saladcloudsdkconfig.NewConfig()

            client := saladcloudsdk.NewSaladCloudSdk(config)


            response, err := client.Queues.ListQueues(context.Background(),
            "organizationName", "projectName")

            if err != nil {
              panic(err)
            }


            fmt.Println(response)
          lang: Go
        - source: >-
            import com.salad.cloud.sdk.SaladCloudSdk;

            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;

            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;

            import com.salad.cloud.sdk.models.QueueList;


            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                QueueList response = saladCloudSdk.queues.listQueues("acme-corp", "dev-env");

                System.out.println(response);
              }
            }
          lang: Java
    post:
      operationId: create_queue
      summary: Create Queue
      description: Creates a new queue in the given project.
      requestBody:
        $ref: "#/components/requestBodies/CreateQueue"
      responses:
        "201":
          $ref: "#/components/responses/CreateQueue"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - queues
      x-liblab-resource: Queue#Create
      x-codeSamples:
        - source: >-
            using Salad.Cloud.SDK;

            using Salad.Cloud.SDK.Config;

            using Salad.Cloud.SDK.Models;

            using Environment = Salad.Cloud.SDK.Http.Environment;


            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };


            var client = new SaladCloudSdkClient(config);


            var input = new CreateQueue("name", "M0fH", "description");


            var response = await client.Queues.CreateQueueAsync(input,
            "acme-corp", "dev-env");


            Console.WriteLine(response);
          lang: C#
        - source: >-
            import { CreateQueue, SaladCloudSdk } from
            '@saladtechnologies-oss/salad-cloud-sdk';


            (async () => {
              const saladCloudSdk = new SaladCloudSdk({
                apiKey: 'YOUR_API_KEY',
              });

              const createQueue: CreateQueue = {
                name: 'name',
                displayName: 'D4LmZEiVGB',
                description: 'description',
              };

              const { data } = await saladCloudSdk.queues.createQueue('acme-corp', 'dev-env', createQueue);

              console.log(data);
            })();
          lang: TypeScript
        - source: |-
            from salad_cloud_sdk import SaladCloudSdk
            from salad_cloud_sdk.models import CreateQueue

            sdk = SaladCloudSdk(
                api_key="YOUR_API_KEY",
                api_key_header="YOUR_API_KEY_HEADER",
                timeout=10000
            )

            request_body = CreateQueue(
                name="name",
                display_name="M0fH",
                description="description"
            )

            result = sdk.queues.create_queue(
                request_body=request_body,
                organization_name="acme-corp",
                project_name="dev-env"
            )

            print(result)
          lang: Python
        - source: >-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/queues"
            )


            config := saladcloudsdkconfig.NewConfig()

            client := saladcloudsdk.NewSaladCloudSdk(config)



            request := queues.CreateQueue{}

            request.SetName("Name")

            request.SetDisplayName("DisplayName")

            request.SetDescription("Description")


            response, err := client.Queues.CreateQueue(context.Background(),
            "organizationName", "projectName", request)

            if err != nil {
              panic(err)
            }


            fmt.Println(response)
          lang: Go
        - source: >-
            import com.salad.cloud.sdk.SaladCloudSdk;

            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;

            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;

            import com.salad.cloud.sdk.models.CreateQueue;

            import com.salad.cloud.sdk.models.Queue;


            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                CreateQueue createQueue = CreateQueue.builder().name("name").displayName("M0fH").description("description").build();

                Queue response = saladCloudSdk.queues.createQueue("acme-corp", "dev-env", createQueue);

                System.out.println(response);
              }
            }
          lang: Java
  /organizations/{organization_name}/projects/{project_name}/queues/{queue_name}:
    summary: Queue
    description: Operations for a queue
    parameters:
      - $ref: "#/components/parameters/organization_name"
      - $ref: "#/components/parameters/project_name"
      - $ref: "#/components/parameters/queue_name"
    get:
      operationId: get_queue
      summary: Get Queue
      description: Gets an existing queue in the given project.
      responses:
        "200":
          $ref: "#/components/responses/GetQueue"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - queues
      x-liblab-datasource: Queue#Read
      x-liblab-resource: Queue#Read
      x-codeSamples:
        - source: >-
            using Salad.Cloud.SDK;

            using Salad.Cloud.SDK.Config;

            using Environment = Salad.Cloud.SDK.Http.Environment;


            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };


            var client = new SaladCloudSdkClient(config);


            var response = await client.Queues.GetQueueAsync("acme-corp",
            "dev-env", "fifo-queue");


            Console.WriteLine(response);
          lang: C#
        - source: >-
            import { SaladCloudSdk } from
            '@saladtechnologies-oss/salad-cloud-sdk';


            (async () => {
              const saladCloudSdk = new SaladCloudSdk({
                apiKey: 'YOUR_API_KEY',
              });

              const { data } = await saladCloudSdk.queues.getQueue('acme-corp', 'dev-env', 'fifo-queue');

              console.log(data);
            })();
          lang: TypeScript
        - source: |-
            from salad_cloud_sdk import SaladCloudSdk

            sdk = SaladCloudSdk(
                api_key="YOUR_API_KEY",
                api_key_header="YOUR_API_KEY_HEADER",
                timeout=10000
            )

            result = sdk.queues.get_queue(
                organization_name="acme-corp",
                project_name="dev-env",
                queue_name="fifo-queue"
            )

            print(result)
          lang: Python
        - source: >-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
            )


            config := saladcloudsdkconfig.NewConfig()

            client := saladcloudsdk.NewSaladCloudSdk(config)


            response, err := client.Queues.GetQueue(context.Background(),
            "organizationName", "projectName", "queueName")

            if err != nil {
              panic(err)
            }


            fmt.Println(response)
          lang: Go
        - source: >-
            import com.salad.cloud.sdk.SaladCloudSdk;

            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;

            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;

            import com.salad.cloud.sdk.models.Queue;


            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                Queue response = saladCloudSdk.queues.getQueue("acme-corp", "dev-env", "fifo-queue");

                System.out.println(response);
              }
            }
          lang: Java
    patch:
      operationId: update_queue
      summary: Update Queue
      description: Updates an existing queue in the given project.
      requestBody:
        $ref: "#/components/requestBodies/UpdateQueue"
      responses:
        "200":
          $ref: "#/components/responses/UpdateQueue"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - queues
      x-liblab-resource: Queue#Update
      x-codeSamples:
        - source: >-
            using Salad.Cloud.SDK;

            using Salad.Cloud.SDK.Config;

            using Salad.Cloud.SDK.Models;

            using Environment = Salad.Cloud.SDK.Http.Environment;


            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };


            var client = new SaladCloudSdkClient(config);


            var input = new UpdateQueue("W IA8", "description");


            var response = await client.Queues.UpdateQueueAsync(input,
            "acme-corp", "dev-env", "fifo-queue");


            Console.WriteLine(response);
          lang: C#
        - source: >-
            import { SaladCloudSdk, UpdateQueue } from
            '@saladtechnologies-oss/salad-cloud-sdk';


            (async () => {
              const saladCloudSdk = new SaladCloudSdk({
                apiKey: 'YOUR_API_KEY',
              });

              const updateQueue: UpdateQueue = {
                displayName: 'ISbuv8r',
                description: 'description',
              };

              const { data } = await saladCloudSdk.queues.updateQueue('acme-corp', 'dev-env', 'fifo-queue', updateQueue);

              console.log(data);
            })();
          lang: TypeScript
        - source: |-
            from salad_cloud_sdk import SaladCloudSdk
            from salad_cloud_sdk.models import UpdateQueue

            sdk = SaladCloudSdk(
                api_key="YOUR_API_KEY",
                api_key_header="YOUR_API_KEY_HEADER",
                timeout=10000
            )

            request_body = UpdateQueue(
                display_name="W IA8",
                description="description"
            )

            result = sdk.queues.update_queue(
                request_body=request_body,
                organization_name="acme-corp",
                project_name="dev-env",
                queue_name="fifo-queue"
            )

            print(result)
          lang: Python
        - source: >-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/queues"
            )


            config := saladcloudsdkconfig.NewConfig()

            client := saladcloudsdk.NewSaladCloudSdk(config)



            request := queues.UpdateQueue{}

            request.SetDisplayName("DisplayName")

            request.SetDescription("Description")


            response, err := client.Queues.UpdateQueue(context.Background(),
            "organizationName", "projectName", "queueName", request)

            if err != nil {
              panic(err)
            }


            fmt.Println(response)
          lang: Go
        - source: >-
            import com.salad.cloud.sdk.SaladCloudSdk;

            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;

            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;

            import com.salad.cloud.sdk.models.Queue;

            import com.salad.cloud.sdk.models.UpdateQueue;


            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                UpdateQueue updateQueue = UpdateQueue.builder().displayName("W IA8").description("description").build();

                Queue response = saladCloudSdk.queues.updateQueue("acme-corp", "dev-env", "fifo-queue", updateQueue);

                System.out.println(response);
              }
            }
          lang: Java
    delete:
      operationId: delete_queue
      summary: Delete Queue
      description: Deletes an existing queue in the given project.
      responses:
        "202":
          $ref: "#/components/responses/DeleteQueue"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - queues
      x-liblab-resource: Queue#Delete
      x-codeSamples:
        - source: >-
            using Salad.Cloud.SDK;

            using Salad.Cloud.SDK.Config;

            using Environment = Salad.Cloud.SDK.Http.Environment;


            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };


            var client = new SaladCloudSdkClient(config);


            await client.Queues.DeleteQueueAsync("acme-corp", "dev-env",
            "fifo-queue");
          lang: C#
        - source: >-
            import { SaladCloudSdk } from
            '@saladtechnologies-oss/salad-cloud-sdk';


            (async () => {
              const saladCloudSdk = new SaladCloudSdk({
                apiKey: 'YOUR_API_KEY',
              });

              const { data } = await saladCloudSdk.queues.deleteQueue('acme-corp', 'dev-env', 'fifo-queue');

              console.log(data);
            })();
          lang: TypeScript
        - source: |-
            from salad_cloud_sdk import SaladCloudSdk

            sdk = SaladCloudSdk(
                api_key="YOUR_API_KEY",
                api_key_header="YOUR_API_KEY_HEADER",
                timeout=10000
            )

            result = sdk.queues.delete_queue(
                organization_name="acme-corp",
                project_name="dev-env",
                queue_name="fifo-queue"
            )

            print(result)
          lang: Python
        - source: >-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
            )


            config := saladcloudsdkconfig.NewConfig()

            client := saladcloudsdk.NewSaladCloudSdk(config)


            response, err := client.Queues.DeleteQueue(context.Background(),
            "organizationName", "projectName", "queueName")

            if err != nil {
              panic(err)
            }


            fmt.Println(response)
          lang: Go
        - source: >-
            import com.salad.cloud.sdk.SaladCloudSdk;

            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;

            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;


            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                saladCloudSdk.queues.deleteQueue("acme-corp", "dev-env", "fifo-queue");
              }
            }
          lang: Java
  /organizations/{organization_name}/projects/{project_name}/queues/{queue_name}/jobs:
    summary: Jobs in a Queue
    description: Operations for jobs in a queue
    parameters:
      - $ref: "#/components/parameters/organization_name"
      - $ref: "#/components/parameters/project_name"
      - $ref: "#/components/parameters/queue_name"
    get:
      operationId: list_queue_jobs
      summary: List Jobs
      description: Gets the list of jobs in a queue
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/page_size"
      responses:
        "200":
          $ref: "#/components/responses/ListQueueJobs"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - queues
      x-codeSamples:
        - source: >-
            using Salad.Cloud.SDK;

            using Salad.Cloud.SDK.Config;

            using Environment = Salad.Cloud.SDK.Http.Environment;


            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };


            var client = new SaladCloudSdkClient(config);


            var response = await client.Queues.ListQueueJobsAsync("acme-corp",
            "dev-env", "fifo-queue", 29045298, 12);


            Console.WriteLine(response);
          lang: C#
        - source: >-
            import { SaladCloudSdk } from
            '@saladtechnologies-oss/salad-cloud-sdk';


            (async () => {
              const saladCloudSdk = new SaladCloudSdk({
                apiKey: 'YOUR_API_KEY',
              });

              const { data } = await saladCloudSdk.queues.listQueueJobs('acme-corp', 'dev-env', 'fifo-queue', {
                page: 1675858596,
                pageSize: 52,
              });

              console.log(data);
            })();
          lang: TypeScript
        - source: |-
            from salad_cloud_sdk import SaladCloudSdk

            sdk = SaladCloudSdk(
                api_key="YOUR_API_KEY",
                api_key_header="YOUR_API_KEY_HEADER",
                timeout=10000
            )

            result = sdk.queues.list_queue_jobs(
                organization_name="acme-corp",
                project_name="dev-env",
                queue_name="fifo-queue",
                page=29045298,
                page_size=12
            )

            print(result)
          lang: Python
        - source: >-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/queues"
            )


            config := saladcloudsdkconfig.NewConfig()

            client := saladcloudsdk.NewSaladCloudSdk(config)



            params := queues.ListQueueJobsRequestParams{}



            response, err := client.Queues.ListQueueJobs(context.Background(),
            "organizationName", "projectName", "queueName", params)

            if err != nil {
              panic(err)
            }


            fmt.Println(response)
          lang: Go
        - source: >-
            import com.salad.cloud.sdk.SaladCloudSdk;

            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;

            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;

            import com.salad.cloud.sdk.models.ListQueueJobsParameters;

            import com.salad.cloud.sdk.models.QueueJobList;


            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                ListQueueJobsParameters requestParameters = ListQueueJobsParameters.builder().page(29045298L).pageSize(12L).build();

                QueueJobList response = saladCloudSdk.queues.listQueueJobs("acme-corp", "dev-env", "fifo-queue", requestParameters);

                System.out.println(response);
              }
            }
          lang: Java
    post:
      operationId: create_queue_job
      summary: Create Job
      description: Creates a new job
      requestBody:
        $ref: "#/components/requestBodies/CreateQueueJob"
      responses:
        "201":
          $ref: "#/components/responses/CreateQueueJob"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - queues
      x-codeSamples:
        - source: >-
            using Salad.Cloud.SDK;

            using Salad.Cloud.SDK.Config;

            using Salad.Cloud.SDK.Models;

            using Environment = Salad.Cloud.SDK.Http.Environment;


            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };


            var client = new SaladCloudSdkClient(config);


            var input = new CreateQueueJob(new object {}, new object {},
            "webhook");


            var response = await client.Queues.CreateQueueJobAsync(input,
            "acme-corp", "dev-env", "fifo-queue");


            Console.WriteLine(response);
          lang: C#
        - source: >-
            import { CreateQueueJob, SaladCloudSdk } from
            '@saladtechnologies-oss/salad-cloud-sdk';


            (async () => {
              const saladCloudSdk = new SaladCloudSdk({
                apiKey: 'YOUR_API_KEY',
              });

              const createQueueJob: CreateQueueJob = {
                input: [],
                metadata: {},
                webhook: 'webhook',
              };

              const { data } = await saladCloudSdk.queues.createQueueJob('acme-corp', 'dev-env', 'fifo-queue', createQueueJob);

              console.log(data);
            })();
          lang: TypeScript
        - source: |-
            from salad_cloud_sdk import SaladCloudSdk
            from salad_cloud_sdk.models import CreateQueueJob

            sdk = SaladCloudSdk(
                api_key="YOUR_API_KEY",
                api_key_header="YOUR_API_KEY_HEADER",
                timeout=10000
            )

            request_body = CreateQueueJob(
                input="",
                metadata={},
                webhook="webhook"
            )

            result = sdk.queues.create_queue_job(
                request_body=request_body,
                organization_name="acme-corp",
                project_name="dev-env",
                queue_name="fifo-queue"
            )

            print(result)
          lang: Python
        - source: >-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/queues"
            )


            config := saladcloudsdkconfig.NewConfig()

            client := saladcloudsdk.NewSaladCloudSdk(config)



            request := queues.CreateQueueJob{}

            request.SetInput("")

            request.SetMetadata("string")

            request.SetWebhook("Webhook")


            response, err := client.Queues.CreateQueueJob(context.Background(),
            "organizationName", "projectName", "queueName", request)

            if err != nil {
              panic(err)
            }


            fmt.Println(response)
          lang: Go
        - source: >-
            import com.salad.cloud.sdk.SaladCloudSdk;

            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;

            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;

            import com.salad.cloud.sdk.models.CreateQueueJob;

            import com.salad.cloud.sdk.models.QueueJob;


            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                CreateQueueJob createQueueJob = CreateQueueJob
                  .builder()
                  .input(new Object())
                  .metadata(new Object())
                  .webhook("webhook")
                  .build();

                QueueJob response = saladCloudSdk.queues.createQueueJob("acme-corp", "dev-env", "fifo-queue", createQueueJob);

                System.out.println(response);
              }
            }
          lang: Java
  /organizations/{organization_name}/projects/{project_name}/queues/{queue_name}/jobs/{queue_job_id}:
    summary: Jobs in a Queue
    description: Operations for jobs in a queue
    parameters:
      - $ref: "#/components/parameters/organization_name"
      - $ref: "#/components/parameters/project_name"
      - $ref: "#/components/parameters/queue_name"
      - $ref: "#/components/parameters/queue_job_id"
    get:
      operationId: get_queue_job
      summary: Get Job
      description: Gets a job in a queue
      responses:
        "200":
          $ref: "#/components/responses/GetQueueJob"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - queues
      x-codeSamples:
        - source: >-
            using Salad.Cloud.SDK;

            using Salad.Cloud.SDK.Config;

            using Environment = Salad.Cloud.SDK.Http.Environment;


            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };


            var client = new SaladCloudSdkClient(config);


            var response = await client.Queues.GetQueueJobAsync("acme-corp",
            "dev-env", "fifo-queue", "7dcd6922-50e9-4d56-89b5-91cde26f0211");


            Console.WriteLine(response);
          lang: C#
        - source: >-
            import { SaladCloudSdk } from
            '@saladtechnologies-oss/salad-cloud-sdk';


            (async () => {
              const saladCloudSdk = new SaladCloudSdk({
                apiKey: 'YOUR_API_KEY',
              });

              const { data } = await saladCloudSdk.queues.getQueueJob(
                'acme-corp',
                'dev-env',
                'fifo-queue',
                '7dcd6922-50e9-4d56-89b5-91cde26f0211',
              );

              console.log(data);
            })();
          lang: TypeScript
        - source: |-
            from salad_cloud_sdk import SaladCloudSdk

            sdk = SaladCloudSdk(
                api_key="YOUR_API_KEY",
                api_key_header="YOUR_API_KEY_HEADER",
                timeout=10000
            )

            result = sdk.queues.get_queue_job(
                organization_name="acme-corp",
                project_name="dev-env",
                queue_name="fifo-queue",
                queue_job_id="7dcd6922-50e9-4d56-89b5-91cde26f0211"
            )

            print(result)
          lang: Python
        - source: >-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
            )


            config := saladcloudsdkconfig.NewConfig()

            client := saladcloudsdk.NewSaladCloudSdk(config)


            response, err := client.Queues.GetQueueJob(context.Background(),
            "organizationName", "projectName", "queueName", "queueJobId")

            if err != nil {
              panic(err)
            }


            fmt.Println(response)
          lang: Go
        - source: >-
            import com.salad.cloud.sdk.SaladCloudSdk;

            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;

            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;

            import com.salad.cloud.sdk.models.QueueJob;


            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                QueueJob response = saladCloudSdk.queues.getQueueJob(
                  "acme-corp",
                  "dev-env",
                  "fifo-queue",
                  "7dcd6922-50e9-4d56-89b5-91cde26f0211"
                );

                System.out.println(response);
              }
            }
          lang: Java
    delete:
      operationId: delete_queue_job
      summary: Delete Job
      description: Cancels a job in a queue
      responses:
        "202":
          $ref: "#/components/responses/DeleteQueueJob"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - queues
      x-codeSamples:
        - source: >-
            using Salad.Cloud.SDK;

            using Salad.Cloud.SDK.Config;

            using Environment = Salad.Cloud.SDK.Http.Environment;


            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };


            var client = new SaladCloudSdkClient(config);


            await client.Queues.DeleteQueueJobAsync("acme-corp", "dev-env",
            "fifo-queue", "7dcd6922-50e9-4d56-89b5-91cde26f0211");
          lang: C#
        - source: >-
            import { SaladCloudSdk } from
            '@saladtechnologies-oss/salad-cloud-sdk';


            (async () => {
              const saladCloudSdk = new SaladCloudSdk({
                apiKey: 'YOUR_API_KEY',
              });

              const { data } = await saladCloudSdk.queues.deleteQueueJob(
                'acme-corp',
                'dev-env',
                'fifo-queue',
                '7dcd6922-50e9-4d56-89b5-91cde26f0211',
              );

              console.log(data);
            })();
          lang: TypeScript
        - source: |-
            from salad_cloud_sdk import SaladCloudSdk

            sdk = SaladCloudSdk(
                api_key="YOUR_API_KEY",
                api_key_header="YOUR_API_KEY_HEADER",
                timeout=10000
            )

            result = sdk.queues.delete_queue_job(
                organization_name="acme-corp",
                project_name="dev-env",
                queue_name="fifo-queue",
                queue_job_id="7dcd6922-50e9-4d56-89b5-91cde26f0211"
            )

            print(result)
          lang: Python
        - source: >-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
            )


            config := saladcloudsdkconfig.NewConfig()

            client := saladcloudsdk.NewSaladCloudSdk(config)


            response, err := client.Queues.DeleteQueueJob(context.Background(),
            "organizationName", "projectName", "queueName", "queueJobId")

            if err != nil {
              panic(err)
            }


            fmt.Println(response)
          lang: Go
        - source: >-
            import com.salad.cloud.sdk.SaladCloudSdk;

            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;

            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;


            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                saladCloudSdk.queues.deleteQueueJob("acme-corp", "dev-env", "fifo-queue", "7dcd6922-50e9-4d56-89b5-91cde26f0211");
              }
            }
          lang: Java
  /organizations/{organization_name}/quotas:
    summary: Quotas
    description: Operations for quotas
    parameters:
      - $ref: "#/components/parameters/organization_name"
    get:
      operationId: get_quotas
      summary: Get Quotas
      description: Gets the organization quotas
      responses:
        "200":
          $ref: "#/components/responses/GetQuotas"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - quotas
      x-liblab-datasource: OrganizationQuotas#Read
      x-codeSamples:
        - source: |-
            using Salad.Cloud.SDK;
            using Salad.Cloud.SDK.Config;
            using Environment = Salad.Cloud.SDK.Http.Environment;

            var config = new SaladCloudSdkConfig{
                Environment = Environment.Default
            };

            var client = new SaladCloudSdkClient(config);

            var response = await client.Quotas.GetQuotasAsync("acme-corp");

            Console.WriteLine(response);
          lang: C#
        - source: >-
            import { SaladCloudSdk } from
            '@saladtechnologies-oss/salad-cloud-sdk';


            (async () => {
              const saladCloudSdk = new SaladCloudSdk({
                apiKey: 'YOUR_API_KEY',
              });

              const { data } = await saladCloudSdk.quotas.getQuotas('acme-corp');

              console.log(data);
            })();
          lang: TypeScript
        - source: |-
            from salad_cloud_sdk import SaladCloudSdk

            sdk = SaladCloudSdk(
                api_key="YOUR_API_KEY",
                api_key_header="YOUR_API_KEY_HEADER",
                timeout=10000
            )

            result = sdk.quotas.get_quotas(organization_name="acme-corp")

            print(result)
          lang: Python
        - source: >-
            import (
              "fmt"
              "encoding/json"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdkconfig"
              "github.com/saladtechnologies/salad-cloud-sdk-go/pkg/saladcloudsdk"
            )


            config := saladcloudsdkconfig.NewConfig()

            client := saladcloudsdk.NewSaladCloudSdk(config)


            response, err := client.Quotas.GetQuotas(context.Background(),
            "organizationName")

            if err != nil {
              panic(err)
            }


            fmt.Println(response)
          lang: Go
        - source: >-
            import com.salad.cloud.sdk.SaladCloudSdk;

            import com.salad.cloud.sdk.config.ApiKeyAuthConfig;

            import com.salad.cloud.sdk.config.SaladCloudSdkConfig;

            import com.salad.cloud.sdk.models.Quotas;


            public class Main {

              public static void main(String[] args) {
                SaladCloudSdkConfig config = SaladCloudSdkConfig
                  .builder()
                  .apiKeyAuthConfig(ApiKeyAuthConfig.builder().apiKey("YOUR_API_KEY").build())
                  .build();

                SaladCloudSdk saladCloudSdk = new SaladCloudSdk(config);

                Quotas response = saladCloudSdk.quotas.getQuotas("acme-corp");

                System.out.println(response);
              }
            }
          lang: Java
  /organizations/{organization_name}/inference-endpoints:
    summary: Inference Endpoints
    description: Operations for inference endpoints
    parameters:
      - $ref: "#/components/parameters/organization_name"
    get:
      operationId: list_inference_endpoints
      summary: List Inference Endpoints
      description: Gets the list of inference endpoints
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/page_size"
      responses:
        "200":
          $ref: "#/components/responses/ListInferenceEndpoints"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - inference_endpoints
  /organizations/{organization_name}/inference-endpoints/{inference_endpoint_name}:
    summary: Inference Endpoints
    description: Operations for an inference endpoint
    parameters:
      - $ref: "#/components/parameters/organization_name"
      - $ref: "#/components/parameters/inference_endpoint_name"
    get:
      operationId: get_inference_endpoint
      summary: Get Inference Endpoint
      description: Gets an inference endpoint
      responses:
        "200":
          $ref: "#/components/responses/GetInferenceEndpoint"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - inference_endpoints
  /organizations/{organization_name}/inference-endpoints/{inference_endpoint_name}/jobs:
    summary: Jobs in an inference endpoint
    description: Operations for jobs in an inference endpoint
    parameters:
      - $ref: "#/components/parameters/organization_name"
      - $ref: "#/components/parameters/inference_endpoint_name"
    get:
      operationId: list_inference_endpoint_jobs
      summary: List Inference Endpoint Jobs
      description: Retrieves a list of an inference endpoint jobs
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/page_size"
      responses:
        "200":
          $ref: "#/components/responses/ListInferenceEndpointJobs"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - inference_endpoints
    post:
      operationId: create_inference_endpoint_job
      summary: Create a new Job
      description: Creates a new job
      requestBody:
        $ref: "#/components/requestBodies/CreateInferenceEndpointJob"
      responses:
        "201":
          $ref: "#/components/responses/CreateInferenceEndpointJob"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - inference_endpoints
  /organizations/{organization_name}/inference-endpoints/{inference_endpoint_name}/jobs/{inference_endpoint_job_id}:
    summary: Jobs in an inference endpoint
    description: Operations for jobs in an inference endpoint
    parameters:
      - $ref: "#/components/parameters/organization_name"
      - $ref: "#/components/parameters/inference_endpoint_name"
      - $ref: "#/components/parameters/inference_endpoint_job_id"
    get:
      operationId: get_inference_endpoint_job
      summary: Returns a job in an inference endpoint
      description: Retrieves a job in an inference endpoint
      responses:
        "200":
          $ref: "#/components/responses/GetInferenceEndpointJob"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - inference_endpoints
    delete:
      operationId: delete_inference_endpoint_job
      summary: Delete a job from an inference endpoint
      description: Deletes an inference endpoint job
      responses:
        "202":
          $ref: "#/components/responses/DeleteInferenceEndpointJob"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - inference_endpoints
  /organizations/{organization_name}/gpu-classes:
    summary: GPU Classes
    description: Allows reading the GPU Classes collection available for the organization
    parameters:
      - $ref: "#/components/parameters/organization_name"
    get:
      operationId: list_gpu_classes
      summary: List the GPU Classes
      description: List the GPU Classes
      responses:
        "200":
          $ref: "#/components/responses/ListGpuClasses"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - organization_data
      x-liblab-datasource: OrganizationGpuClasses#Read
  /organizations/{organization_name}/webhook-secret-key:
    parameters:
      - $ref: "#/components/parameters/organization_name"
    get:
      operationId: get_webhook_secret_key
      summary: Gets the webhook secret key
      description: Gets the webhook secret key
      responses:
        "200":
          $ref: "#/components/responses/WebhookSecretKey"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - webhook_secret_key
    post:
      operationId: update_webhook_secret_key
      summary: Updates the webhook secret key
      description: Updates the webhook secret key
      responses:
        "200":
          $ref: "#/components/responses/WebhookSecretKey"
        "404":
          $ref: "#/components/responses/404"
        "429":
          $ref: "#/components/responses/429"
        default:
          $ref: "#/components/responses/UnknownError"
      tags:
        - webhook_secret_key
components:
  parameters:
    container_group_instance_id:
      in: path
      name: container_group_instance_id
      description: The unique instance identifier
      required: true
      schema:
        type: string
        format: uuid
    container_group_name:
      in: path
      name: container_group_name
      description: The unique container group name
      required: true
      schema:
        type: string
        maxLength: 63
        minLength: 2
        pattern: ^[a-z][a-z0-9-]{0,61}[a-z0-9]$
    inference_endpoint_job_id:
      in: path
      name: inference_endpoint_job_id
      description: The unique job id
      required: true
      schema:
        type: string
        format: uuid
    inference_endpoint_name:
      in: path
      name: inference_endpoint_name
      description: The unique inference endpoint name
      required: true
      schema:
        type: string
        maxLength: 63
        minLength: 2
    organization_name:
      name: organization_name
      in: path
      description: Your organization name. This identifies the billing context for the
        API operation and represents a security boundary for SaladCloud
        resources. The organization must be created before using the API, and
        you must be a member of the organization.
      required: true
      schema:
        $ref: "#/components/schemas/OrganizationName"
    page:
      in: query
      name: page
      description: The page number
      schema:
        type:
          - integer
          - "null"
        format: int32
        maximum: 2147483647
        minimum: 1
    page_size:
      in: query
      name: page_size
      description: The number of items per page
      schema:
        type:
          - integer
          - "null"
        format: int32
        maximum: 100
        minimum: 1
    project_name:
      name: project_name
      in: path
      description: Your project name. This represents a collection of related
        SaladCloud resources. The project must be created before using the API.
      required: true
      schema:
        $ref: "#/components/schemas/ProjectName"
    queue_job_id:
      in: path
      name: queue_job_id
      required: true
      schema:
        type: string
        format: uuid
        examples:
          - 7dcd6922-50e9-4d56-89b5-91cde26f0211
      description: The job identifier. This is automatically generated and assigned
        when the job is created.
    queue_name:
      in: path
      name: queue_name
      required: true
      schema:
        type: string
        examples:
          - fifo-queue
        maxLength: 63
        minLength: 2
        pattern: ^[a-z][a-z0-9-]{0,61}[a-z0-9]$
      description: The queue name.
  schemas:
    OrganizationName:
      description: The organization name.
      type: string
      examples:
        - acme-corp
      maxLength: 63
      minLength: 2
      pattern: ^[a-z][a-z0-9-]{0,61}[a-z0-9]$
      title: Organization Name
    ProjectName:
      description: The project name.
      type: string
      examples:
        - dev-env
      maxLength: 63
      minLength: 2
      pattern: ^[a-z][a-z0-9-]{0,61}[a-z0-9]$
      title: Project Name
    ProblemDetails:
      description: Represents an HTTP problem
      type: object
      properties:
        type:
          description: The URI reference that identifies the problem type.
          type: string
          default: about:blank
        title:
          description: The short, human-readable summary of the problem type.
          type: string
        status:
          description: The HTTP status code generated by the origin server for this
            occurrence of the problem.
          type: integer
          maximum: 599
          minimum: 100
        detail:
          description: The human-readable explanation specific to this occurrence of the
            problem.
          type: string
        instance:
          description: The URI reference that identifies the specific occurrence of the
            problem.
          type: string
          format: uri-reference
      title: HTTP Problem
    CountryCode:
      type: string
      enum:
        - af
        - al
        - dz
        - as
        - ad
        - ao
        - ai
        - aq
        - ag
        - ar
        - am
        - aw
        - au
        - at
        - az
        - bs
        - bh
        - bd
        - bb
        - by
        - be
        - bz
        - bj
        - bm
        - bt
        - bo
        - bq
        - ba
        - bw
        - bv
        - br
        - io
        - bn
        - bg
        - bf
        - bi
        - cv
        - kh
        - cm
        - ca
        - ky
        - cf
        - td
        - cl
        - cn
        - cx
        - cc
        - co
        - km
        - cd
        - cg
        - ck
        - cr
        - hr
        - cu
        - cw
        - cy
        - cz
        - ci
        - dk
        - dj
        - dm
        - do
        - ec
        - eg
        - sv
        - gq
        - er
        - ee
        - sz
        - et
        - fk
        - fo
        - fj
        - fi
        - fr
        - gf
        - pf
        - tf
        - ga
        - gm
        - ge
        - de
        - gh
        - gi
        - gr
        - gl
        - gd
        - gp
        - gu
        - gt
        - gg
        - gn
        - gw
        - gy
        - ht
        - hm
        - va
        - hn
        - hk
        - hu
        - is
        - in
        - id
        - ir
        - iq
        - ie
        - im
        - il
        - it
        - jm
        - jp
        - je
        - jo
        - kz
        - ke
        - ki
        - kp
        - kr
        - kw
        - kg
        - la
        - lv
        - lb
        - ls
        - lr
        - ly
        - li
        - lt
        - lu
        - mo
        - mg
        - mw
        - my
        - mv
        - ml
        - mt
        - mh
        - mq
        - mr
        - mu
        - yt
        - mx
        - fm
        - md
        - mc
        - mn
        - me
        - ms
        - ma
        - mz
        - mm
        - na
        - nr
        - np
        - nl
        - nc
        - nz
        - ni
        - ne
        - ng
        - nu
        - nf
        - mp
        - no
        - om
        - pk
        - pw
        - ps
        - pa
        - pg
        - py
        - pe
        - ph
        - pn
        - pl
        - pt
        - pr
        - qa
        - mk
        - ro
        - ru
        - rw
        - re
        - bl
        - sh
        - kn
        - lc
        - mf
        - pm
        - vc
        - ws
        - sm
        - st
        - sa
        - sn
        - rs
        - sc
        - sl
        - sg
        - sx
        - sk
        - si
        - sb
        - so
        - za
        - gs
        - ss
        - es
        - lk
        - sd
        - sr
        - sj
        - se
        - ch
        - sy
        - tw
        - tj
        - tz
        - th
        - tl
        - tg
        - tk
        - to
        - tt
        - tn
        - tr
        - tm
        - tc
        - tv
        - ug
        - ua
        - ae
        - gb
        - um
        - us
        - uy
        - uz
        - vu
        - ve
        - vn
        - vg
        - vi
        - wf
        - eh
        - ye
        - zm
        - zw
        - ax
    ContainerGroupStatus:
      type: string
      enum:
        - pending
        - running
        - stopped
        - succeeded
        - failed
        - deploying
    ContainerRestartPolicy:
      type: string
      enum:
        - always
        - on_failure
        - never
    ContainerNetworkingProtocol:
      type: string
      enum:
        - http
    ContainerGroup:
      description: Represents a container group
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 63
          minLength: 2
          pattern: ^[a-z][a-z0-9-]{0,61}[a-z0-9]$
        display_name:
          type: string
          maxLength: 63
          minLength: 2
          pattern: ^[ ,-.0-9A-Za-z]+$
        container:
          $ref: "#/components/schemas/Container"
        autostart_policy:
          type: boolean
        restart_policy:
          $ref: "#/components/schemas/ContainerRestartPolicy"
        replicas:
          type: integer
          maximum: 100
          minimum: 0
        current_state:
          $ref: "#/components/schemas/ContainerGroupState"
        country_codes:
          description: List of countries nodes must be located in. Remove this field to
            permit nodes from any country.
          type: array
          items:
            $ref: "#/components/schemas/CountryCode"
          maxItems: 500
          minItems: 1
        networking:
          $ref: "#/components/schemas/ContainerGroupNetworking"
        liveness_probe:
          $ref: "#/components/schemas/ContainerGroupLivenessProbe"
        readiness_probe:
          $ref: "#/components/schemas/ContainerGroupReadinessProbe"
        startup_probe:
          $ref: "#/components/schemas/ContainerGroupStartupProbe"
        queue_connection:
          $ref: "#/components/schemas/ContainerGroupQueueConnection"
        create_time:
          type: string
          format: date-time
        update_time:
          type: string
          format: date-time
        pending_change:
          type: boolean
        version:
          type: integer
          minimum: 1
        queue_autoscaler:
          $ref: "#/components/schemas/QueueAutoscaler"
      additionalProperties: false
      required:
        - id
        - name
        - display_name
        - container
        - autostart_policy
        - restart_policy
        - replicas
        - current_state
        - create_time
        - update_time
        - pending_change
        - version
    ContainerGroupList:
      description: Represents a list of container groups
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/ContainerGroup"
          maxItems: 100
          minItems: 0
      additionalProperties: false
      required:
        - items
    CreateContainerGroup:
      description: Represents a request to create a container group
      type: object
      properties:
        name:
          type: string
          maxLength: 63
          minLength: 2
          pattern: ^[a-z][a-z0-9-]{0,61}[a-z0-9]$
        display_name:
          type:
            - string
            - "null"
          maxLength: 63
          minLength: 2
          pattern: ^[ ,-.0-9A-Za-z]+$
        container:
          $ref: "#/components/schemas/CreateContainer"
        autostart_policy:
          type: boolean
        restart_policy:
          $ref: "#/components/schemas/ContainerRestartPolicy"
        replicas:
          type: integer
          maximum: 250
          minimum: 0
        country_codes:
          description: List of countries nodes must be located in. Remove this field to
            permit nodes from any country.
          type: array
          items:
            $ref: "#/components/schemas/CountryCode"
          maxItems: 500
          minItems: 1
        networking:
          $ref: "#/components/schemas/CreateContainerGroupNetworking"
        liveness_probe:
          $ref: "#/components/schemas/ContainerGroupLivenessProbe"
        readiness_probe:
          $ref: "#/components/schemas/ContainerGroupReadinessProbe"
        startup_probe:
          $ref: "#/components/schemas/ContainerGroupStartupProbe"
        queue_connection:
          $ref: "#/components/schemas/ContainerGroupQueueConnection"
        queue_autoscaler:
          $ref: "#/components/schemas/QueueAutoscaler"
      additionalProperties: false
      required:
        - name
        - container
        - restart_policy
        - autostart_policy
        - replicas
    UpdateContainerGroup:
      description: Represents a request to update a container group
      type: object
      properties:
        display_name:
          type:
            - string
            - "null"
          maxLength: 63
          minLength: 2
          pattern: ^[ ,-.0-9A-Za-z]+$
        container:
          $ref: "#/components/schemas/UpdateContainer"
        replicas:
          type:
            - integer
            - "null"
          maximum: 250
          minimum: 0
        country_codes:
          description: List of countries nodes must be located in. Remove this field to
            permit nodes from any country.
          type:
            - array
            - "null"
          items:
            $ref: "#/components/schemas/CountryCode"
          maxItems: 500
          minItems: 1
        networking:
          $ref: "#/components/schemas/UpdateContainerGroupNetworking"
        liveness_probe:
          $ref: "#/components/schemas/ContainerGroupLivenessProbe"
        readiness_probe:
          $ref: "#/components/schemas/ContainerGroupReadinessProbe"
        startup_probe:
          $ref: "#/components/schemas/ContainerGroupStartupProbe"
        queue_autoscaler:
          $ref: "#/components/schemas/QueueAutoscaler"
      additionalProperties: false
    UpdateContainerGroupNetworking:
      description: Represents update container group networking parameters
      type: object
      properties:
        port:
          type:
            - integer
            - "null"
          maximum: 65535
          minimum: 1
      additionalProperties: false
    ContainerGroupNetworking:
      description: Represents container group networking parameters
      type:
        - object
        - "null"
      properties:
        protocol:
          $ref: "#/components/schemas/ContainerNetworkingProtocol"
        port:
          type: integer
          maximum: 65535
          minimum: 1
        auth:
          type: boolean
        dns:
          type: string
          format: url
        load_balancer:
          type: string
          default: round_robin
          enum:
            - round_robin
            - least_number_of_connections
        single_connection_limit:
          type: boolean
          default: false
        client_request_timeout:
          type: integer
          default: 100000
          maximum: 100000
          minimum: 1
        server_response_timeout:
          type: integer
          default: 100000
          maximum: 100000
          minimum: 1
      additionalProperties: false
      required:
        - protocol
        - port
        - auth
        - dns
    CreateContainerGroupNetworking:
      description: Represents container group networking parameters
      type:
        - object
        - "null"
      properties:
        protocol:
          $ref: "#/components/schemas/ContainerNetworkingProtocol"
        port:
          type: integer
          maximum: 65535
          minimum: 1
        auth:
          type: boolean
        load_balancer:
          type: string
          default: round_robin
          enum:
            - round_robin
            - least_number_of_connections
        single_connection_limit:
          type: boolean
          default: false
        client_request_timeout:
          type: integer
          default: 100000
          maximum: 100000
          minimum: 1
        server_response_timeout:
          type: integer
          default: 100000
          maximum: 100000
          minimum: 1
      additionalProperties: false
      required:
        - protocol
        - port
        - auth
    ContainerGroupStartupProbe:
      description: Represents the container group startup probe
      type:
        - object
        - "null"
      properties:
        tcp:
          $ref: "#/components/schemas/ContainerGroupProbeTcp"
        http:
          $ref: "#/components/schemas/ContainerGroupProbeHttp"
        grpc:
          $ref: "#/components/schemas/ContainerGroupProbeGrpc"
        exec:
          $ref: "#/components/schemas/ContainerGroupProbeExec"
        initial_delay_seconds:
          type: integer
          default: 0
          minimum: 0
        period_seconds:
          type: integer
          default: 3
          minimum: 1
        timeout_seconds:
          type: integer
          default: 10
          minimum: 1
        success_threshold:
          type: integer
          default: 2
          minimum: 1
        failure_threshold:
          type: integer
          default: 1200
          minimum: 1
      additionalProperties: false
      required:
        - initial_delay_seconds
        - period_seconds
        - timeout_seconds
        - success_threshold
        - failure_threshold
    ContainerGroupLivenessProbe:
      description: Represents the container group liveness probe
      type:
        - object
        - "null"
      properties:
        tcp:
          $ref: "#/components/schemas/ContainerGroupProbeTcp"
        http:
          $ref: "#/components/schemas/ContainerGroupProbeHttp"
        grpc:
          $ref: "#/components/schemas/ContainerGroupProbeGrpc"
        exec:
          $ref: "#/components/schemas/ContainerGroupProbeExec"
        initial_delay_seconds:
          type: integer
          default: 0
          minimum: 0
        period_seconds:
          type: integer
          default: 10
          minimum: 1
        timeout_seconds:
          type: integer
          default: 30
          minimum: 1
        success_threshold:
          type: integer
          default: 1
          minimum: 1
        failure_threshold:
          type: integer
          default: 3
          minimum: 1
      additionalProperties: false
      required:
        - initial_delay_seconds
        - period_seconds
        - timeout_seconds
        - success_threshold
        - failure_threshold
    ContainerGroupReadinessProbe:
      description: Represents the container group readiness probe
      type:
        - object
        - "null"
      properties:
        tcp:
          $ref: "#/components/schemas/ContainerGroupProbeTcp"
        http:
          $ref: "#/components/schemas/ContainerGroupProbeHttp"
        grpc:
          $ref: "#/components/schemas/ContainerGroupProbeGrpc"
        exec:
          $ref: "#/components/schemas/ContainerGroupProbeExec"
        initial_delay_seconds:
          type: integer
          default: 0
          minimum: 0
        period_seconds:
          type: integer
          default: 1
          minimum: 1
        timeout_seconds:
          type: integer
          default: 1
          minimum: 1
        success_threshold:
          type: integer
          default: 1
          minimum: 1
        failure_threshold:
          type: integer
          default: 3
          minimum: 1
      additionalProperties: false
      required:
        - initial_delay_seconds
        - period_seconds
        - timeout_seconds
        - success_threshold
        - failure_threshold
    ContainerProbeHttpScheme:
      type: string
      enum:
        - http
    HttpHeaders:
      type: array
      items:
        type: object
        additionalProperties: false
        required:
          - name
          - value
        properties:
          name:
            type: string
          value:
            type: string
    ContainerGroupProbeHttp:
      type: object
      properties:
        path:
          type: string
        port:
          type: integer
          maximum: 65536
          minimum: 0
        scheme:
          $ref: "#/components/schemas/ContainerProbeHttpScheme"
        headers:
          $ref: "#/components/schemas/HttpHeaders"
      additionalProperties: false
      required:
        - path
        - port
    ContainerGroupProbeTcp:
      type: object
      properties:
        port:
          type: integer
          maximum: 65536
          minimum: 0
      additionalProperties: false
      required:
        - port
    ContainerGroupProbeGrpc:
      type: object
      properties:
        service:
          type: string
        port:
          type: integer
          maximum: 65536
          minimum: 0
      additionalProperties: false
      required:
        - service
        - port
    ContainerGroupProbeExec:
      type: object
      properties:
        command:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - command
    WorkloadErrorList:
      description: Represents a list of workload errors
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/WorkloadError"
          maxItems: 50
          minItems: 0
      additionalProperties: false
      deprecated: true
      required:
        - items
    WorkloadError:
      description: Represents a workload error
      type: object
      properties:
        detail:
          type: string
        failed_at:
          type: string
          format: date-time
        instance_id:
          type: string
          format: uuid
        machine_id:
          type: string
          format: uuid
        allocated_at:
          type: string
          format: date-time
        started_at:
          type:
            - string
            - "null"
          format: date-time
        version:
          type: integer
          minimum: 1
      additionalProperties: false
      deprecated: true
      required:
        - detail
        - failed_at
        - instance_id
        - machine_id
        - allocated_at
        - version
    SystemLogList:
      description: Represents a list of system logs
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/SystemLog"
          maxItems: 50
          minItems: 0
      additionalProperties: false
      required:
        - items
    SystemLog:
      description: Represents a system log
      type: object
      properties:
        event_name:
          description: The name of the event
          type: string
        event_time:
          description: The UTC date & time when the log item was created
          type: string
          format: date-time
        instance_id:
          description: The unique instance ID
          type: string
          format: uuid
        machine_id:
          description: The organization-specific machine ID
          type: string
          format: uuid
        version:
          description: The version instance ID
          type: string
        resource_cpu:
          description: The number of CPUs
          type:
            - integer
            - "null"
          maximum: 16
          minimum: 1
        resource_memory:
          description: The memory amount in MB
          type:
            - integer
            - "null"
          maximum: 61440
          minimum: 1024
        resource_gpu_class:
          description: The GPU class name
          type: string
        resource_storage_amount:
          description: The storage amount in bytes
          type:
            - integer
            - "null"
          format: int64
          maximum: 53687091200
          minimum: 1073741824
      additionalProperties: false
      required:
        - event_name
        - event_time
        - version
        - resource_gpu_class
        - resource_cpu
        - resource_memory
        - resource_storage_amount
    QueueList:
      description: Represents a list of queues
      type: object
      properties:
        items:
          description: The list of queues.
          type: array
          items:
            $ref: "#/components/schemas/Queue"
          maxItems: 100
          minItems: 0
      additionalProperties: false
      required:
        - items
    QueueJobList:
      description: Represents a list of queue jobs
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/QueueJob"
          maxItems: 100
          minItems: 0
      additionalProperties: false
      required:
        - items
    Queue:
      description: Represents a queue.
      type: object
      properties:
        id:
          description: The queue identifier. This is automatically generated and assigned
            when the queue is created.
          type: string
          format: uuid
        name:
          description: The queue name. This must be unique within the project.
          type: string
          maxLength: 63
          minLength: 2
          pattern: ^[a-z][a-z0-9-]{0,61}[a-z0-9]$
        display_name:
          description: The display name. This may be used as a more human-readable name.
          type: string
          maxLength: 63
          minLength: 2
          pattern: ^[ ,-.0-9A-Za-z]+$
        description:
          description: The description. This may be used as a space for notes or other
            information about the queue.
          type:
            - string
            - "null"
          maxLength: 500
          minLength: 0
        container_groups:
          type: array
          items:
            $ref: "#/components/schemas/ContainerGroup"
          maxItems: 100
          minItems: 0
        create_time:
          description: The date and time the queue was created.
          type: string
          format: date-time
        update_time:
          description: The date and time the queue was last updated.
          type: string
          format: date-time
      additionalProperties: false
      required:
        - id
        - name
        - display_name
        - container_groups
        - create_time
        - update_time
    CreateQueue:
      description: Represents a request to create a new queue.
      type: object
      properties:
        name:
          description: The queue name. This must be unique within the project.
          type: string
          maxLength: 63
          minLength: 2
          pattern: ^[a-z][a-z0-9-]{0,61}[a-z0-9]$
        display_name:
          description: The display name. This may be used as a more human-readable name.
          type:
            - string
            - "null"
          maxLength: 63
          minLength: 2
          pattern: ^[ ,-.0-9A-Za-z]+$
        description:
          description: The description. This may be used as a space for notes or other
            information about the queue.
          type:
            - string
            - "null"
          maxLength: 500
          minLength: 0
      additionalProperties: false
      required:
        - name
    UpdateQueue:
      description: Represents a request to update an existing queue.
      type: object
      properties:
        display_name:
          description: The display name. This may be used as a more human-readable name.
          type:
            - string
            - "null"
          maxLength: 63
          minLength: 2
          pattern: ^[ ,-.0-9A-Za-z]+$
        description:
          description: The description. This may be used as a space for notes or other
            information about the queue.
          type:
            - string
            - "null"
          maxLength: 500
          minLength: 0
      additionalProperties: false
    QueueJob:
      description: Represents a queue job
      type: object
      properties:
        id:
          type: string
          format: uuid
        input:
          description: The job input. May be any valid JSON.
        metadata:
          type:
            - object
            - "null"
          maxProperties: 20
        webhook:
          type:
            - string
            - "null"
          format: url
        status:
          type: string
          enum:
            - pending
            - running
            - succeeded
            - cancelled
            - failed
        events:
          type: array
          items:
            $ref: "#/components/schemas/QueueJobEvent"
          maxItems: 1000
          minItems: 0
        output:
          description: The job output. May be any valid JSON.
        create_time:
          type: string
          format: date-time
        update_time:
          type: string
          format: date-time
      additionalProperties: false
      required:
        - id
        - input
        - status
        - events
        - create_time
        - update_time
    QueueJobEvent:
      description: Represents an event for queue job
      type: object
      properties:
        action:
          type: string
          enum:
            - created
            - started
            - succeeded
            - cancelled
            - failed
        time:
          type: string
          format: date-time
      additionalProperties: false
      required:
        - action
        - time
    CreateQueueJob:
      description: Represents a request to create a queue job
      type: object
      properties:
        input:
          description: The job input. May be any valid JSON.
        metadata:
          type:
            - object
            - "null"
          maxProperties: 20
        webhook:
          type:
            - string
            - "null"
          format: url
      additionalProperties: false
      required:
        - input
    Container:
      description: Represents a container
      type: object
      properties:
        image:
          type: string
          maxLength: 1024
          minLength: 1
        resources:
          $ref: "#/components/schemas/ContainerResourceRequirements"
        command:
          type: array
          items:
            type: string
          maxItems: 100
          minItems: 0
        priority:
          $ref: "#/components/schemas/ContainerGroupPriority"
        size:
          type: integer
          format: int64
        hash:
          type: string
        environment_variables:
          type: object
          additionalProperties:
            type: string
        logging:
          type:
            - object
            - "null"
          additionalProperties: false
          properties:
            axiom:
              type:
                - object
                - "null"
              additionalProperties: false
              properties:
                host:
                  type: string
                  maxLength: 1000
                  minLength: 1
                api_token:
                  type: string
                  maxLength: 1000
                  minLength: 1
                dataset:
                  type: string
                  maxLength: 1000
                  minLength: 1
              required:
                - host
                - api_token
                - dataset
            datadog:
              type:
                - object
                - "null"
              additionalProperties: false
              properties:
                host:
                  type: string
                  maxLength: 1000
                  minLength: 1
                api_key:
                  type: string
                  maxLength: 1000
                  minLength: 1
                tags:
                  type:
                    - array
                    - "null"
                  items:
                    type: object
                    additionalProperties: false
                    required:
                      - name
                      - value
                    properties:
                      name:
                        type: string
                      value:
                        type: string
                  maxItems: 1000
                  minItems: 0
              required:
                - host
                - api_key
            new_relic:
              type:
                - object
                - "null"
              additionalProperties: false
              properties:
                host:
                  type: string
                  maxLength: 1000
                  minLength: 1
                ingestion_key:
                  type: string
                  maxLength: 1000
                  minLength: 1
              required:
                - host
                - ingestion_key
            splunk:
              type:
                - object
                - "null"
              additionalProperties: false
              properties:
                host:
                  type: string
                  maxLength: 1000
                  minLength: 1
                token:
                  type: string
                  maxLength: 1000
                  minLength: 1
              required:
                - host
                - token
            tcp:
              type:
                - object
                - "null"
              additionalProperties: false
              properties:
                host:
                  type: string
                  maxLength: 1000
                  minLength: 1
                port:
                  type: integer
                  maximum: 65535
                  minimum: 1
              required:
                - host
                - port
            http:
              type:
                - object
                - "null"
              additionalProperties: false
              properties:
                host:
                  type: string
                  maxLength: 1000
                  minLength: 1
                port:
                  type: integer
                  maximum: 65535
                  minimum: 1
                user:
                  type:
                    - string
                    - "null"
                password:
                  type:
                    - string
                    - "null"
                path:
                  type:
                    - string
                    - "null"
                format:
                  type: string
                  enum:
                    - json
                    - json_lines
                headers:
                  type:
                    - array
                    - "null"
                  items:
                    type: object
                    additionalProperties: false
                    required:
                      - name
                      - value
                    properties:
                      name:
                        type: string
                      value:
                        type: string
                  maxItems: 1000
                  minItems: 0
                compression:
                  type: string
                  enum:
                    - none
                    - gzip
              required:
                - host
                - port
                - format
                - compression
      additionalProperties: false
      required:
        - image
        - resources
        - command
    CreateContainer:
      description: Represents a container
      type: object
      properties:
        image:
          type: string
          maxLength: 1024
          minLength: 1
        resources:
          $ref: "#/components/schemas/ContainerResourceRequirements"
        command:
          description: Pass a command (and optional arguments) to override the ENTRYPOINT
            and CMD of a container image.
          type:
            - array
            - "null"
          items:
            type: string
          maxItems: 100
          minItems: 0
        priority:
          $ref: "#/components/schemas/ContainerGroupPriority"
        environment_variables:
          type: object
          additionalProperties:
            type: string
        logging:
          type:
            - object
            - "null"
          additionalProperties: false
          properties:
            axiom:
              type:
                - object
                - "null"
              additionalProperties: false
              properties:
                host:
                  type: string
                  maxLength: 1000
                  minLength: 1
                api_token:
                  type: string
                  maxLength: 1000
                  minLength: 1
                dataset:
                  type: string
                  maxLength: 1000
                  minLength: 1
              required:
                - host
                - api_token
                - dataset
            datadog:
              type:
                - object
                - "null"
              additionalProperties: false
              properties:
                host:
                  type: string
                  maxLength: 1000
                  minLength: 1
                api_key:
                  type: string
                  maxLength: 1000
                  minLength: 1
                tags:
                  type:
                    - array
                    - "null"
                  items:
                    type: object
                    additionalProperties: false
                    required:
                      - name
                      - value
                    properties:
                      name:
                        type: string
                      value:
                        type: string
                  maxItems: 1000
                  minItems: 0
              required:
                - host
                - api_key
            new_relic:
              type:
                - object
                - "null"
              additionalProperties: false
              properties:
                host:
                  type: string
                  maxLength: 1000
                  minLength: 1
                ingestion_key:
                  type: string
                  maxLength: 1000
                  minLength: 1
              required:
                - host
                - ingestion_key
            splunk:
              type:
                - object
                - "null"
              additionalProperties: false
              properties:
                host:
                  type: string
                  maxLength: 1000
                  minLength: 1
                token:
                  type: string
                  maxLength: 1000
                  minLength: 1
              required:
                - host
                - token
            tcp:
              type:
                - object
                - "null"
              additionalProperties: false
              properties:
                host:
                  type: string
                  maxLength: 1000
                  minLength: 1
                port:
                  type: integer
                  maximum: 65535
                  minimum: 1
              required:
                - host
                - port
            http:
              type:
                - object
                - "null"
              additionalProperties: false
              properties:
                host:
                  type: string
                  maxLength: 1000
                  minLength: 1
                port:
                  type: integer
                  maximum: 65535
                  minimum: 1
                user:
                  type:
                    - string
                    - "null"
                password:
                  type:
                    - string
                    - "null"
                path:
                  type:
                    - string
                    - "null"
                format:
                  type: string
                  enum:
                    - json
                    - json_lines
                headers:
                  type:
                    - array
                    - "null"
                  items:
                    type: object
                    additionalProperties: false
                    required:
                      - name
                      - value
                    properties:
                      name:
                        type: string
                      value:
                        type: string
                  maxItems: 1000
                  minItems: 0
                compression:
                  type: string
                  enum:
                    - none
                    - gzip
              required:
                - host
                - port
                - format
                - compression
        registry_authentication:
          type:
            - object
            - "null"
          properties:
            basic:
              type:
                - object
                - "null"
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
            gcp_gcr:
              type:
                - object
                - "null"
              properties:
                service_key:
                  type: string
              required:
                - service_key
            aws_ecr:
              type:
                - object
                - "null"
              properties:
                access_key_id:
                  type: string
                secret_access_key:
                  type: string
              required:
                - access_key_id
                - secret_access_key
            docker_hub:
              type:
                - object
                - "null"
              properties:
                username:
                  type: string
                personal_access_token:
                  type: string
              required:
                - username
                - personal_access_token
            gcp_gar:
              type:
                - object
                - "null"
              properties:
                service_key:
                  type: string
              required:
                - service_key
      additionalProperties: false
      required:
        - image
        - resources
    UpdateContainer:
      description: Represents an update container object
      type:
        - object
        - "null"
      properties:
        image:
          type:
            - string
            - "null"
          maxLength: 1024
          minLength: 1
        resources:
          type:
            - object
            - "null"
          additionalProperties: false
          properties:
            cpu:
              type:
                - integer
                - "null"
              maximum: 16
              minimum: 1
            memory:
              type:
                - integer
                - "null"
              maximum: 61440
              minimum: 1024
            gpu_classes:
              type:
                - array
                - "null"
              items:
                type: string
                format: uuid
            storage_amount:
              type:
                - integer
                - "null"
              format: int64
              maximum: 53687091200
              minimum: 1073741824
        command:
          description: Pass a command (and optional arguments) to override the ENTRYPOINT
            and CMD of a container image.
          type:
            - array
            - "null"
          items:
            type: string
          maxItems: 100
          minItems: 0
        priority:
          $ref: "#/components/schemas/ContainerGroupPriority"
        environment_variables:
          type: object
          additionalProperties:
            type: string
        logging:
          type:
            - object
            - "null"
          additionalProperties: false
          properties:
            axiom:
              type:
                - object
                - "null"
              additionalProperties: false
              properties:
                host:
                  type: string
                  maxLength: 1000
                  minLength: 1
                api_token:
                  type: string
                  maxLength: 1000
                  minLength: 1
                dataset:
                  type: string
                  maxLength: 1000
                  minLength: 1
              required:
                - host
                - api_token
                - dataset
            datadog:
              type:
                - object
                - "null"
              additionalProperties: false
              properties:
                host:
                  type: string
                  maxLength: 1000
                  minLength: 1
                api_key:
                  type: string
                  maxLength: 1000
                  minLength: 1
                tags:
                  type:
                    - array
                    - "null"
                  items:
                    type: object
                    additionalProperties: false
                    required:
                      - name
                      - value
                    properties:
                      name:
                        type: string
                      value:
                        type: string
                  maxItems: 1000
                  minItems: 0
              required:
                - host
                - api_key
            new_relic:
              type:
                - object
                - "null"
              additionalProperties: false
              properties:
                host:
                  type: string
                  maxLength: 1000
                  minLength: 1
                ingestion_key:
                  type: string
                  maxLength: 1000
                  minLength: 1
              required:
                - host
                - ingestion_key
            splunk:
              type:
                - object
                - "null"
              additionalProperties: false
              properties:
                host:
                  type: string
                  maxLength: 1000
                  minLength: 1
                token:
                  type: string
                  maxLength: 1000
                  minLength: 1
              required:
                - host
                - token
            tcp:
              type:
                - object
                - "null"
              additionalProperties: false
              properties:
                host:
                  type: string
                  maxLength: 1000
                  minLength: 1
                port:
                  type: integer
                  maximum: 65535
                  minimum: 1
              required:
                - host
                - port
            http:
              type:
                - object
                - "null"
              additionalProperties: false
              properties:
                host:
                  type: string
                  maxLength: 1000
                  minLength: 1
                port:
                  type: integer
                  maximum: 65535
                  minimum: 1
                user:
                  type:
                    - string
                    - "null"
                password:
                  type:
                    - string
                    - "null"
                path:
                  type:
                    - string
                    - "null"
                format:
                  type: string
                  enum:
                    - json
                    - json_lines
                headers:
                  type:
                    - array
                    - "null"
                  items:
                    type: object
                    additionalProperties: false
                    required:
                      - name
                      - value
                    properties:
                      name:
                        type: string
                      value:
                        type: string
                  maxItems: 1000
                  minItems: 0
                compression:
                  type: string
                  enum:
                    - none
                    - gzip
              required:
                - host
                - port
                - format
                - compression
        registry_authentication:
          type:
            - object
            - "null"
          properties:
            basic:
              type:
                - object
                - "null"
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
            gcp_gcr:
              type:
                - object
                - "null"
              properties:
                service_key:
                  type: string
              required:
                - service_key
            aws_ecr:
              type:
                - object
                - "null"
              properties:
                access_key_id:
                  type: string
                secret_access_key:
                  type: string
              required:
                - access_key_id
                - secret_access_key
            docker_hub:
              type:
                - object
                - "null"
              properties:
                username:
                  type: string
                personal_access_token:
                  type: string
              required:
                - username
                - personal_access_token
            gcp_gar:
              type:
                - object
                - "null"
              properties:
                service_key:
                  type: string
              required:
                - service_key
      additionalProperties: false
    ContainerResourceRequirements:
      description: Represents a container resource requirements
      type: object
      properties:
        cpu:
          type: integer
          maximum: 16
          minimum: 1
        memory:
          type: integer
          maximum: 61440
          minimum: 1024
        gpu_classes:
          type:
            - array
            - "null"
          items:
            type: string
            format: uuid
        storage_amount:
          type:
            - integer
            - "null"
          format: int64
          maximum: 53687091200
          minimum: 1073741824
      additionalProperties: false
      required:
        - cpu
        - memory
    ContainerGroupState:
      description: Represents a container group state
      type: object
      properties:
        status:
          $ref: "#/components/schemas/ContainerGroupStatus"
        description:
          type:
            - string
            - "null"
        start_time:
          type: string
          format: date-time
        finish_time:
          type: string
          format: date-time
        instance_status_counts:
          $ref: "#/components/schemas/ContainerGroupInstanceStatusCount"
      additionalProperties: false
      required:
        - status
        - start_time
        - finish_time
        - instance_status_counts
    ContainerGroupInstanceStatusCount:
      description: Represents a container group instance status count
      type: object
      properties:
        allocating_count:
          type: integer
          minimum: 0
        creating_count:
          type: integer
          minimum: 0
        running_count:
          type: integer
          minimum: 0
        stopping_count:
          type: integer
          minimum: 0
      additionalProperties: false
      required:
        - allocating_count
        - creating_count
        - running_count
        - stopping_count
    ContainerGroupInstance:
      description: Represents the details of a single container group instance
      type: object
      properties:
        instance_id:
          description: The unique instance ID
          type: string
          format: uuid
        machine_id:
          description: The machine ID
          type: string
          format: uuid
        state:
          description: The state of the container group instance
          type: string
          enum:
            - allocating
            - downloading
            - creating
            - running
            - stopping
        update_time:
          description: The UTC date & time when the workload on this machine transitioned
            to the current state
          type: string
          format: date-time
        version:
          description: The version of the running container group
          type: integer
          minimum: 1
        ready:
          description: Specifies whether the container group instance is currently passing
            its readiness check. If no readiness probe is defined, is true once
            fully started.
          type: boolean
        started:
          description: Specifies whether the container group instance passed its startup
            probe. Is always true when no startup probe is defined.
          type: boolean
      additionalProperties: false
      required:
        - instance_id
        - machine_id
        - state
        - update_time
        - version
    ContainerGroupInstances:
      description: Represents a list of container group instances
      type: object
      properties:
        instances:
          type: array
          items:
            $ref: "#/components/schemas/ContainerGroupInstance"
          maxItems: 1000
          minItems: 0
      additionalProperties: false
      required:
        - instances
    QueueAutoscaler:
      description: Represents the autoscaling rules for a queue
      type:
        - object
        - "null"
      properties:
        min_replicas:
          description: The minimum number of instances the container can scale down to
          type: integer
          maximum: 100
          minimum: 0
        max_replicas:
          description: The maximum number of instances the container can scale up to
          type: integer
          maximum: 250
          minimum: 1
        desired_queue_length:
          type: integer
          maximum: 100
          minimum: 1
        polling_period:
          description: The period (in seconds) in which the queue checks the formula
          type: integer
          maximum: 1800
          minimum: 15
        max_upscale_per_minute:
          description: The maximum number of instances that can be added per minute
          type: integer
          maximum: 100
          minimum: 1
        max_downscale_per_minute:
          description: The maximum number of instances that can be removed per minute
          type: integer
          maximum: 100
          minimum: 1
      additionalProperties: false
      required:
        - min_replicas
        - max_replicas
        - desired_queue_length
    ContainerGroupQueueConnection:
      description: Represents container group queue connection
      type:
        - object
        - "null"
      properties:
        path:
          type: string
          maxLength: 1024
          minLength: 1
        port:
          type: integer
          maximum: 65535
          minimum: 1
        queue_name:
          type: string
          maxLength: 63
          minLength: 2
          pattern: ^[a-z][a-z0-9-]{0,61}[a-z0-9]$
      additionalProperties: false
      required:
        - path
        - port
        - queue_name
    GpuClass:
      description: Represents a GPU Class
      type: object
      properties:
        id:
          description: The unique identifier
          type: string
          format: uuid
        name:
          description: The GPU class name
          type: string
          maxLength: 63
          minLength: 2
          pattern: ^[ -~]{2,63}$
        prices:
          description: The list of prices for each container group priority
          type: array
          items:
            $ref: "#/components/schemas/GpuClassPrice"
          maxItems: 100
          minItems: 1
        is_high_demand:
          description: Whether the GPU class is in high demand
          type: boolean
      additionalProperties: false
      required:
        - id
        - name
        - prices
    GpuClassesList:
      description: Represents a list of GPU classes
      type: object
      properties:
        items:
          description: The list of GPU classes
          type: array
          items:
            $ref: "#/components/schemas/GpuClass"
          maxItems: 100
          minItems: 0
      additionalProperties: false
      required:
        - items
    GpuClassPrice:
      description: Represents the price of a GPU class for a given container group priority
      type: object
      properties:
        priority:
          $ref: "#/components/schemas/ContainerGroupPriority"
        price:
          description: The price
          type: string
          maxLength: 20
          minLength: 1
      additionalProperties: false
      required:
        - priority
        - price
    ContainerGroupPriority:
      type:
        - string
        - "null"
      enum:
        - high
        - medium
        - low
        - batch
    Quotas:
      description: Represents the organization quotas
      type: object
      properties:
        container_groups_quotas:
          $ref: "#/components/schemas/ContainerGroupsQuotas"
        create_time:
          description: The time the resource was created
          type: string
          format: date-time
        update_time:
          description: The time the resource was last updated
          type: string
          format: date-time
      additionalProperties: false
      required:
        - container_groups_quotas
    ContainerGroupsQuotas:
      type: object
      properties:
        max_created_container_groups:
          type: integer
        container_instance_quota:
          type: integer
        max_container_group_reallocations_per_minute:
          type: integer
          default: 10
          minimum: 0
        max_container_group_recreates_per_minute:
          type: integer
          default: 10
          minimum: 0
        max_container_group_restarts_per_minute:
          type: integer
          default: 10
          minimum: 0
      required:
        - max_created_container_groups
        - container_instance_quota
    InferenceEndpoint:
      description: Represents an inference endpoint
      type: object
      properties:
        id:
          description: The unique identifier
          type: string
          format: uuid
        name:
          description: The inference endpoint name
          type: string
        display_name:
          description: The inference endpoint display name
          type: string
          maxLength: 63
          minLength: 2
          pattern: ^[ ,-.0-9A-Za-z]+$
        description:
          description: a brief description of the inference endpoint
          type: string
        endpoint_url:
          description: The URL of the inference endpoint
          type: string
          format: url
        readme:
          description: A markdown file containing a detailed description of the inference
            endpoint
          type: string
        price_description:
          description: A description of the price
          type: string
        icon_image:
          description: The URL of the icon image
          type: string
          format: url
      additionalProperties: false
      required:
        - id
        - name
        - display_name
        - description
        - endpoint_url
        - readme
        - price_description
        - icon_image
    InferenceEndpointsList:
      description: Represents a list of inference endpoints
      type: object
      properties:
        items:
          description: The list of items
          type: array
          items:
            $ref: "#/components/schemas/InferenceEndpoint"
          maxItems: 100
          minItems: 0
      additionalProperties: false
      required:
        - items
    InferenceEndpointJobList:
      description: Represents a list of inference endpoint jobs
      type: object
      properties:
        items:
          description: The list of items
          type: array
          items:
            $ref: "#/components/schemas/InferenceEndpointJob"
          maxItems: 100
          minItems: 0
      additionalProperties: false
      required:
        - items
    InferenceEndpointJob:
      description: Represents a inference endpoint job
      type: object
      properties:
        id:
          description: The unique identifier.
          type: string
          format: uuid
          title: ID
        input:
          description: The job input. May be any valid JSON.
          title: Input
        inference_endpoint_name:
          description: The inference endpoint name.
          type: string
          title: Inference Endpoint Name
        metadata:
          description: The job metadata. May be any valid JSON.
          type:
            - object
            - "null"
          maxProperties: 20
          title: Metadata
        webhook:
          description: The webhook URL called when the job completes.
          type:
            - string
            - "null"
          format: url
          title: Webhook
        status:
          description: The current status.
          type: string
          enum:
            - pending
            - running
            - succeeded
            - cancelled
            - failed
          title: Status
        events:
          description: The list of events.
          type: array
          items:
            $ref: "#/components/schemas/InferenceEndpointJobEvent"
          maxItems: 1000
          minItems: 0
          title: Events
        organization_name:
          $ref: "#/components/schemas/OrganizationName"
        output:
          description: The job output. May be any valid JSON.
          title: Output
        create_time:
          description: The time the job was created.
          type: string
          format: date-time
          title: Create Time
        update_time:
          description: The time the job was last updated.
          type: string
          format: date-time
          title: Update Time
      additionalProperties: false
      required:
        - id
        - input
        - status
        - events
        - create_time
        - update_time
        - inference_endpoint_name
        - organization_name
    InferenceEndpointJobEvent:
      description: Represents an event for inference endpoint job
      type: object
      properties:
        action:
          type: string
          enum:
            - created
            - started
            - succeeded
            - cancelled
            - failed
        time:
          type: string
          format: date-time
      additionalProperties: false
      required:
        - action
        - time
    CreateInferenceEndpointJob:
      description: Represents a request to create a inference endpoint job
      type: object
      properties:
        input:
          description: The job input. May be any valid JSON.
        metadata:
          type:
            - object
            - "null"
          maxProperties: 20
        webhook:
          type:
            - string
            - "null"
          format: url
          maxLength: 2000
      additionalProperties: false
      required:
        - input
    WebhookSecretKey:
      description: Represents a webhook secret key
      type: object
      properties:
        secret_key:
          description: The webhook secret key
          type: string
      additionalProperties: false
      required:
        - secret_key
  requestBodies:
    CreateContainerGroup:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateContainerGroup"
          examples:
            jsonExample:
              value:
                name: sim1
                container:
                  image: acme-corp/anvil-drop-simulator:v65535
                  resources:
                    cpu: 1
                    memory: 2048
                  command: []
                autostart_policy: false
                restart_policy: always
                replicas: 1
    UpdateContainerGroup:
      required: true
      content:
        application/merge-patch+json:
          schema:
            $ref: "#/components/schemas/UpdateContainerGroup"
          examples:
            jsonExample:
              value:
                display_name: Simulation 1
    CreateQueue:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateQueue"
          examples:
            jsonExample:
              value:
                name: fifo-queue
                display_name: FIFO Queue
                description: This queue is used to distribute jobs to workers running on
                  SaladCloud with a FIFO workflow.
    UpdateQueue:
      required: true
      content:
        application/merge-patch+json:
          schema:
            $ref: "#/components/schemas/UpdateQueue"
          examples:
            jsonExample:
              value:
                display_name: FIFO Queue
    CreateQueueJob:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateQueueJob"
          examples:
            jsonExample:
              value:
                input: value
                metadata:
                  property1: value1
                  property2: value2
                webhook: https://webhooks.example.com:8080
    CreateInferenceEndpointJob:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateInferenceEndpointJob"
          examples:
            jsonExample:
              value:
                input:
                  property1: value1
                  property2: value2
                metadata:
                  property1: value1
                  property2: value2
                webhook: https://webhooks.example.com:8080
  responses:
    "400":
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetails"
          examples:
            jsonExample:
              value:
                type: about:blank
                title: Bad Request
                status: 400
                detail: Bad Request
                instance: 60907fdc
    "403":
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetails"
          examples:
            jsonExample:
              value:
                type: about:blank
                title: Forbidden
                status: 403
                detail: Forbidden
                instance: 962fc00e
    "404":
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetails"
          examples:
            jsonExample:
              value:
                type: about:blank
                title: Not Found
                status: 404
                detail: Not Found
                instance: 72ea5f29
    "429":
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetails"
          examples:
            jsonExample:
              value:
                type: about:blank
                title: Too Many Requests
                status: 409
                detail: Too Many Requests
                instance: cd6306ee
    UnknownError:
      description: Unknown Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProblemDetails"
          examples:
            jsonExample:
              value:
                type: about:blank
                title: Unknown Error
                status: 500
                detail: Unknown Error
                instance: 188f9bbb
    GetContainerGroup:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ContainerGroup"
          examples:
            jsonExample:
              value:
                id: 500dec9c-aaf3-4a0b-aa7f-de6483d0b9b1
                name: sim1
                display_name: Simulation 1
                container:
                  image: acme-corp/anvil-drop-simulator:v65535
                  resources:
                    cpu: 1
                    memory: 2048
                  command: []
                  size: 1024
                  hash: "0x1234567890abcdef"
                autostart_policy: true
                restart_policy: always
                replicas: 1
                current_state:
                  status: stopped
                  start_time: 2020-07-04T19:00:00Z
                  finish_time: 2020-07-04T19:00:00Z
                  instance_status_counts:
                    allocating_count: 1
                    creating_count: 1
                    running_count: 1
                    stopping_count: 1
                create_time: 2020-07-04T19:00:00Z
                update_time: 2020-07-04T19:00:00Z
                pending_change: false
                version: 1
                queue_autoscaler:
                  min_replicas: 1
                  max_replicas: 10
                  desired_queue_length: 100
                  polling_period: 15
                  max_upscale_per_minute: 5
                  max_downscale_per_minute: 2
    ListContainerGroups:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ContainerGroupList"
          examples:
            jsonExample:
              value:
                items:
                  - id: 500dec9c-aaf3-4a0b-aa7f-de6483d0b9b1
                    name: sim1
                    display_name: Simulation 1
                    container:
                      image: acme-corp/anvil-drop-simulator:v65535
                      resources:
                        cpu: 1
                        memory: 2048
                      command: []
                      size: 1024
                      hash: "0x1234567890abcdef"
                    autostart_policy: true
                    restart_policy: always
                    replicas: 1
                    current_state:
                      status: stopped
                      start_time: 2020-07-04T19:00:00Z
                      finish_time: 2020-07-04T19:00:00Z
                      instance_status_counts:
                        allocating_count: 1
                        creating_count: 1
                        running_count: 1
                        stopping_count: 1
                    create_time: 2020-07-04T19:00:00Z
                    update_time: 2020-07-04T19:00:00Z
                    pending_change: false
                    version: 1
                  - id: b697f678-b987-4992-bbbf-d6dda171b34a
                    name: sim2
                    display_name: Simulation 2
                    container:
                      image: acme-corp/anvil-drop-simulator:v65536
                      resources:
                        cpu: 1
                        memory: 2048
                      command: []
                      size: 1024
                      hash: "0x1234567890abcdef"
                    autostart_policy: true
                    restart_policy: always
                    replicas: 1
                    current_state:
                      status: stopped
                      start_time: 2020-07-04T19:00:00Z
                      finish_time: 2020-07-04T19:00:00Z
                      instance_status_counts:
                        allocating_count: 1
                        creating_count: 1
                        running_count: 1
                        stopping_count: 1
                    create_time: 2020-07-04T19:00:00Z
                    update_time: 2020-07-04T19:00:00Z
                    pending_change: false
                    version: 2
    CreateContainerGroup:
      description: Created
      headers:
        Location:
          schema:
            type: string
            examples:
              - /organizations/acme-corp/projects/anvil-drop-simulator/containers/sim1
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ContainerGroup"
          examples:
            jsonExample:
              value:
                id: 500dec9c-aaf3-4a0b-aa7f-de6483d0b9b1
                name: sim1
                display_name: Simulation 1
                container:
                  image: acme-corp/anvil-drop-simulator:v65535
                  resources:
                    cpu: 1
                    memory: 2048
                  command: []
                  size: 1024
                  hash: "0x1234567890abcdef"
                autostart_policy: true
                restart_policy: always
                replicas: 1
                current_state:
                  status: stopped
                  start_time: 2020-07-04T19:00:00Z
                  finish_time: 2020-07-04T19:00:00Z
                  instance_status_counts:
                    allocating_count: 1
                    creating_count: 1
                    running_count: 1
                    stopping_count: 1
                create_time: 2020-07-04T19:00:00Z
                update_time: 2020-07-04T19:00:00Z
                pending_change: false
                version: 1
      links:
        get_container_group_by_name:
          operationId: get_container_group
          parameters:
            container_group_name: $response.body#/name
    UpdateContainerGroup:
      description: OK
      content:
        application/merge-patch+json:
          schema:
            $ref: "#/components/schemas/ContainerGroup"
          examples:
            jsonExample:
              value:
                id: 500dec9c-aaf3-4a0b-aa7f-de6483d0b9b1
                name: sim1
                display_name: Simulation 1
                container:
                  image: acme-corp/anvil-drop-simulator:v65535
                  resources:
                    cpu: 1
                    memory: 2048
                  command: []
                  size: 1024
                  hash: "0x1234567890abcdef"
                autostart_policy: true
                restart_policy: always
                replicas: 1
                current_state:
                  status: stopped
                  start_time: 2020-07-04T19:00:00Z
                  finish_time: 2020-07-04T19:00:00Z
                  instance_status_counts:
                    allocating_count: 1
                    creating_count: 1
                    running_count: 1
                    stopping_count: 1
                create_time: 2020-07-04T19:00:00Z
                update_time: 2020-07-04T19:00:00Z
                pending_change: false
                version: 1
    DeleteContainerGroup:
      description: Accepted
    StartContainerGroup:
      description: Accepted
    StopContainerGroup:
      description: Accepted
    GetContainerGroupInstance:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ContainerGroupInstance"
          examples:
            jsonExample:
              value:
                machine_id: 5ebfa363-6e0b-4db1-b9be-70ed4995d0b1
                instance_id: 5ebfa363-6e0b-4db1-b9be-70ed4995d0b1
                state: running
                update_time: 2023-05-04T05:41:05Z
                version: 1
    ListContainerGroupInstances:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ContainerGroupInstances"
          examples:
            jsonExample:
              value:
                instances:
                  - machine_id: 5ebfa363-6e0b-4db1-b9be-70ed4995d0b1
                    instance_id: 5ebfa363-6e0b-4db1-b9be-70ed4995d0b1
                    state: running
                    update_time: 2023-05-04T05:41:05Z
                    version: 1
                  - machine_id: a6c2e6d5-6c5a-4b3b-a4d4-4b13c2b634ad
                    instance_id: a6c2e6d5-6c5a-4b3b-a4d4-4b13c2b634ad
                    state: creating
                    update_time: 2023-05-04T05:38:12Z
                    version: 1
                  - machine_id: a6c2e6d5-6c5a-4b3b-a4d4-4b13c2b634ad
                    instance_id: a6c2e6d5-6c5a-4b3b-a4d4-4b13c2b634ad
                    state: stopping
                    update_time: 2023-05-04T05:38:12Z
                    version: 1
    ReallocateContainerGroupInstance:
      description: Accepted
    RecreateContainerGroupInstance:
      description: Accepted
    RestartContainerGroupInstance:
      description: Accepted
    ListWorkloadErrors:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WorkloadErrorList"
          examples:
            jsonExample:
              value:
                items:
                  - detail: StartFailure:0
                    failed_at: 2023-09-15T21:38:45.1220217Z
                    machine_id: 2155a188-7304-8351-b98d-af6c79e5978f
                    instance_id: 2155a188-7304-8351-b98d-af6c79e5978f
                    allocated_at: 2023-09-15T21:25:39.4110673Z
                    started_at: null
                    version: 1
                  - detail: RunFailure:-1
                    failed_at: 2023-09-14T11:30:05.2271645Z
                    machine_id: dc96663a-fe19-345a-8363-174616159cb6
                    instance_id: dc96663a-fe19-345a-8363-174616159cb6
                    allocated_at: 2023-09-10T15:44:20.8139996Z
                    started_at: 2023-09-13T10:44:18.9824223Z
                    version: 1
    ListSystemLogs:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SystemLogList"
          examples:
            jsonExample:
              value:
                items:
                  - event_name: StartFailure:0
                    event_time: 2023-09-15T21:38:45.1220217Z
                    machine_id: 2155a188-7304-8351-b98d-af6c79e5978f
                    instance_id: 2155a188-7304-8351-b98d-af6c79e5978f
                    version: "1"
                    resource_cpu: 1
                    resource_storage_amount: 2048
                    resource_memory: 1024
                    resource_gpu_class: Any RTX GPU
                  - event_name: RunFailure:-1
                    event_time: 2023-09-14T11:30:05.2271645Z
                    machine_id: dc96663a-fe19-345a-8363-174616159cb6
                    instance_id: dc96663a-fe19-345a-8363-174616159cb6
                    version: "1"
                    resource_cpu: 1
                    resource_storage_amount: 2048
                    resource_memory: 1024
                    resource_gpu_class: Any RTX GPU
    ListQueues:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/QueueList"
          examples:
            jsonExample:
              value:
                items:
                  - id: 500dec9c-aaf3-4a0b-aa7f-de6483d0b9b1
                    name: fifo-queue
                    display_name: FIFO Queue
                    description: This queue is used to distribute jobs to workers running on
                      SaladCloud with a FIFO workflow.
                    container_groups: []
                    create_time: 2023-07-04T19:00:00Z
                    update_time: 2023-07-04T19:00:00Z
    CreateQueue:
      description: Created
      headers:
        Location:
          schema:
            type: string
            examples:
              - /organizations/acme-corp/projects/anvil-drop-simulator/queues/queue-1
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Queue"
          examples:
            jsonExample:
              value:
                id: 500dec9c-aaf3-4a0b-aa7f-de6483d0b9b1
                name: fifo-queue
                display_name: FIFO Queue
                description: This queue is used to distribute jobs to workers running on
                  SaladCloud with a FIFO workflow.
                container_groups: []
                create_time: 2023-07-04T19:00:00Z
                update_time: 2023-07-04T19:00:00Z
      links:
        get_queue_by_name:
          operationId: get_queue
          parameters:
            queue_name: $response.body#/name
    UpdateQueue:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Queue"
          examples:
            jsonExample:
              value:
                id: 500dec9c-aaf3-4a0b-aa7f-de6483d0b9b1
                name: fifo-queue
                display_name: FIFO Queue
                description: This queue is used to distribute jobs to workers running on
                  SaladCloud with a FIFO workflow.
                container_groups: []
                create_time: 2023-07-04T19:00:00Z
                update_time: 2023-07-04T19:00:00Z
    GetQueue:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Queue"
          examples:
            jsonExample:
              value:
                id: 500dec9c-aaf3-4a0b-aa7f-de6483d0b9b1
                name: fifo-queue
                display_name: FIFO Queue
                description: This queue is used to distribute jobs to workers running on
                  SaladCloud with a FIFO workflow.
                container_groups: []
                create_time: 2023-07-04T19:00:00Z
                update_time: 2023-07-04T19:00:00Z
    DeleteQueue:
      description: Accepted
    ListQueueJobs:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/QueueJobList"
          examples:
            jsonExample:
              value:
                items:
                  - id: 500dec9c-aaf3-4a0b-aa7f-de6483d0b9b1
                    input: {}
                    metadata: {}
                    webhook: https://webhooks.example.com:8080
                    status: pending
                    events:
                      - action: created
                        time: 2020-07-04T19:00:00Z
                    output: {}
                    create_time: 2020-07-04T19:00:00Z
                    update_time: 2020-07-04T19:00:00Z
                  - id: b697f678-b987-4992-bbbf-d6dda171b34a
                    input: {}
                    metadata: {}
                    webhook: https://webhooks.example.com:8080
                    status: pending
                    events:
                      - action: created
                        time: 2020-07-04T19:00:00Z
                    output: {}
                    create_time: 2020-07-04T19:00:00Z
                    update_time: 2020-07-04T19:00:00Z
    CreateQueueJob:
      description: Created
      headers:
        Location:
          schema:
            type: string
            examples:
              - /organizations/acme-corp/projects/anvil-drop-simulator/queues/queue-1/jobs/job-1
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/QueueJob"
          examples:
            jsonExample:
              value:
                id: 500dec9c-aaf3-4a0b-aa7f-de6483d0b9b1
                input: {}
                metadata: {}
                webhook: https://webhooks.example.com:8080
                status: pending
                events:
                  - action: created
                    time: 2020-07-04T19:00:00Z
                output: {}
                create_time: 2020-07-04T19:00:00Z
                update_time: 2020-07-04T19:00:00Z
      links:
        get_queue_job_by_name:
          operationId: get_queue_job
          parameters:
            queue_job_id: $response.body#/id
    GetQueueJob:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/QueueJob"
          examples:
            jsonExample:
              value:
                id: 500dec9c-aaf3-4a0b-aa7f-de6483d0b9b1
                input: {}
                metadata: {}
                webhook: https://webhooks.example.com:8080
                status: pending
                events:
                  - action: created
                    time: 2020-07-04T19:00:00Z
                output: {}
                create_time: 2020-07-04T19:00:00Z
                update_time: 2020-07-04T19:00:00Z
    DeleteQueueJob:
      description: Accepted
    ListGpuClasses:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GpuClassesList"
          examples:
            jsonExample:
              value:
                items:
                  - id: ed563892-aacd-40f5-80b7-90c9be6c759b
                    name: RTX 4090 (24 GB)
                    prices:
                      - priority: high
                        price: "0.50"
                      - priority: medium
                        price: "0.40"
                      - priority: low
                        price: "0.30"
                      - priority: batch
                        price: "0.20"
                    is_high_demand: true
                  - id: 951131f6-5acf-489c-b303-0906be8b26ef
                    name: RTX 3070 (8 GB)
                    prices:
                      - priority: high
                        price: "0.45"
                      - priority: medium
                        price: "0.35"
                      - priority: low
                        price: "0.30"
                      - priority: batch
                        price: "0.25"
                    is_high_demand: false
    GetQuotas:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Quotas"
          examples:
            jsonExample:
              value:
                container_groups_quotas:
                  max_created_container_groups: 10
                  container_instance_quota: 10
                create_time: 2020-07-04T19:00:00Z
                update_time: 2020-07-04T19:00:00Z
    GetInferenceEndpoint:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InferenceEndpoint"
          examples:
            jsonExample:
              value:
                id: 3cc0c401-4159-4760-a1e1-b2dec9c2440e
                name: avatar-generator
                display_name: Avatar Generator
                description: Generates the best avatars of cartoon characters
                endpoint_url: https://api.salad.io/organizations/acme-corp/inference-endpoints/avatar-generator
                readme: test-readme
                price_description: 0.05 credits per inference
                icon_image: https://api.salad.io/organizations/acme-corp/inference-endpoints/avatar-generator/icon
    ListInferenceEndpoints:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InferenceEndpointsList"
          examples:
            jsonExample:
              value:
                items:
                  - id: 3cc0c401-4159-4760-a1e1-b2dec9c2440e
                    name: avatar-generator
                    display_name: Avatar Generator
                    description: Generates the best avatars of cartoon characters
                    endpoint_url: https://api.salad.io/organizations/acme-corp/inference-endpoints/avatar-generator
                    readme: test-readme
                    price_description: 0.05 credits per inference
                    icon_image: https://api.salad.io/organizations/acme-corp/inference-endpoints/avatar-generator/icon
                  - id: 3cc0c401-4159-4760-a1e1-b2dec9c22893
                    name: audio-to-waveform
                    display_name: Audio to Waveform
                    description: Does something technical with audio
                    endpoint_url: https://api.salad.io/organizations/acme-corp/inference-endpoints/audio-to-waveform
                    readme: test-readme
                    price_description: 0.10 credits per inference
                    icon_image: https://api.salad.io/organizations/acme-corp/inference-endpoints/audio-to-waveform/icon
    ListInferenceEndpointJobs:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InferenceEndpointJobList"
          examples:
            jsonExample:
              value:
                items:
                  - id: 123e4567-e89b-12d3-a456-426614174000
                    inference_endpoint_name: avatar-generator
                    input:
                      property1: value1
                      property2: value2
                    metadata: null
                    organization_name: acme-corp
                    status: pending
                    events: []
                    create_time: 2024-05-01T19:00:00Z
                    update_time: 2024-05-01T19:00:00Z
                  - id: 123e4567-e89b-12d3-a456-426614174001
                    inference_endpoint_name: avatar-generator
                    input:
                      property1: value1
                      property2: value2
                    metadata: null
                    organization_name: acme-corp
                    status: pending
                    events: []
                    create_time: 2024-05-01T19:00:00Z
                    update_time: 2024-05-01T19:00:00Z
    CreateInferenceEndpointJob:
      description: Created
      headers:
        Location:
          schema:
            type: string
            examples:
              - /organizations/acme-corp/inference-endpoints/avatar-generator/jobs/123e4567-e89b-12d3-a456-426614174000
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InferenceEndpointJob"
          examples:
            jsonExample:
              value:
                id: 123e4567-e89b-12d3-a456-426614174000
                inference_endpoint_name: avatar-generator
                input:
                  property1: value1
                  property2: value2
                metadata: null
                organization_name: acme-corp
                status: pending
                events: []
                create_time: 2024-05-01T19:00:00Z
                update_time: 2024-05-01T19:00:00Z
    GetInferenceEndpointJob:
      description: Ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InferenceEndpointJob"
          examples:
            jsonExample:
              value:
                id: 123e4567-e89b-12d3-a456-426614174001
                inference_endpoint_name: avatar-generator
                input:
                  property1: value1
                  property2: value2
                metadata: null
                organization_name: acme-corp
                status: pending
                events: []
                create_time: 2024-05-01T19:00:00Z
                update_time: 2024-05-01T19:00:00Z
    DeleteInferenceEndpointJob:
      description: Accepted
    WebhookSecretKey:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WebhookSecretKey"
          examples:
            jsonExample:
              value:
                secret_key: $2a$10$WQ2Tj7v8I3L7pVt6D7Xz/9y0pTcWJg8Bf8TzGdU1l6hXU6XKvYjR4
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Salad-Api-Key
tags:
  - name: container_groups
    description: Container Groups
  - name: inference_endpoints
    description: Inference Endpoints
  - name: organization_data
    description: Auxiliary organization data and info
  - name: queues
    description: Job Queues
  - name: quotas
    description: quotas
  - name: workload_errors
    description: Workload Errors
  - name: system_logs
    description: System Logs
  - name: webhook_secret_key
    description: Webhook Secret Key
security:
  - ApiKeyAuth: []
