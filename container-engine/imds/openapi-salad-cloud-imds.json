{
  "openapi": "3.0.3",
  "info": {
    "title": "SaladCloud IMDS",
    "description": "The SaladCloud Instance Metadata Service (IMDS). Please refer to the [SaladCloud API Documentation](https://docs.salad.com/api-reference) for more details.",
    "termsOfService": "https://salad.com/terms",
    "contact": {
      "name": "SaladCloud Support",
      "url": "https://salad.com",
      "email": "cloud@salad.com"
    },
    "license": {
      "name": "MIT"
    },
    "version": "0.9.0-alpha.1"
  },
  "servers": [
    {
      "url": "http://169.254.169.254"
    }
  ],
  "paths": {
    "/v1/reallocate": {
      "summary": "Reallocate Container",
      "description": "Operations to reallocate a container to another Salad Node",
      "post": {
        "operationId": "reallocate_container",
        "summary": "Reallocate Container",
        "description": "Reallocates the running container to another Salad Node",
        "requestBody": {
          "$ref": "#/components/requestBodies/ReallocateContainer"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/ReallocateContainer"
          },
          "400": {
            "$ref": "#/components/responses/ReallocateContainerBadRequest"
          },
          "403": {
            "$ref": "#/components/responses/ReallocateContainerForbidden"
          },
          "404": {
            "$ref": "#/components/responses/ReallocateContainerNotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": ["metadata"],
        "x-codeSamples": [
          {
            "lang": "bash",
            "label": "cURL",
            "source": "curl --silent --noproxy \"*\" --request POST \\\n  --header 'Content-Type: application/json' \\\n  --header \"Metadata: true\" \\\n  --data '{\"reason\":\"laborum culpa\"}' \\\n  --url http://169.254.169.254/v1/reallocate"
          },
          {
            "lang": "csharp",
            "label": "C#",
            "source": "using Salad.Cloud.IMDS.SDK;\nusing Salad.Cloud.IMDS.SDK.Models;\n\nvar client = new SaladCloudImdsSdkClient();\n\nvar input = new ReallocateContainer(\"laborum culpa\");\n\nawait client.Metadata.ReallocateContainerAsync(input);\n"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/saladtechnologies/salad-cloud-imds-sdk-go/pkg/saladcloudimdssdkconfig\"\n  \"github.com/saladtechnologies/salad-cloud-imds-sdk-go/pkg/saladcloudimdssdk\"\n  \"github.com/saladtechnologies/salad-cloud-imds-sdk-go/pkg/metadata\"\n)\n\nconfig := saladcloudimdssdkconfig.NewConfig()\nclient := saladcloudimdssdk.NewSaladCloudImdsSdk(config)\n\n\nrequest := metadata.ReallocateContainer{}\nrequest.SetReason(\"Reason\")\n\nresponse, err := client.Metadata.ReallocateContainer(context.Background(), request)\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n"
          },
          {
            "lang": "java",
            "label": "Java",
            "source": "import com.salad.cloud.imdssdk.SaladCloudImdsSdk;\nimport com.salad.cloud.imdssdk.models.ReallocateContainer;\n\npublic class Main {\n\n  public static void main(String[] args) {\n    SaladCloudImdsSdk saladCloudImdsSdk = new SaladCloudImdsSdk();\n\n    ReallocateContainer reallocateContainer = ReallocateContainer.builder().reason(\"laborum culpa\").build();\n\n    saladCloudImdsSdk.metadataService.reallocateContainer(reallocateContainer);\n  }\n}\n"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from salad_cloud_imds_sdk import SaladCloudImdsSdk, Environment\nfrom salad_cloud_imds_sdk.models import ReallocateContainer\n\nsdk = SaladCloudImdsSdk(\n    base_url=Environment.DEFAULT.value,\n    timeout=10000\n)\n\nrequest_body = ReallocateContainer(\n    reason=\"aliqua ad dolor officia\"\n)\n\nresult = sdk.metadata.reallocate_container(request_body=request_body)\n\nprint(result)\n"
          },
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { ReallocateContainer, SaladCloudImdsSdk } from '@saladtechnologies-oss/salad-cloud-imds-sdk';\n\n(async () => {\n  const saladCloudImdsSdk = new SaladCloudImdsSdk({});\n\n  const reallocateContainer: ReallocateContainer = {\n    reason: 'laborum culpa',\n  };\n\n  const { data } = await saladCloudImdsSdk.metadata.reallocateContainer(input);\n\n  console.log(data);\n})();\n"
          }
        ]
      }
    },
    "/v1/status": {
      "summary": "Container Status",
      "description": "Operations to get the health statuses of the running container",
      "get": {
        "operationId": "get_container_status",
        "summary": "Get Container Status",
        "description": "Gets the health statuses of the running container",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContainerStatus"
          },
          "403": {
            "$ref": "#/components/responses/ContainerStatusForbidden"
          },
          "404": {
            "$ref": "#/components/responses/ContainerStatusNotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": ["metadata"],
        "x-codeSamples": [
          {
            "lang": "bash",
            "label": "cURL",
            "source": "curl --silent --noproxy \"*\" --request GET \\\n  --header \"Metadata: true\" \\\n  --url http://169.254.169.254/v1/status"
          },
          {
            "lang": "csharp",
            "label": "C#",
            "source": "using Salad.Cloud.IMDS.SDK;\n\nvar client = new SaladCloudImdsSdkClient();\n\nvar response = await client.Metadata.GetContainerStatusAsync();\n\nConsole.WriteLine(response);\n"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/saladtechnologies/salad-cloud-imds-sdk-go/pkg/saladcloudimdssdkconfig\"\n  \"github.com/saladtechnologies/salad-cloud-imds-sdk-go/pkg/saladcloudimdssdk\"\n)\n\nconfig := saladcloudimdssdkconfig.NewConfig()\nclient := saladcloudimdssdk.NewSaladCloudImdsSdk(config)\n\nresponse, err := client.Metadata.GetContainerStatus(context.Background())\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n"
          },
          {
            "lang": "java",
            "label": "Java",
            "source": "import com.salad.cloud.imdssdk.SaladCloudImdsSdk;\nimport com.salad.cloud.imdssdk.models.ContainerStatus;\n\npublic class Main {\n\n  public static void main(String[] args) {\n    SaladCloudImdsSdk saladCloudImdsSdk = new SaladCloudImdsSdk();\n\n    ContainerStatus response = saladCloudImdsSdk.metadataService.getContainerStatus();\n\n    System.out.println(response);\n  }\n}\n"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from salad_cloud_imds_sdk import SaladCloudImdsSdk, Environment\n\nsdk = SaladCloudImdsSdk(\n    base_url=Environment.DEFAULT.value,\n    timeout=10000\n)\n\nresult = sdk.metadata.get_container_status()\n\nprint(result)\n"
          },
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { SaladCloudImdsSdk } from '@saladtechnologies-oss/salad-cloud-imds-sdk';\n\n(async () => {\n  const saladCloudImdsSdk = new SaladCloudImdsSdk({});\n\n  const { data } = await saladCloudImdsSdk.metadata.getContainerStatus();\n\n  console.log(data);\n})();\n"
          }
        ]
      }
    },
    "/v1/token": {
      "summary": "Container Token",
      "description": "Operations to get the identity token of the running container",
      "get": {
        "operationId": "get_container_token",
        "summary": "Get Container Token",
        "description": "Gets the identity token of the running container",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContainerToken"
          },
          "403": {
            "$ref": "#/components/responses/ContainerTokenForbidden"
          },
          "404": {
            "$ref": "#/components/responses/ContainerTokenNotFound"
          },
          "default": {
            "$ref": "#/components/responses/UnknownError"
          }
        },
        "tags": ["metadata"],
        "x-codeSamples": [
          {
            "lang": "bash",
            "label": "cURL",
            "source": "curl --silent --noproxy \"*\" --request GET \\\n  --header \"Metadata: true\" \\\n  --url http://169.254.169.254/v1/token"
          },
          {
            "lang": "csharp",
            "label": "C#",
            "source": "using Salad.Cloud.IMDS.SDK;\n\nvar client = new SaladCloudImdsSdkClient();\n\nvar response = await client.Metadata.GetContainerTokenAsync();\n\nConsole.WriteLine(response);\n"
          },
          {
            "lang": "go",
            "label": "Go",
            "source": "import (\n  \"fmt\"\n  \"encoding/json\"\n  \"github.com/saladtechnologies/salad-cloud-imds-sdk-go/pkg/saladcloudimdssdkconfig\"\n  \"github.com/saladtechnologies/salad-cloud-imds-sdk-go/pkg/saladcloudimdssdk\"\n)\n\nconfig := saladcloudimdssdkconfig.NewConfig()\nclient := saladcloudimdssdk.NewSaladCloudImdsSdk(config)\n\nresponse, err := client.Metadata.GetContainerToken(context.Background())\nif err != nil {\n  panic(err)\n}\n\nfmt.Print(response)\n"
          },
          {
            "lang": "java",
            "label": "Java",
            "source": "import com.salad.cloud.imdssdk.SaladCloudImdsSdk;\nimport com.salad.cloud.imdssdk.models.ContainerToken;\n\npublic class Main {\n\n  public static void main(String[] args) {\n    SaladCloudImdsSdk saladCloudImdsSdk = new SaladCloudImdsSdk();\n\n    ContainerToken response = saladCloudImdsSdk.metadataService.getContainerToken();\n\n    System.out.println(response);\n  }\n}\n"
          },
          {
            "lang": "python",
            "label": "Python",
            "source": "from salad_cloud_imds_sdk import SaladCloudImdsSdk, Environment\n\nsdk = SaladCloudImdsSdk(\n    base_url=Environment.DEFAULT.value,\n    timeout=10000\n)\n\nresult = sdk.metadata.get_container_token()\n\nprint(result)\n"
          },
          {
            "lang": "typescript",
            "label": "TypeScript",
            "source": "import { SaladCloudImdsSdk } from '@saladtechnologies-oss/salad-cloud-imds-sdk';\n\n(async () => {\n  const saladCloudImdsSdk = new SaladCloudImdsSdk({});\n\n  const { data } = await saladCloudImdsSdk.metadata.getContainerToken();\n\n  console.log(data);\n})();\n"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ReallocateContainer": {
        "description": "Represents a request to reallocate a container.",
        "type": "object",
        "additionalProperties": false,
        "required": ["reason"],
        "properties": {
          "reason": {
            "description": "The reason for reallocating the container. This value is reported to SaladCloud support for quality assurance of Salad Nodes.",
            "type": "string",
            "minLength": 1,
            "maxLength": 1000
          }
        }
      },
      "ReallocateContainerProblemType": {
        "description": "Identifies the type of the API request failure.",
        "type": "string",
        "nullable": true,
        "enum": ["reason_required", "request_header_invalid", "container_not_found", null]
      },
      "ReallocateContainerProblemDetails": {
        "description": "Represents a failed API request.",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ReallocateContainerProblemType"
          },
          "title": {
            "type": "string",
            "nullable": true,
            "description": "A short, human-readable summary of the problem type"
          },
          "status": {
            "type": "integer",
            "nullable": true,
            "description": "The HTTP status code generated by the origin server"
          },
          "detail": {
            "type": "string",
            "nullable": true,
            "description": "A human-readable explanation specific to this occurrence of the problem"
          },
          "instance": {
            "type": "string",
            "nullable": true,
            "description": "The URI reference that identifies the specific occurrence of the problem"
          }
        }
      },
      "ContainerStatus": {
        "description": "Represents the health statuses of the running container.",
        "type": "object",
        "additionalProperties": false,
        "required": ["ready", "started"],
        "properties": {
          "ready": {
            "description": "`true` if the running container is ready. If a readiness probe is defined, this returns the latest result of the probe. If a readiness probe is not defined but a startup probe is defined, this returns the same value as the `started` property. If neither a readiness probe nor a startup probe are defined, returns `true`.",
            "type": "boolean"
          },
          "started": {
            "description": "`true` if the running container is started. If a startup probe is defined, this returns the latest result of the probe. If a startup probe is not defined, returns `true`.",
            "type": "boolean"
          }
        }
      },
      "ContainerStatusProblemType": {
        "description": "Identifies the type of the API request failure.",
        "type": "string",
        "nullable": true,
        "enum": ["request_header_invalid", "container_not_found", null]
      },
      "ContainerStatusProblemDetails": {
        "description": "Represents a failed API request.",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ContainerStatusProblemType"
          },
          "title": {
            "type": "string",
            "nullable": true,
            "description": "A short, human-readable summary of the problem type"
          },
          "status": {
            "type": "integer",
            "nullable": true,
            "description": "The HTTP status code generated by the origin server"
          },
          "detail": {
            "type": "string",
            "nullable": true,
            "description": "A human-readable explanation specific to this occurrence of the problem"
          },
          "instance": {
            "type": "string",
            "nullable": true,
            "description": "The URI reference that identifies the specific occurrence of the problem"
          }
        }
      },
      "ContainerToken": {
        "description": "Represents the identity token of the running container.",
        "type": "object",
        "additionalProperties": false,
        "required": ["jwt"],
        "properties": {
          "jwt": {
            "description": "The JSON Web Token (JWT) that may be used to identify the running container. The JWT may be verified using the JSON Web Key Set (JWKS) available at https://matrix-rest-api.salad.com/.well-known/stash-jwks.json.",
            "type": "string",
            "minLength": 1,
            "maxLength": 1000
          }
        }
      },
      "ContainerTokenProblemType": {
        "description": "Identifies the type of the API request failure.",
        "type": "string",
        "nullable": true,
        "enum": ["request_header_invalid", "container_not_found", null]
      },
      "ContainerTokenProblemDetails": {
        "description": "Represents a failed API request.",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ContainerTokenProblemType"
          },
          "title": {
            "type": "string",
            "nullable": true,
            "description": "A short, human-readable summary of the problem type"
          },
          "status": {
            "type": "integer",
            "nullable": true,
            "description": "The HTTP status code generated by the origin server"
          },
          "detail": {
            "type": "string",
            "nullable": true,
            "description": "A human-readable explanation specific to this occurrence of the problem"
          },
          "instance": {
            "type": "string",
            "nullable": true,
            "description": "The URI reference that identifies the specific occurrence of the problem"
          }
        }
      },
      "ProblemDetails": {
        "description": "Represents a failed API request.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true,
            "default": "about:blank",
            "description": "The URI reference that identifies the problem type"
          },
          "title": {
            "type": "string",
            "nullable": true,
            "description": "A short, human-readable summary of the problem type"
          },
          "status": {
            "type": "integer",
            "nullable": true,
            "description": "The HTTP status code generated by the origin server"
          },
          "detail": {
            "type": "string",
            "nullable": true,
            "description": "A human-readable explanation specific to this occurrence of the problem"
          },
          "instance": {
            "type": "string",
            "nullable": true,
            "description": "The URI reference that identifies the specific occurrence of the problem"
          }
        }
      }
    },
    "requestBodies": {
      "ReallocateContainer": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReallocateContainer"
            },
            "examples": {
              "jsonExample": {
                "value": {
                  "reason": "Insufficient VRAM"
                }
              }
            }
          }
        }
      }
    },
    "responses": {
      "ReallocateContainer": {
        "description": "No Content"
      },
      "ReallocateContainerBadRequest": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReallocateContainerProblemDetails"
            },
            "examples": {
              "jsonExample": {
                "value": {
                  "type": "reason_required",
                  "title": "Bad Request",
                  "status": 400,
                  "detail": "The reason property is required."
                }
              }
            }
          }
        }
      },
      "ReallocateContainerForbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReallocateContainerProblemDetails"
            },
            "examples": {
              "jsonExample": {
                "value": {
                  "type": "request_header_invalid",
                  "title": "Forbidden",
                  "status": 403,
                  "detail": "The request headers are invalid."
                }
              }
            }
          }
        }
      },
      "ReallocateContainerNotFound": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReallocateContainerProblemDetails"
            },
            "examples": {
              "jsonExample": {
                "value": {
                  "type": "container_not_found",
                  "title": "Not Found",
                  "status": 404,
                  "detail": "The container is stopping."
                }
              }
            }
          }
        }
      },
      "ContainerStatus": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ContainerStatus"
            },
            "examples": {
              "jsonExample": {
                "value": {
                  "ready": true,
                  "started": true
                }
              }
            }
          }
        }
      },
      "ContainerStatusForbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ContainerStatusProblemDetails"
            },
            "examples": {
              "jsonExample": {
                "value": {
                  "type": "request_header_invalid",
                  "title": "Forbidden",
                  "status": 403,
                  "detail": "The request headers are invalid."
                }
              }
            }
          }
        }
      },
      "ContainerStatusNotFound": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ContainerStatusProblemDetails"
            },
            "examples": {
              "jsonExample": {
                "value": {
                  "type": "container_not_found",
                  "title": "Not Found",
                  "status": 404,
                  "detail": "The container is stopping."
                }
              }
            }
          }
        }
      },
      "ContainerToken": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ContainerToken"
            },
            "examples": {
              "jsonExample": {
                "value": {
                  "jwt": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhYmMxMjMiLCJpYXQiOjE1MTYyMzkwMjIsImV4cCI6MTUxNjI0OTAyMn0.8EYto39v_-5ZKVRZYPKj0S-xuxtTUfWgeQ4QIFuW8mo"
                }
              }
            }
          }
        }
      },
      "ContainerTokenForbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ContainerTokenProblemDetails"
            },
            "examples": {
              "jsonExample": {
                "value": {
                  "type": "request_header_invalid",
                  "title": "Forbidden",
                  "status": 403,
                  "detail": "The request headers are invalid."
                }
              }
            }
          }
        }
      },
      "ContainerTokenNotFound": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ContainerTokenProblemDetails"
            },
            "examples": {
              "jsonExample": {
                "value": {
                  "type": "container_not_found",
                  "title": "Not Found",
                  "status": 404,
                  "detail": "The container is stopping."
                }
              }
            }
          }
        }
      },
      "UnknownError": {
        "description": "Unknown Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"
            },
            "examples": {
              "jsonExample": {
                "value": {
                  "type": "about:blank",
                  "title": "Unknown Error",
                  "status": 500,
                  "detail": "An internal error occurred. Please try your request again."
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "metadata",
      "description": "Instance Metadata Service"
    }
  ]
}
